ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Capsense_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	Capsense_rawFilterData1,2,4
  20              		.global	Capsense_sensorBaseline
  21              		.bss
  22              		.align	2
  23              		.type	Capsense_sensorBaseline, %object
  24              		.size	Capsense_sensorBaseline, 2
  25              	Capsense_sensorBaseline:
  26 0000 0000     		.space	2
  27              		.global	Capsense_sensorBaselineLow
  28 0002 0000     		.align	2
  29              		.type	Capsense_sensorBaselineLow, %object
  30              		.size	Capsense_sensorBaselineLow, 1
  31              	Capsense_sensorBaselineLow:
  32 0004 00       		.space	1
  33              		.global	Capsense_sensorSignal
  34 0005 000000   		.align	2
  35              		.type	Capsense_sensorSignal, %object
  36              		.size	Capsense_sensorSignal, 1
  37              	Capsense_sensorSignal:
  38 0008 00       		.space	1
  39              		.global	Capsense_sensorOnMask
  40 0009 000000   		.align	2
  41              		.type	Capsense_sensorOnMask, %object
  42              		.size	Capsense_sensorOnMask, 1
  43              	Capsense_sensorOnMask:
  44 000c 00       		.space	1
  45              		.comm	Capsense_lowBaselineResetCnt,1,4
  46              		.global	Capsense_lowBaselineReset
  47              		.data
  48              		.align	2
  49              		.type	Capsense_lowBaselineReset, %object
  50              		.size	Capsense_lowBaselineReset, 1
  51              	Capsense_lowBaselineReset:
  52 0000 05       		.byte	5
  53              		.global	Capsense_enableRawFilters
  54              		.type	Capsense_enableRawFilters, %object
  55              		.size	Capsense_enableRawFilters, 1
  56              	Capsense_enableRawFilters:
  57 0001 01       		.byte	1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 2


  58              		.global	Capsense_fingerThreshold
  59 0002 0000     		.align	2
  60              		.type	Capsense_fingerThreshold, %object
  61              		.size	Capsense_fingerThreshold, 1
  62              	Capsense_fingerThreshold:
  63 0004 64       		.byte	100
  64              		.global	Capsense_noiseThreshold
  65 0005 000000   		.align	2
  66              		.type	Capsense_noiseThreshold, %object
  67              		.size	Capsense_noiseThreshold, 1
  68              	Capsense_noiseThreshold:
  69 0008 14       		.byte	20
  70              		.global	Capsense_negativeNoiseThreshold
  71 0009 000000   		.align	2
  72              		.type	Capsense_negativeNoiseThreshold, %object
  73              		.size	Capsense_negativeNoiseThreshold, 1
  74              	Capsense_negativeNoiseThreshold:
  75 000c 14       		.byte	20
  76              		.global	Capsense_hysteresis
  77 000d 000000   		.align	2
  78              		.type	Capsense_hysteresis, %object
  79              		.size	Capsense_hysteresis, 1
  80              	Capsense_hysteresis:
  81 0010 0A       		.byte	10
  82              		.global	Capsense_debounce
  83 0011 000000   		.align	2
  84              		.type	Capsense_debounce, %object
  85              		.size	Capsense_debounce, 1
  86              	Capsense_debounce:
  87 0014 01       		.byte	1
  88              		.bss
  89 000d 000000   		.align	2
  90              	Capsense_debounceCounter:
  91 0010 0000     		.space	2
  92              		.global	Capsense_rawDataIndex
  93              		.section	.rodata
  94              		.align	2
  95              		.type	Capsense_rawDataIndex, %object
  96              		.size	Capsense_rawDataIndex, 1
  97              	Capsense_rawDataIndex:
  98 0000 00       		.space	1
  99              		.global	Capsense_numberOfSensors
 100 0001 000000   		.align	2
 101              		.type	Capsense_numberOfSensors, %object
 102              		.size	Capsense_numberOfSensors, 1
 103              	Capsense_numberOfSensors:
 104 0004 01       		.byte	1
 105              		.section	.text.Capsense_BaseInit,"ax",%progbits
 106              		.align	2
 107              		.global	Capsense_BaseInit
 108              		.code	16
 109              		.thumb_func
 110              		.type	Capsense_BaseInit, %function
 111              	Capsense_BaseInit:
 112              	.LFB36:
 113              		.file 1 "Generated_Source\\PSoC4\\Capsense_CSHL.c"
   1:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 3


   2:Generated_Source\PSoC4/Capsense_CSHL.c **** * File Name: Capsense_CSHL.c
   3:Generated_Source\PSoC4/Capsense_CSHL.c **** * Version 2.60
   4:Generated_Source\PSoC4/Capsense_CSHL.c **** *
   5:Generated_Source\PSoC4/Capsense_CSHL.c **** * Description:
   6:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC4/Capsense_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC4/Capsense_CSHL.c **** *
   9:Generated_Source\PSoC4/Capsense_CSHL.c **** * Note:
  10:Generated_Source\PSoC4/Capsense_CSHL.c **** *
  11:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC4/Capsense_CSHL.c **** * Copyright 2013-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/Capsense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/Capsense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/Capsense_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  18:Generated_Source\PSoC4/Capsense_CSHL.c **** #include "Capsense_CSHL.h"
  19:Generated_Source\PSoC4/Capsense_CSHL.c **** #include "Capsense_PVT.h"
  20:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  21:Generated_Source\PSoC4/Capsense_CSHL.c **** /* SmartSense functions */
  22:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO)
  23:Generated_Source\PSoC4/Capsense_CSHL.c ****     extern void Capsense_UpdateThresholds(uint32 sensor);
  24:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO) */
  25:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  26:Generated_Source\PSoC4/Capsense_CSHL.c **** /* Storage of filters data */
  27:Generated_Source\PSoC4/Capsense_CSHL.c **** #if ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER)) || \
  28:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER)) )
  29:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  30:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_rawFilterData1[Capsense_TOTAL_SENSOR_COUNT];
  31:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_rawFilterData2[Capsense_TOTAL_SENSOR_COUNT];
  32:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  33:Generated_Source\PSoC4/Capsense_CSHL.c **** #elif ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR2_FILTER))   || \
  34:Generated_Source\PSoC4/Capsense_CSHL.c ****         (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR4_FILTER))   || \
  35:Generated_Source\PSoC4/Capsense_CSHL.c ****         (0u != (Capsense_RAW_FILTER_MASK & Capsense_JITTER_FILTER)) || \
  36:Generated_Source\PSoC4/Capsense_CSHL.c ****         (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR8_FILTER))   || \
  37:Generated_Source\PSoC4/Capsense_CSHL.c ****         (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR16_FILTER)) )
  38:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  39:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_rawFilterData1[Capsense_TOTAL_SENSOR_COUNT];
  40:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif  /* ( (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER) || \
  41:Generated_Source\PSoC4/Capsense_CSHL.c ****         *    (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER) )
  42:Generated_Source\PSoC4/Capsense_CSHL.c ****         */
  43:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  44:Generated_Source\PSoC4/Capsense_CSHL.c **** extern uint16 Capsense_sensorRaw[Capsense_TOTAL_SENSOR_COUNT];
  45:Generated_Source\PSoC4/Capsense_CSHL.c **** extern uint8 Capsense_sensorEnableMask[Capsense_TOTAL_SENSOR_MASK];
  46:Generated_Source\PSoC4/Capsense_CSHL.c **** extern const uint8 Capsense_widgetNumber[Capsense_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  48:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_TUNING_METHOD != Capsense__TUNING_NONE)
  49:Generated_Source\PSoC4/Capsense_CSHL.c ****     extern uint32 Capsense_widgetResolution[Capsense_RESOLUTIONS_TBL_SIZE];
  50:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TUNING_METHOD != Capsense__TUNING_NONE) */
  51:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  52:Generated_Source\PSoC4/Capsense_CSHL.c **** uint16 Capsense_sensorBaseline[Capsense_TOTAL_SENSOR_COUNT] = {0u};
  53:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_sensorBaselineLow[Capsense_TOTAL_SENSOR_COUNT] = {0u};
  54:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_sensorSignal[Capsense_TOTAL_SENSOR_COUNT] = {0u};
  55:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_sensorOnMask[Capsense_TOTAL_SENSOR_MASK] = {0u};
  56:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  57:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_lowBaselineResetCnt[Capsense_TOTAL_SENSOR_COUNT];
  58:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_lowBaselineReset[Capsense_TOTAL_SENSOR_COUNT] = {
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 4


  59:Generated_Source\PSoC4/Capsense_CSHL.c ****     5u, 
  60:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  61:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  62:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  63:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  64:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO)
  65:Generated_Source\PSoC4/Capsense_CSHL.c ****     extern Capsense_CONFIG_TYPE_P4_v2_60 Capsense_config;
  66:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif  /* (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO) */
  67:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  68:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_RAW_FILTER_MASK != 0u)
  69:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_enableRawFilters = Capsense_RAW_FILTERS_ENABLED;
  70:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif  /* (Capsense_RAW_FILTER_MASK != 0u) */
  71:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  72:Generated_Source\PSoC4/Capsense_CSHL.c **** /* Generated by Customizer */
  73:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_fingerThreshold[] = {
  74:Generated_Source\PSoC4/Capsense_CSHL.c ****     100u, 
  75:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  76:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  77:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_noiseThreshold[] = {
  78:Generated_Source\PSoC4/Capsense_CSHL.c ****     20u, 
  79:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  80:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  81:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_negativeNoiseThreshold[] = {
  82:Generated_Source\PSoC4/Capsense_CSHL.c ****     20u, 
  83:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  84:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  85:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_hysteresis[] = {
  86:Generated_Source\PSoC4/Capsense_CSHL.c ****     10u, 
  87:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  88:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  89:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_debounce[] = {
  90:Generated_Source\PSoC4/Capsense_CSHL.c ****     1u, 
  91:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  92:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  93:Generated_Source\PSoC4/Capsense_CSHL.c **** static uint8 Capsense_debounceCounter[] = {
  94:Generated_Source\PSoC4/Capsense_CSHL.c ****     0u, 0u, 
  95:Generated_Source\PSoC4/Capsense_CSHL.c **** };
  96:Generated_Source\PSoC4/Capsense_CSHL.c **** 
  97:Generated_Source\PSoC4/Capsense_CSHL.c **** const uint8 Capsense_rawDataIndex[] = {
  98:Generated_Source\PSoC4/Capsense_CSHL.c ****     0u, /* Button0__BTN */
  99:Generated_Source\PSoC4/Capsense_CSHL.c **** };
 100:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 101:Generated_Source\PSoC4/Capsense_CSHL.c **** const uint8 Capsense_numberOfSensors[] = {
 102:Generated_Source\PSoC4/Capsense_CSHL.c ****     1u, /* Button0__BTN */
 103:Generated_Source\PSoC4/Capsense_CSHL.c **** };
 104:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 105:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 106:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 107:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 108:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 109:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_BaseInit
 110:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 111:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 112:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 113:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Loads the Capsense_sensorBaseline[sensor] array element with an
 114:Generated_Source\PSoC4/Capsense_CSHL.c **** *  initial value which is equal to the raw count value.
 115:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Resets to zero Capsense_sensorBaselineLow[sensor] and
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 5


 116:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorSignal[sensor] array element.
 117:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Loads the Capsense_rawFilterData2[sensor] and
 118:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_rawFilterData2[sensor] array element with an
 119:Generated_Source\PSoC4/Capsense_CSHL.c **** *  initial value which is equal to the raw count value if the raw data filter is enabled.
 120:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 121:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 122:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 123:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 124:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 125:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 126:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 127:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 128:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaseline[]    - used to store the baseline value.
 129:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaselineLow[] - used to store the fraction byte of
 130:Generated_Source\PSoC4/Capsense_CSHL.c **** *  the baseline value.
 131:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorSignal[]      - used to store a difference between
 132:Generated_Source\PSoC4/Capsense_CSHL.c **** *  the current value of raw data and the previous value of the baseline.
 133:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_rawFilterData1[]    - used to store a previous sample of
 134:Generated_Source\PSoC4/Capsense_CSHL.c **** *  any enabled raw data filter.
 135:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_rawFilterData2[]    - used to store before a previous sample
 136:Generated_Source\PSoC4/Capsense_CSHL.c **** *  of the enabled raw data filter. Required only for median or average filters.
 137:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 138:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 139:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 140:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 141:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 142:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_BaseInit(uint32 sensor)
 143:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 114              		.loc 1 143 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 84B0     		sub	sp, sp, #16
 123              		.cfi_def_cfa_offset 24
 124 0004 00AF     		add	r7, sp, #0
 125              		.cfi_def_cfa_register 7
 126 0006 7860     		str	r0, [r7, #4]
 144:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if ((Capsense_TOTAL_BUTTONS_COUNT) || (Capsense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 145:Generated_Source\PSoC4/Capsense_CSHL.c ****          (Capsense_TOTAL_GENERICS_COUNT))
 146:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 widget = Capsense_widgetNumber[sensor];
 127              		.loc 1 146 0
 128 0008 0F23     		movs	r3, #15
 129 000a FB18     		adds	r3, r7, r3
 130 000c 1649     		ldr	r1, .L2
 131 000e 7A68     		ldr	r2, [r7, #4]
 132 0010 8A18     		adds	r2, r1, r2
 133 0012 1278     		ldrb	r2, [r2]
 134 0014 1A70     		strb	r2, [r3]
 147:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif /* ((Capsense_TOTAL_MATRIX_BUTTONS_COUNT) || (Capsense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 148:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 149:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_MATRIX_BUTTONS_COUNT)
 150:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 debounceIndex;
 151:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* (Capsense_TOTAL_MATRIX_BUTTONS_COUNT) */
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 6


 152:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 153:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_GENERICS_COUNT)
 154:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Exclude generic widget */
 155:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(widget < Capsense_END_OF_WIDGETS_INDEX)
 156:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 157:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* Capsense_TOTAL_GENERICS_COUNT */
 158:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 159:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Initialize Baseline */
 160:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_sensorBaseline[sensor] = Capsense_sensorRaw[sensor];
 135              		.loc 1 160 0
 136 0016 154B     		ldr	r3, .L2+4
 137 0018 7A68     		ldr	r2, [r7, #4]
 138 001a 5200     		lsls	r2, r2, #1
 139 001c D15A     		ldrh	r1, [r2, r3]
 140 001e 144B     		ldr	r3, .L2+8
 141 0020 7A68     		ldr	r2, [r7, #4]
 142 0022 5200     		lsls	r2, r2, #1
 143 0024 D152     		strh	r1, [r2, r3]
 161:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_sensorBaselineLow[sensor] = 0u;
 144              		.loc 1 161 0
 145 0026 134A     		ldr	r2, .L2+12
 146 0028 7B68     		ldr	r3, [r7, #4]
 147 002a D318     		adds	r3, r2, r3
 148 002c 0022     		movs	r2, #0
 149 002e 1A70     		strb	r2, [r3]
 162:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_sensorSignal[sensor] = 0u;
 150              		.loc 1 162 0
 151 0030 114A     		ldr	r2, .L2+16
 152 0032 7B68     		ldr	r3, [r7, #4]
 153 0034 D318     		adds	r3, r2, r3
 154 0036 0022     		movs	r2, #0
 155 0038 1A70     		strb	r2, [r3]
 163:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 164:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_debounceCounter[widget] =  Capsense_debounce[widget];
 156              		.loc 1 164 0
 157 003a 0F23     		movs	r3, #15
 158 003c FB18     		adds	r3, r7, r3
 159 003e 1B78     		ldrb	r3, [r3]
 160 0040 0F22     		movs	r2, #15
 161 0042 BA18     		adds	r2, r7, r2
 162 0044 1278     		ldrb	r2, [r2]
 163 0046 0D49     		ldr	r1, .L2+20
 164 0048 895C     		ldrb	r1, [r1, r2]
 165 004a 0D4A     		ldr	r2, .L2+24
 166 004c D154     		strb	r1, [r2, r3]
 165:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 166:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 167:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if ((0u != (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER)) ||\
 168:Generated_Source\PSoC4/Capsense_CSHL.c ****          (0u != (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER)))
 169:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 170:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_rawFilterData1[sensor] = Capsense_sensorRaw[sensor];
 171:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_rawFilterData2[sensor] = Capsense_sensorRaw[sensor];
 172:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 173:Generated_Source\PSoC4/Capsense_CSHL.c ****     #elif ((Capsense_RAW_FILTER_MASK & Capsense_IIR2_FILTER) ||\
 174:Generated_Source\PSoC4/Capsense_CSHL.c ****            (Capsense_RAW_FILTER_MASK & Capsense_IIR4_FILTER) ||\
 175:Generated_Source\PSoC4/Capsense_CSHL.c ****            (Capsense_RAW_FILTER_MASK & Capsense_JITTER_FILTER) ||\
 176:Generated_Source\PSoC4/Capsense_CSHL.c ****            (Capsense_RAW_FILTER_MASK & Capsense_IIR8_FILTER) ||\
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 7


 177:Generated_Source\PSoC4/Capsense_CSHL.c ****            (Capsense_RAW_FILTER_MASK & Capsense_IIR16_FILTER))
 178:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 179:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_rawFilterData1[sensor] = Capsense_sensorRaw[sensor];
 167              		.loc 1 179 0
 168 004e 074B     		ldr	r3, .L2+4
 169 0050 7A68     		ldr	r2, [r7, #4]
 170 0052 5200     		lsls	r2, r2, #1
 171 0054 D15A     		ldrh	r1, [r2, r3]
 172 0056 0B4B     		ldr	r3, .L2+28
 173 0058 7A68     		ldr	r2, [r7, #4]
 174 005a 5200     		lsls	r2, r2, #1
 175 005c D152     		strh	r1, [r2, r3]
 180:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 181:Generated_Source\PSoC4/Capsense_CSHL.c ****     #else
 182:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* No Raw filters */
 183:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* ((Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER) || \
 184:Generated_Source\PSoC4/Capsense_CSHL.c ****             *   (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER))
 185:Generated_Source\PSoC4/Capsense_CSHL.c ****             */
 186:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 187:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_GENERICS_COUNT)
 188:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Exclude generic widget */
 189:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 190:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* Capsense_TOTAL_GENERICS_COUNT */
 191:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 176              		.loc 1 191 0
 177 005e C046     		nop
 178 0060 BD46     		mov	sp, r7
 179 0062 04B0     		add	sp, sp, #16
 180              		@ sp needed
 181 0064 80BD     		pop	{r7, pc}
 182              	.L3:
 183 0066 C046     		.align	2
 184              	.L2:
 185 0068 00000000 		.word	Capsense_widgetNumber
 186 006c 00000000 		.word	Capsense_sensorRaw
 187 0070 00000000 		.word	Capsense_sensorBaseline
 188 0074 00000000 		.word	Capsense_sensorBaselineLow
 189 0078 00000000 		.word	Capsense_sensorSignal
 190 007c 00000000 		.word	Capsense_debounce
 191 0080 10000000 		.word	Capsense_debounceCounter
 192 0084 00000000 		.word	Capsense_rawFilterData1
 193              		.cfi_endproc
 194              	.LFE36:
 195              		.size	Capsense_BaseInit, .-Capsense_BaseInit
 196              		.section	.text.Capsense_InitializeSensorBaseline,"ax",%progbits
 197              		.align	2
 198              		.global	Capsense_InitializeSensorBaseline
 199              		.code	16
 200              		.thumb_func
 201              		.type	Capsense_InitializeSensorBaseline, %function
 202              	Capsense_InitializeSensorBaseline:
 203              	.LFB37:
 192:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 193:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 194:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 195:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_InitializeSensorBaseline
 196:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 8


 197:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 198:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 199:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Loads the Capsense_sensorBaseline[sensor] array element with an
 200:Generated_Source\PSoC4/Capsense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or a pair
 201:Generated_Source\PSoC4/Capsense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the
 202:Generated_Source\PSoC4/Capsense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if
 203:Generated_Source\PSoC4/Capsense_CSHL.c **** *  enabled.
 204:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 205:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 206:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 207:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 208:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 209:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 210:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 211:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 212:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 213:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 214:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 215:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 216:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 217:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 218:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_InitializeSensorBaseline(uint32 sensor)
 219:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 204              		.loc 1 219 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 8
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 82B0     		sub	sp, sp, #8
 213              		.cfi_def_cfa_offset 16
 214 0004 00AF     		add	r7, sp, #0
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
 220:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Scan sensor */
 221:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_ScanSensor(sensor);
 217              		.loc 1 221 0
 218 0008 7B68     		ldr	r3, [r7, #4]
 219 000a 1800     		movs	r0, r3
 220 000c FFF7FEFF 		bl	Capsense_ScanSensor
 222:Generated_Source\PSoC4/Capsense_CSHL.c ****     while(Capsense_IsBusy() != 0u)
 221              		.loc 1 222 0
 222 0010 C046     		nop
 223              	.L5:
 224              		.loc 1 222 0 is_stmt 0 discriminator 1
 225 0012 FFF7FEFF 		bl	Capsense_IsBusy
 226 0016 031E     		subs	r3, r0, #0
 227 0018 FBD1     		bne	.L5
 223:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 224:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Wait while sensor is busy */
 225:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 226:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 227:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Initialize Baseline, Signal and debounce counters */
 228:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_BaseInit(sensor);
 228              		.loc 1 228 0 is_stmt 1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 9


 229 001a 7B68     		ldr	r3, [r7, #4]
 230 001c 1800     		movs	r0, r3
 231 001e FFF7FEFF 		bl	Capsense_BaseInit
 229:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 232              		.loc 1 229 0
 233 0022 C046     		nop
 234 0024 BD46     		mov	sp, r7
 235 0026 02B0     		add	sp, sp, #8
 236              		@ sp needed
 237 0028 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE37:
 240              		.size	Capsense_InitializeSensorBaseline, .-Capsense_InitializeSensorBaseline
 241 002a C046     		.section	.text.Capsense_InitializeAllBaselines,"ax",%progbits
 242              		.align	2
 243              		.global	Capsense_InitializeAllBaselines
 244              		.code	16
 245              		.thumb_func
 246              		.type	Capsense_InitializeAllBaselines, %function
 247              	Capsense_InitializeAllBaselines:
 248              	.LFB38:
 230:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 231:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 232:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 233:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_InitializeAllBaselines
 234:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 235:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 236:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 237:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Uses the Capsense_InitializeSensorBaseline function to load the
 238:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaseline[] array with an initial values by scanning
 239:Generated_Source\PSoC4/Capsense_CSHL.c **** *  all the sensors. The raw count values are copied into the baseline array for
 240:Generated_Source\PSoC4/Capsense_CSHL.c **** *  all the sensors. The raw data filters are initialized if enabled.
 241:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 242:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 243:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 244:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 245:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 246:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 247:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 248:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 249:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 250:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 251:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 252:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 253:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 254:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 255:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_InitializeAllBaselines(void)
 256:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 249              		.loc 1 256 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 8
 252              		@ frame_needed = 1, uses_anonymous_args = 0
 253 0000 80B5     		push	{r7, lr}
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 10


 258              		.cfi_def_cfa_offset 16
 259 0004 00AF     		add	r7, sp, #0
 260              		.cfi_def_cfa_register 7
 257:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 i;
 258:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 259:Generated_Source\PSoC4/Capsense_CSHL.c ****     for(i = 0u; i < Capsense_TOTAL_SCANSLOT_COUNT; i++)
 261              		.loc 1 259 0
 262 0006 0023     		movs	r3, #0
 263 0008 7B60     		str	r3, [r7, #4]
 264 000a 06E0     		b	.L7
 265              	.L8:
 260:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 261:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_InitializeSensorBaseline(i);
 266              		.loc 1 261 0 discriminator 3
 267 000c 7B68     		ldr	r3, [r7, #4]
 268 000e 1800     		movs	r0, r3
 269 0010 FFF7FEFF 		bl	Capsense_InitializeSensorBaseline
 259:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 270              		.loc 1 259 0 discriminator 3
 271 0014 7B68     		ldr	r3, [r7, #4]
 272 0016 0133     		adds	r3, r3, #1
 273 0018 7B60     		str	r3, [r7, #4]
 274              	.L7:
 259:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 275              		.loc 1 259 0 is_stmt 0 discriminator 1
 276 001a 7B68     		ldr	r3, [r7, #4]
 277 001c 002B     		cmp	r3, #0
 278 001e F5D0     		beq	.L8
 262:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 263:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 279              		.loc 1 263 0 is_stmt 1
 280 0020 C046     		nop
 281 0022 BD46     		mov	sp, r7
 282 0024 02B0     		add	sp, sp, #8
 283              		@ sp needed
 284 0026 80BD     		pop	{r7, pc}
 285              		.cfi_endproc
 286              	.LFE38:
 287              		.size	Capsense_InitializeAllBaselines, .-Capsense_InitializeAllBaselines
 288              		.section	.text.Capsense_InitializeEnabledBaselines,"ax",%progbits
 289              		.align	2
 290              		.global	Capsense_InitializeEnabledBaselines
 291              		.code	16
 292              		.thumb_func
 293              		.type	Capsense_InitializeEnabledBaselines, %function
 294              	Capsense_InitializeEnabledBaselines:
 295              	.LFB39:
 264:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 265:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 266:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 267:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_InitializeEnabledBaselines
 268:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 269:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 270:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 271:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Scans all the enabled widgets and the raw count values are copied into the
 272:Generated_Source\PSoC4/Capsense_CSHL.c **** *  baseline array for all the sensors enabled in the scanning process. The baselines
 273:Generated_Source\PSoC4/Capsense_CSHL.c **** *  are initialized with zero values for sensors disabled from the scanning process.
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 11


 274:Generated_Source\PSoC4/Capsense_CSHL.c **** *  The raw data filters are initialized if enabled.
 275:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 276:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 277:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 278:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 279:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 280:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 281:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 282:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 283:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorRaw[] - used to store the sensors raw data.
 284:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[ ] - used to store bit masks of the enabled sensors.
 285:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 286:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 287:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 288:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 289:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 290:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_InitializeEnabledBaselines(void)
 291:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 296              		.loc 1 291 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 8
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 0000 80B5     		push	{r7, lr}
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 82B0     		sub	sp, sp, #8
 305              		.cfi_def_cfa_offset 16
 306 0004 00AF     		add	r7, sp, #0
 307              		.cfi_def_cfa_register 7
 292:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 i;
 293:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 isSensorEnabled;
 294:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 295:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_ScanEnabledWidgets();
 308              		.loc 1 295 0
 309 0006 FFF7FEFF 		bl	Capsense_ScanEnabledWidgets
 296:Generated_Source\PSoC4/Capsense_CSHL.c ****     while(Capsense_IsBusy() != 0u)
 310              		.loc 1 296 0
 311 000a C046     		nop
 312              	.L10:
 313              		.loc 1 296 0 is_stmt 0 discriminator 1
 314 000c FFF7FEFF 		bl	Capsense_IsBusy
 315 0010 031E     		subs	r3, r0, #0
 316 0012 FBD1     		bne	.L10
 297:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 298:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Wait while sensor is busy */
 299:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 300:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 301:Generated_Source\PSoC4/Capsense_CSHL.c ****     for(i = 0u; i < Capsense_TOTAL_SENSOR_COUNT; i++)
 317              		.loc 1 301 0 is_stmt 1
 318 0014 0023     		movs	r3, #0
 319 0016 7B60     		str	r3, [r7, #4]
 320 0018 11E0     		b	.L11
 321              	.L13:
 302:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 303:Generated_Source\PSoC4/Capsense_CSHL.c ****         isSensorEnabled = Capsense_GetBitValue(Capsense_sensorEnableMask, i);
 322              		.loc 1 303 0
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 12


 323 001a 7A68     		ldr	r2, [r7, #4]
 324 001c 0B4B     		ldr	r3, .L14
 325 001e 1100     		movs	r1, r2
 326 0020 1800     		movs	r0, r3
 327 0022 FFF7FEFF 		bl	Capsense_GetBitValue
 328 0026 0300     		movs	r3, r0
 329 0028 3B60     		str	r3, [r7]
 304:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 305:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 306:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(isSensorEnabled != 0u)
 330              		.loc 1 306 0
 331 002a 3B68     		ldr	r3, [r7]
 332 002c 002B     		cmp	r3, #0
 333 002e 03D0     		beq	.L12
 307:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 308:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Initialize baselines */
 309:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_BaseInit(i);
 334              		.loc 1 309 0
 335 0030 7B68     		ldr	r3, [r7, #4]
 336 0032 1800     		movs	r0, r3
 337 0034 FFF7FEFF 		bl	Capsense_BaseInit
 338              	.L12:
 301:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 339              		.loc 1 301 0 discriminator 2
 340 0038 7B68     		ldr	r3, [r7, #4]
 341 003a 0133     		adds	r3, r3, #1
 342 003c 7B60     		str	r3, [r7, #4]
 343              	.L11:
 301:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 344              		.loc 1 301 0 is_stmt 0 discriminator 1
 345 003e 7B68     		ldr	r3, [r7, #4]
 346 0040 002B     		cmp	r3, #0
 347 0042 EAD0     		beq	.L13
 310:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 311:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 312:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 348              		.loc 1 312 0 is_stmt 1
 349 0044 C046     		nop
 350 0046 BD46     		mov	sp, r7
 351 0048 02B0     		add	sp, sp, #8
 352              		@ sp needed
 353 004a 80BD     		pop	{r7, pc}
 354              	.L15:
 355              		.align	2
 356              	.L14:
 357 004c 00000000 		.word	Capsense_sensorEnableMask
 358              		.cfi_endproc
 359              	.LFE39:
 360              		.size	Capsense_InitializeEnabledBaselines, .-Capsense_InitializeEnabledBaselines
 361              		.section	.text.Capsense_UpdateBaselineNoThreshold,"ax",%progbits
 362              		.align	2
 363              		.global	Capsense_UpdateBaselineNoThreshold
 364              		.code	16
 365              		.thumb_func
 366              		.type	Capsense_UpdateBaselineNoThreshold, %function
 367              	Capsense_UpdateBaselineNoThreshold:
 368              	.LFB40:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 13


 313:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 314:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 315:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 316:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_UpdateBaselineNoThreshold
 317:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 318:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 319:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 320:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Updates the Capsense_sensorBaseline[sensor] array element using the
 321:Generated_Source\PSoC4/Capsense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by
 322:Generated_Source\PSoC4/Capsense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 323:Generated_Source\PSoC4/Capsense_CSHL.c **** *  it in Capsense_sensorSignal[sensor].
 324:Generated_Source\PSoC4/Capsense_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold.
 325:Generated_Source\PSoC4/Capsense_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating; baseline is loaded
 326:Generated_Source\PSoC4/Capsense_CSHL.c **** *  with a raw count value if a signal is greater than zero and if signal is less
 327:Generated_Source\PSoC4/Capsense_CSHL.c **** *  than noise threshold.
 328:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline
 329:Generated_Source\PSoC4/Capsense_CSHL.c **** *  calculation.
 330:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 331:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API does not update the thresholds in the Smartsense Mode.
 332:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 333:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 334:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 335:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 336:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 337:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 338:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 339:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 340:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_widgetNumber[]  - stores widget numbers.
 341:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaseline[]    - used to store baseline value.
 342:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaselineLow[] - used to store fraction byte of
 343:Generated_Source\PSoC4/Capsense_CSHL.c **** *  baseline value.
 344:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorSignal[]      - used to store difference between
 345:Generated_Source\PSoC4/Capsense_CSHL.c **** *  current value of raw data and previous value of baseline.
 346:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_rawFilterData1[]    - used to store previous sample of
 347:Generated_Source\PSoC4/Capsense_CSHL.c **** *  any enabled raw data filter.
 348:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_rawFilterData2[]    - used to store before previous sample
 349:Generated_Source\PSoC4/Capsense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 350:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 351:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 352:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 353:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 354:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 355:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_UpdateBaselineNoThreshold(uint32 sensor)
 356:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 369              		.loc 1 356 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 24
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373 0000 90B5     		push	{r4, r7, lr}
 374              		.cfi_def_cfa_offset 12
 375              		.cfi_offset 4, -12
 376              		.cfi_offset 7, -8
 377              		.cfi_offset 14, -4
 378 0002 87B0     		sub	sp, sp, #28
 379              		.cfi_def_cfa_offset 40
 380 0004 00AF     		add	r7, sp, #0
 381              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 14


 382 0006 7860     		str	r0, [r7, #4]
 357:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 calc;
 358:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 sign;
 359:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 tempRaw;
 360:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 filteredRawData;
 361:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 widget = Capsense_widgetNumber[sensor];
 383              		.loc 1 361 0
 384 0008 0F23     		movs	r3, #15
 385 000a FB18     		adds	r3, r7, r3
 386 000c 7A49     		ldr	r1, .L29
 387 000e 7A68     		ldr	r2, [r7, #4]
 388 0010 8A18     		adds	r2, r1, r2
 389 0012 1278     		ldrb	r2, [r2]
 390 0014 1A70     		strb	r2, [r3]
 362:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 noiseThreshold;
 363:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 364:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_GENERICS_COUNT)
 365:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Exclude generic widget */
 366:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(widget < Capsense_END_OF_WIDGETS_INDEX)
 367:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 368:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* Capsense_TOTAL_GENERICS_COUNT */
 369:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 370:Generated_Source\PSoC4/Capsense_CSHL.c ****     noiseThreshold = Capsense_noiseThreshold[widget];
 391              		.loc 1 370 0
 392 0016 0F23     		movs	r3, #15
 393 0018 FB18     		adds	r3, r7, r3
 394 001a 1A78     		ldrb	r2, [r3]
 395 001c 0E23     		movs	r3, #14
 396 001e FB18     		adds	r3, r7, r3
 397 0020 7649     		ldr	r1, .L29+4
 398 0022 8A5C     		ldrb	r2, [r1, r2]
 399 0024 1A70     		strb	r2, [r3]
 371:Generated_Source\PSoC4/Capsense_CSHL.c ****     filteredRawData = Capsense_sensorRaw[sensor];
 400              		.loc 1 371 0
 401 0026 1023     		movs	r3, #16
 402 0028 FB18     		adds	r3, r7, r3
 403 002a 754A     		ldr	r2, .L29+8
 404 002c 7968     		ldr	r1, [r7, #4]
 405 002e 4900     		lsls	r1, r1, #1
 406 0030 8A5A     		ldrh	r2, [r1, r2]
 407 0032 1A80     		strh	r2, [r3]
 372:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 373:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_RAW_FILTER_MASK != 0u)
 374:Generated_Source\PSoC4/Capsense_CSHL.c ****     if(Capsense_enableRawFilters != 0u)
 408              		.loc 1 374 0
 409 0034 734B     		ldr	r3, .L29+12
 410 0036 1B78     		ldrb	r3, [r3]
 411 0038 002B     		cmp	r3, #0
 412 003a 15D0     		beq	.L17
 375:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 376:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER)
 377:Generated_Source\PSoC4/Capsense_CSHL.c ****             tempRaw = filteredRawData;
 378:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_MedianFilter(filteredRawData, Capsense_rawFilterData1[sensor
 379:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                             Capsense_rawFilterData2[sensor]);
 380:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData2[sensor] = Capsense_rawFilterData1[sensor];
 381:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = tempRaw;
 382:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 15


 383:Generated_Source\PSoC4/Capsense_CSHL.c ****         #elif (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER)
 384:Generated_Source\PSoC4/Capsense_CSHL.c ****             tempRaw = filteredRawData;
 385:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_AveragingFilter(filteredRawData, Capsense_rawFilterData1[sen
 386:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                Capsense_rawFilterData2[sensor]);
 387:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData2[sensor] = Capsense_rawFilterData1[sensor];
 388:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = tempRaw;
 389:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 390:Generated_Source\PSoC4/Capsense_CSHL.c ****         #elif (Capsense_RAW_FILTER_MASK & Capsense_IIR2_FILTER)
 391:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_IIR2Filter(filteredRawData, Capsense_rawFilterData1[sensor])
 392:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = filteredRawData;
 393:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 394:Generated_Source\PSoC4/Capsense_CSHL.c ****         #elif (Capsense_RAW_FILTER_MASK & Capsense_IIR4_FILTER)
 395:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_IIR4Filter(filteredRawData, Capsense_rawFilterData1[sensor])
 413              		.loc 1 395 0
 414 003c 724B     		ldr	r3, .L29+16
 415 003e 7A68     		ldr	r2, [r7, #4]
 416 0040 5200     		lsls	r2, r2, #1
 417 0042 D25A     		ldrh	r2, [r2, r3]
 418 0044 1023     		movs	r3, #16
 419 0046 FC18     		adds	r4, r7, r3
 420 0048 1023     		movs	r3, #16
 421 004a FB18     		adds	r3, r7, r3
 422 004c 1B88     		ldrh	r3, [r3]
 423 004e 1100     		movs	r1, r2
 424 0050 1800     		movs	r0, r3
 425 0052 FFF7FEFF 		bl	Capsense_IIR4Filter
 426 0056 0300     		movs	r3, r0
 427 0058 2380     		strh	r3, [r4]
 396:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = filteredRawData;
 428              		.loc 1 396 0
 429 005a 6B4B     		ldr	r3, .L29+16
 430 005c 7A68     		ldr	r2, [r7, #4]
 431 005e 5200     		lsls	r2, r2, #1
 432 0060 1021     		movs	r1, #16
 433 0062 7918     		adds	r1, r7, r1
 434 0064 0988     		ldrh	r1, [r1]
 435 0066 D152     		strh	r1, [r2, r3]
 436              	.L17:
 397:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 398:Generated_Source\PSoC4/Capsense_CSHL.c ****         #elif (Capsense_RAW_FILTER_MASK & Capsense_JITTER_FILTER)
 399:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_JitterFilter(filteredRawData, Capsense_rawFilterData1[sensor
 400:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = filteredRawData;
 401:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 402:Generated_Source\PSoC4/Capsense_CSHL.c ****         #elif (Capsense_RAW_FILTER_MASK & Capsense_IIR8_FILTER)
 403:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_IIR8Filter(filteredRawData, Capsense_rawFilterData1[sensor])
 404:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = filteredRawData;
 405:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 406:Generated_Source\PSoC4/Capsense_CSHL.c ****         #elif (Capsense_RAW_FILTER_MASK & Capsense_IIR16_FILTER)
 407:Generated_Source\PSoC4/Capsense_CSHL.c ****             filteredRawData = Capsense_IIR16Filter(filteredRawData, Capsense_rawFilterData1[sensor]
 408:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_rawFilterData1[sensor] = filteredRawData;
 409:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 410:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
 411:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* No Raw filters */
 412:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif  /* (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER) */
 413:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 414:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* (Capsense_RAW_FILTER_MASK != 0u) */
 415:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 16


 416:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO)
 417:Generated_Source\PSoC4/Capsense_CSHL.c ****         MeasureNoiseEnvelope_P4_v2_60(&Capsense_config, (uint8)sensor, Capsense_sensorRaw);
 418:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif /* (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO) */
 419:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 420:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Baseline calculation */
 421:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 422:Generated_Source\PSoC4/Capsense_CSHL.c ****     if(filteredRawData >= Capsense_sensorBaseline[sensor])
 437              		.loc 1 422 0
 438 0068 684B     		ldr	r3, .L29+20
 439 006a 7A68     		ldr	r2, [r7, #4]
 440 006c 5200     		lsls	r2, r2, #1
 441 006e D35A     		ldrh	r3, [r2, r3]
 442 0070 1022     		movs	r2, #16
 443 0072 BA18     		adds	r2, r7, r2
 444 0074 1288     		ldrh	r2, [r2]
 445 0076 9A42     		cmp	r2, r3
 446 0078 12D3     		bcc	.L18
 423:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 424:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_lowBaselineResetCnt[sensor] = 0u;
 447              		.loc 1 424 0
 448 007a 654A     		ldr	r2, .L29+24
 449 007c 7B68     		ldr	r3, [r7, #4]
 450 007e D318     		adds	r3, r2, r3
 451 0080 0022     		movs	r2, #0
 452 0082 1A70     		strb	r2, [r3]
 425:Generated_Source\PSoC4/Capsense_CSHL.c ****         tempRaw = filteredRawData - Capsense_sensorBaseline[sensor];
 453              		.loc 1 425 0
 454 0084 614B     		ldr	r3, .L29+20
 455 0086 7A68     		ldr	r2, [r7, #4]
 456 0088 5200     		lsls	r2, r2, #1
 457 008a D25A     		ldrh	r2, [r2, r3]
 458 008c 1223     		movs	r3, #18
 459 008e FB18     		adds	r3, r7, r3
 460 0090 1021     		movs	r1, #16
 461 0092 7918     		adds	r1, r7, r1
 462 0094 0988     		ldrh	r1, [r1]
 463 0096 8A1A     		subs	r2, r1, r2
 464 0098 1A80     		strh	r2, [r3]
 426:Generated_Source\PSoC4/Capsense_CSHL.c ****         sign = 1u;    /* Positive difference - Calculate the Signal */
 465              		.loc 1 426 0
 466 009a 0123     		movs	r3, #1
 467 009c 7B61     		str	r3, [r7, #20]
 468 009e 0CE0     		b	.L19
 469              	.L18:
 427:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 428:Generated_Source\PSoC4/Capsense_CSHL.c ****     else
 429:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 430:Generated_Source\PSoC4/Capsense_CSHL.c ****         tempRaw = Capsense_sensorBaseline[sensor] - filteredRawData;
 470              		.loc 1 430 0
 471 00a0 5A4B     		ldr	r3, .L29+20
 472 00a2 7A68     		ldr	r2, [r7, #4]
 473 00a4 5200     		lsls	r2, r2, #1
 474 00a6 D15A     		ldrh	r1, [r2, r3]
 475 00a8 1223     		movs	r3, #18
 476 00aa FB18     		adds	r3, r7, r3
 477 00ac 1022     		movs	r2, #16
 478 00ae BA18     		adds	r2, r7, r2
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 17


 479 00b0 1288     		ldrh	r2, [r2]
 480 00b2 8A1A     		subs	r2, r1, r2
 481 00b4 1A80     		strh	r2, [r3]
 431:Generated_Source\PSoC4/Capsense_CSHL.c ****         sign = 0u;    /* Negative difference - Do NOT calculate the Signal */
 482              		.loc 1 431 0
 483 00b6 0023     		movs	r3, #0
 484 00b8 7B61     		str	r3, [r7, #20]
 485              	.L19:
 432:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 433:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 434:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TUNING_METHOD != Capsense__TUNING_NONE)
 435:Generated_Source\PSoC4/Capsense_CSHL.c ****     if((sign == 0u) && (tempRaw > (uint16) Capsense_negativeNoiseThreshold[widget]))
 486              		.loc 1 435 0
 487 00ba 7B69     		ldr	r3, [r7, #20]
 488 00bc 002B     		cmp	r3, #0
 489 00be 2AD1     		bne	.L20
 490              		.loc 1 435 0 is_stmt 0 discriminator 1
 491 00c0 0F23     		movs	r3, #15
 492 00c2 FB18     		adds	r3, r7, r3
 493 00c4 1B78     		ldrb	r3, [r3]
 494 00c6 534A     		ldr	r2, .L29+28
 495 00c8 D35C     		ldrb	r3, [r2, r3]
 496 00ca 9BB2     		uxth	r3, r3
 497 00cc 1222     		movs	r2, #18
 498 00ce BA18     		adds	r2, r7, r2
 499 00d0 1288     		ldrh	r2, [r2]
 500 00d2 9A42     		cmp	r2, r3
 501 00d4 1FD9     		bls	.L20
 436:Generated_Source\PSoC4/Capsense_CSHL.c ****     #else
 437:Generated_Source\PSoC4/Capsense_CSHL.c ****     if((sign == 0u) && (tempRaw > (uint16) Capsense_NEGATIVE_NOISE_THRESHOLD))
 438:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif /* (Capsense_TUNING_METHOD != Capsense__TUNING_NONE) */
 439:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 440:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(Capsense_lowBaselineResetCnt[sensor] >= Capsense_lowBaselineReset[sensor])
 502              		.loc 1 440 0 is_stmt 1
 503 00d6 4E4A     		ldr	r2, .L29+24
 504 00d8 7B68     		ldr	r3, [r7, #4]
 505 00da D318     		adds	r3, r2, r3
 506 00dc 1A78     		ldrb	r2, [r3]
 507 00de 4E49     		ldr	r1, .L29+32
 508 00e0 7B68     		ldr	r3, [r7, #4]
 509 00e2 CB18     		adds	r3, r1, r3
 510 00e4 1B78     		ldrb	r3, [r3]
 511 00e6 9A42     		cmp	r2, r3
 512 00e8 09D3     		bcc	.L21
 441:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 442:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_BaseInit(sensor);
 513              		.loc 1 442 0
 514 00ea 7B68     		ldr	r3, [r7, #4]
 515 00ec 1800     		movs	r0, r3
 516 00ee FFF7FEFF 		bl	Capsense_BaseInit
 443:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_lowBaselineResetCnt[sensor] = 0u;
 517              		.loc 1 443 0
 518 00f2 474A     		ldr	r2, .L29+24
 519 00f4 7B68     		ldr	r3, [r7, #4]
 520 00f6 D318     		adds	r3, r2, r3
 521 00f8 0022     		movs	r2, #0
 522 00fa 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 18


 440:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 523              		.loc 1 440 0
 524 00fc 51E0     		b	.L23
 525              	.L21:
 444:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 445:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
 446:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 447:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_lowBaselineResetCnt[sensor]++;
 526              		.loc 1 447 0
 527 00fe 444A     		ldr	r2, .L29+24
 528 0100 7B68     		ldr	r3, [r7, #4]
 529 0102 D318     		adds	r3, r2, r3
 530 0104 1B78     		ldrb	r3, [r3]
 531 0106 0133     		adds	r3, r3, #1
 532 0108 D9B2     		uxtb	r1, r3
 533 010a 414A     		ldr	r2, .L29+24
 534 010c 7B68     		ldr	r3, [r7, #4]
 535 010e D318     		adds	r3, r2, r3
 536 0110 0A1C     		adds	r2, r1, #0
 537 0112 1A70     		strb	r2, [r3]
 440:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 538              		.loc 1 440 0
 539 0114 45E0     		b	.L23
 540              	.L20:
 448:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 449:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 450:Generated_Source\PSoC4/Capsense_CSHL.c ****     else
 451:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 452:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_AUTO_RESET == Capsense_AUTO_RESET_DISABLE)
 453:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_TUNING_METHOD != Capsense__TUNING_NONE)
 454:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Update Baseline if lower than noiseThreshold */
 455:Generated_Source\PSoC4/Capsense_CSHL.c ****             if ( (tempRaw <= noiseThreshold) ||
 541              		.loc 1 455 0
 542 0116 0E23     		movs	r3, #14
 543 0118 FB18     		adds	r3, r7, r3
 544 011a 1B78     		ldrb	r3, [r3]
 545 011c 9BB2     		uxth	r3, r3
 546 011e 1222     		movs	r2, #18
 547 0120 BA18     		adds	r2, r7, r2
 548 0122 1288     		ldrh	r2, [r2]
 549 0124 9A42     		cmp	r2, r3
 550 0126 0DD9     		bls	.L24
 456:Generated_Source\PSoC4/Capsense_CSHL.c ****              ((tempRaw < (uint16) Capsense_negativeNoiseThreshold[widget])
 551              		.loc 1 456 0 discriminator 1
 552 0128 0F23     		movs	r3, #15
 553 012a FB18     		adds	r3, r7, r3
 554 012c 1B78     		ldrb	r3, [r3]
 555 012e 394A     		ldr	r2, .L29+28
 556 0130 D35C     		ldrb	r3, [r2, r3]
 557 0132 9BB2     		uxth	r3, r3
 455:Generated_Source\PSoC4/Capsense_CSHL.c ****              ((tempRaw < (uint16) Capsense_negativeNoiseThreshold[widget])
 558              		.loc 1 455 0 discriminator 1
 559 0134 1222     		movs	r2, #18
 560 0136 BA18     		adds	r2, r7, r2
 561 0138 1288     		ldrh	r2, [r2]
 562 013a 9A42     		cmp	r2, r3
 563 013c 31D2     		bcs	.L23
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 19


 457:Generated_Source\PSoC4/Capsense_CSHL.c ****                && (sign == 0u)))
 564              		.loc 1 457 0
 565 013e 7B69     		ldr	r3, [r7, #20]
 566 0140 002B     		cmp	r3, #0
 567 0142 2ED1     		bne	.L23
 568              	.L24:
 458:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
 459:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
 460:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Update Baseline if lower than noiseThreshold */
 461:Generated_Source\PSoC4/Capsense_CSHL.c ****             if ( (tempRaw <= noiseThreshold) ||
 462:Generated_Source\PSoC4/Capsense_CSHL.c ****                  ((tempRaw < (uint16) Capsense_NEGATIVE_NOISE_THRESHOLD)
 463:Generated_Source\PSoC4/Capsense_CSHL.c ****                    && (sign == 0u)))
 464:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
 465:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_TUNING_METHOD != Capsense__TUNING_NONE) */
 466:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_AUTO_RESET == Capsense_AUTO_RESET_DISABLE) */
 467:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Make full Baseline 23 bits */
 468:Generated_Source\PSoC4/Capsense_CSHL.c ****                 calc = (uint32) Capsense_sensorBaseline[sensor] << 8u;
 569              		.loc 1 468 0
 570 0144 314B     		ldr	r3, .L29+20
 571 0146 7A68     		ldr	r2, [r7, #4]
 572 0148 5200     		lsls	r2, r2, #1
 573 014a D35A     		ldrh	r3, [r2, r3]
 574 014c 1B02     		lsls	r3, r3, #8
 575 014e BB60     		str	r3, [r7, #8]
 469:Generated_Source\PSoC4/Capsense_CSHL.c ****                 calc |= (uint32) Capsense_sensorBaselineLow[sensor];
 576              		.loc 1 469 0
 577 0150 324A     		ldr	r2, .L29+36
 578 0152 7B68     		ldr	r3, [r7, #4]
 579 0154 D318     		adds	r3, r2, r3
 580 0156 1B78     		ldrb	r3, [r3]
 581 0158 1A00     		movs	r2, r3
 582 015a BB68     		ldr	r3, [r7, #8]
 583 015c 1343     		orrs	r3, r2
 584 015e BB60     		str	r3, [r7, #8]
 470:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 471:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Add Raw Data to Baseline */
 472:Generated_Source\PSoC4/Capsense_CSHL.c ****                 calc += filteredRawData;
 585              		.loc 1 472 0
 586 0160 1023     		movs	r3, #16
 587 0162 FB18     		adds	r3, r7, r3
 588 0164 1B88     		ldrh	r3, [r3]
 589 0166 BA68     		ldr	r2, [r7, #8]
 590 0168 D318     		adds	r3, r2, r3
 591 016a BB60     		str	r3, [r7, #8]
 473:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 474:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Sub the high Baseline */
 475:Generated_Source\PSoC4/Capsense_CSHL.c ****                 calc -= Capsense_sensorBaseline[sensor];
 592              		.loc 1 475 0
 593 016c 274B     		ldr	r3, .L29+20
 594 016e 7A68     		ldr	r2, [r7, #4]
 595 0170 5200     		lsls	r2, r2, #1
 596 0172 D35A     		ldrh	r3, [r2, r3]
 597 0174 1A00     		movs	r2, r3
 598 0176 BB68     		ldr	r3, [r7, #8]
 599 0178 9B1A     		subs	r3, r3, r2
 600 017a BB60     		str	r3, [r7, #8]
 476:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 20


 477:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 478:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 601              		.loc 1 478 0
 602 017c BB68     		ldr	r3, [r7, #8]
 603 017e 1B0A     		lsrs	r3, r3, #8
 604 0180 99B2     		uxth	r1, r3
 605 0182 224B     		ldr	r3, .L29+20
 606 0184 7A68     		ldr	r2, [r7, #4]
 607 0186 5200     		lsls	r2, r2, #1
 608 0188 D152     		strh	r1, [r2, r3]
 479:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_sensorBaselineLow[sensor] = ((uint8) calc);
 609              		.loc 1 479 0
 610 018a BB68     		ldr	r3, [r7, #8]
 611 018c D9B2     		uxtb	r1, r3
 612 018e 234A     		ldr	r2, .L29+36
 613 0190 7B68     		ldr	r3, [r7, #4]
 614 0192 D318     		adds	r3, r2, r3
 615 0194 0A1C     		adds	r2, r1, #0
 616 0196 1A70     		strb	r2, [r3]
 480:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 481:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_lowBaselineResetCnt[sensor] = 0u;
 617              		.loc 1 481 0
 618 0198 1D4A     		ldr	r2, .L29+24
 619 019a 7B68     		ldr	r3, [r7, #4]
 620 019c D318     		adds	r3, r2, r3
 621 019e 0022     		movs	r2, #0
 622 01a0 1A70     		strb	r2, [r3]
 623              	.L23:
 482:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_AUTO_RESET == Capsense_AUTO_RESET_DISABLE)
 483:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
 484:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_AUTO_RESET == Capsense_AUTO_RESET_DISABLE) */
 485:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 486:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 487:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Calculate Signal if positive difference > noiseThreshold */
 488:Generated_Source\PSoC4/Capsense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (sign != 0u))
 624              		.loc 1 488 0
 625 01a2 0E23     		movs	r3, #14
 626 01a4 FB18     		adds	r3, r7, r3
 627 01a6 1B78     		ldrb	r3, [r3]
 628 01a8 9BB2     		uxth	r3, r3
 629 01aa 1222     		movs	r2, #18
 630 01ac BA18     		adds	r2, r7, r2
 631 01ae 1288     		ldrh	r2, [r2]
 632 01b0 9A42     		cmp	r2, r3
 633 01b2 17D9     		bls	.L25
 634              		.loc 1 488 0 is_stmt 0 discriminator 1
 635 01b4 7B69     		ldr	r3, [r7, #20]
 636 01b6 002B     		cmp	r3, #0
 637 01b8 14D0     		beq	.L25
 489:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 490:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_SIGNAL_SIZE == Capsense_SIGNAL_SIZE_UINT8)
 491:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Over flow defence for uint8 */
 492:Generated_Source\PSoC4/Capsense_CSHL.c ****             if (tempRaw > 0xFFu)
 638              		.loc 1 492 0 is_stmt 1
 639 01ba 1223     		movs	r3, #18
 640 01bc FB18     		adds	r3, r7, r3
 641 01be 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 21


 642 01c0 FF2B     		cmp	r3, #255
 643 01c2 05D9     		bls	.L26
 493:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
 494:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_sensorSignal[sensor] = 0xFFu;
 644              		.loc 1 494 0
 645 01c4 164A     		ldr	r2, .L29+40
 646 01c6 7B68     		ldr	r3, [r7, #4]
 647 01c8 D318     		adds	r3, r2, r3
 648 01ca FF22     		movs	r2, #255
 649 01cc 1A70     		strb	r2, [r3]
 492:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
 650              		.loc 1 492 0
 651 01ce 0EE0     		b	.L28
 652              	.L26:
 495:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
 496:Generated_Source\PSoC4/Capsense_CSHL.c ****             else
 497:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
 498:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_sensorSignal[sensor] = ((uint8) tempRaw);
 653              		.loc 1 498 0
 654 01d0 1223     		movs	r3, #18
 655 01d2 FB18     		adds	r3, r7, r3
 656 01d4 1B88     		ldrh	r3, [r3]
 657 01d6 D9B2     		uxtb	r1, r3
 658 01d8 114A     		ldr	r2, .L29+40
 659 01da 7B68     		ldr	r3, [r7, #4]
 660 01dc D318     		adds	r3, r2, r3
 661 01de 0A1C     		adds	r2, r1, #0
 662 01e0 1A70     		strb	r2, [r3]
 492:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
 663              		.loc 1 492 0
 664 01e2 04E0     		b	.L28
 665              	.L25:
 499:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
 500:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
 501:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_sensorSignal[sensor] = ((uint16) tempRaw);
 502:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif  /* (Capsense_SIGNAL_SIZE == Capsense_SIGNAL_SIZE_UINT8) */
 503:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 504:Generated_Source\PSoC4/Capsense_CSHL.c ****     else
 505:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 506:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Signal is zero */
 507:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_sensorSignal[sensor] = 0u;
 666              		.loc 1 507 0
 667 01e4 0E4A     		ldr	r2, .L29+40
 668 01e6 7B68     		ldr	r3, [r7, #4]
 669 01e8 D318     		adds	r3, r2, r3
 670 01ea 0022     		movs	r2, #0
 671 01ec 1A70     		strb	r2, [r3]
 672              	.L28:
 508:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 509:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 510:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_GENERICS_COUNT)
 511:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Exclude generic widget */
 512:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 513:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* Capsense_TOTAL_GENERICS_COUNT */
 514:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 673              		.loc 1 514 0
 674 01ee C046     		nop
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 22


 675 01f0 BD46     		mov	sp, r7
 676 01f2 07B0     		add	sp, sp, #28
 677              		@ sp needed
 678 01f4 90BD     		pop	{r4, r7, pc}
 679              	.L30:
 680 01f6 C046     		.align	2
 681              	.L29:
 682 01f8 00000000 		.word	Capsense_widgetNumber
 683 01fc 00000000 		.word	Capsense_noiseThreshold
 684 0200 00000000 		.word	Capsense_sensorRaw
 685 0204 00000000 		.word	Capsense_enableRawFilters
 686 0208 00000000 		.word	Capsense_rawFilterData1
 687 020c 00000000 		.word	Capsense_sensorBaseline
 688 0210 00000000 		.word	Capsense_lowBaselineResetCnt
 689 0214 00000000 		.word	Capsense_negativeNoiseThreshold
 690 0218 00000000 		.word	Capsense_lowBaselineReset
 691 021c 00000000 		.word	Capsense_sensorBaselineLow
 692 0220 00000000 		.word	Capsense_sensorSignal
 693              		.cfi_endproc
 694              	.LFE40:
 695              		.size	Capsense_UpdateBaselineNoThreshold, .-Capsense_UpdateBaselineNoThreshold
 696              		.section	.text.Capsense_UpdateSensorBaseline,"ax",%progbits
 697              		.align	2
 698              		.global	Capsense_UpdateSensorBaseline
 699              		.code	16
 700              		.thumb_func
 701              		.type	Capsense_UpdateSensorBaseline, %function
 702              	Capsense_UpdateSensorBaseline:
 703              	.LFB41:
 515:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 516:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 517:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 518:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_UpdateSensorBaseline
 519:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 520:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 521:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 522:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Updates the Capsense_sensorBaseline[sensor] array element using the
 523:Generated_Source\PSoC4/Capsense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by
 524:Generated_Source\PSoC4/Capsense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 525:Generated_Source\PSoC4/Capsense_CSHL.c **** *  it in Capsense_sensorSignal[sensor].
 526:Generated_Source\PSoC4/Capsense_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold.
 527:Generated_Source\PSoC4/Capsense_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating.
 528:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Baseline is loaded with raw count value if a signal is greater than zero and
 529:Generated_Source\PSoC4/Capsense_CSHL.c **** *  if signal is less than noise threshold.
 530:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline
 531:Generated_Source\PSoC4/Capsense_CSHL.c **** *  calculation.
 532:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API updates the thresholds in the Smartsense Mode.
 533:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 534:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 535:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 536:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 537:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 538:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 539:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 540:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 541:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_widgetNumber[]  - stores widget numbers.
 542:Generated_Source\PSoC4/Capsense_CSHL.c **** *
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 23


 543:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 544:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 545:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 546:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 547:Generated_Source\PSoC4/Capsense_CSHL.c ****  void Capsense_UpdateSensorBaseline(uint32 sensor)
 548:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 704              		.loc 1 548 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708 0000 80B5     		push	{r7, lr}
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              		.cfi_def_cfa_offset 16
 714 0004 00AF     		add	r7, sp, #0
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
 549:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_GENERICS_COUNT)
 550:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 widget;
 551:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 552:Generated_Source\PSoC4/Capsense_CSHL.c ****         widget = Capsense_widgetNumber[sensor];
 553:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 554:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Exclude generic widget */
 555:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(widget < Capsense_END_OF_WIDGETS_INDEX)
 556:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 557:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* Capsense_TOTAL_GENERICS_COUNT */
 558:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 559:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO)
 560:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_UpdateThresholds(sensor);
 561:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif /* (Capsense_TUNING_METHOD == Capsense__TUNING_AUTO) */
 562:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 563:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_UpdateBaselineNoThreshold(sensor);
 717              		.loc 1 563 0
 718 0008 7B68     		ldr	r3, [r7, #4]
 719 000a 1800     		movs	r0, r3
 720 000c FFF7FEFF 		bl	Capsense_UpdateBaselineNoThreshold
 564:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 565:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_TOTAL_GENERICS_COUNT)
 566:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Exclude generic widget */
 567:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 568:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif  /* Capsense_TOTAL_GENERICS_COUNT */
 569:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 721              		.loc 1 569 0
 722 0010 C046     		nop
 723 0012 BD46     		mov	sp, r7
 724 0014 02B0     		add	sp, sp, #8
 725              		@ sp needed
 726 0016 80BD     		pop	{r7, pc}
 727              		.cfi_endproc
 728              	.LFE41:
 729              		.size	Capsense_UpdateSensorBaseline, .-Capsense_UpdateSensorBaseline
 730              		.section	.text.Capsense_UpdateEnabledBaselines,"ax",%progbits
 731              		.align	2
 732              		.global	Capsense_UpdateEnabledBaselines
 733              		.code	16
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 24


 734              		.thumb_func
 735              		.type	Capsense_UpdateEnabledBaselines, %function
 736              	Capsense_UpdateEnabledBaselines:
 737              	.LFB42:
 570:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 571:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 572:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 573:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_UpdateEnabledBaselines
 574:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 575:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 576:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 577:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Checks Capsense_sensorEnableMask[] array and calls the
 578:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_UpdateSensorBaseline function to update the baselines
 579:Generated_Source\PSoC4/Capsense_CSHL.c **** *  for the enabled sensors.
 580:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 581:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 582:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 583:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 584:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 585:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 586:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 587:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 588:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[] - used to store the sensor scanning
 589:Generated_Source\PSoC4/Capsense_CSHL.c **** *  state.
 590:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[0] contains the masked bits for sensors
 591:Generated_Source\PSoC4/Capsense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 592:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[1] contains the masked bits for
 593:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 594:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 - sensor doesn't scan by Capsense_ScanEnabledWidgets().
 595:Generated_Source\PSoC4/Capsense_CSHL.c **** *  1 - sensor scans by Capsense_ScanEnabledWidgets().
 596:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 597:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 598:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 599:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 600:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 601:Generated_Source\PSoC4/Capsense_CSHL.c ****  void Capsense_UpdateEnabledBaselines(void)
 602:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 738              		.loc 1 602 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 8
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742 0000 80B5     		push	{r7, lr}
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 7, -8
 745              		.cfi_offset 14, -4
 746 0002 82B0     		sub	sp, sp, #8
 747              		.cfi_def_cfa_offset 16
 748 0004 00AF     		add	r7, sp, #0
 749              		.cfi_def_cfa_register 7
 603:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 i;
 604:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 isSensorEnabled;
 605:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 606:Generated_Source\PSoC4/Capsense_CSHL.c ****     for(i = 0u; i < Capsense_TOTAL_SENSOR_COUNT; i++)
 750              		.loc 1 606 0
 751 0006 0023     		movs	r3, #0
 752 0008 7B60     		str	r3, [r7, #4]
 753 000a 11E0     		b	.L33
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 25


 754              	.L35:
 607:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 608:Generated_Source\PSoC4/Capsense_CSHL.c ****         isSensorEnabled = Capsense_GetBitValue(Capsense_sensorEnableMask, i);
 755              		.loc 1 608 0
 756 000c 7A68     		ldr	r2, [r7, #4]
 757 000e 0C4B     		ldr	r3, .L36
 758 0010 1100     		movs	r1, r2
 759 0012 1800     		movs	r0, r3
 760 0014 FFF7FEFF 		bl	Capsense_GetBitValue
 761 0018 0300     		movs	r3, r0
 762 001a 3B60     		str	r3, [r7]
 609:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 610:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(0u != isSensorEnabled)
 763              		.loc 1 610 0
 764 001c 3B68     		ldr	r3, [r7]
 765 001e 002B     		cmp	r3, #0
 766 0020 03D0     		beq	.L34
 611:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 612:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_UpdateSensorBaseline(i);
 767              		.loc 1 612 0
 768 0022 7B68     		ldr	r3, [r7, #4]
 769 0024 1800     		movs	r0, r3
 770 0026 FFF7FEFF 		bl	Capsense_UpdateSensorBaseline
 771              	.L34:
 606:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 772              		.loc 1 606 0 discriminator 2
 773 002a 7B68     		ldr	r3, [r7, #4]
 774 002c 0133     		adds	r3, r3, #1
 775 002e 7B60     		str	r3, [r7, #4]
 776              	.L33:
 606:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 777              		.loc 1 606 0 is_stmt 0 discriminator 1
 778 0030 7B68     		ldr	r3, [r7, #4]
 779 0032 002B     		cmp	r3, #0
 780 0034 EAD0     		beq	.L35
 613:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 614:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 615:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 781              		.loc 1 615 0 is_stmt 1
 782 0036 C046     		nop
 783 0038 BD46     		mov	sp, r7
 784 003a 02B0     		add	sp, sp, #8
 785              		@ sp needed
 786 003c 80BD     		pop	{r7, pc}
 787              	.L37:
 788 003e C046     		.align	2
 789              	.L36:
 790 0040 00000000 		.word	Capsense_sensorEnableMask
 791              		.cfi_endproc
 792              	.LFE42:
 793              		.size	Capsense_UpdateEnabledBaselines, .-Capsense_UpdateEnabledBaselines
 794              		.section	.text.Capsense_UpdateWidgetBaseline,"ax",%progbits
 795              		.align	2
 796              		.global	Capsense_UpdateWidgetBaseline
 797              		.code	16
 798              		.thumb_func
 799              		.type	Capsense_UpdateWidgetBaseline, %function
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 26


 800              	Capsense_UpdateWidgetBaseline:
 801              	.LFB43:
 616:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 617:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 618:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_UpdateWidgetBaseline
 619:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 620:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 621:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 622:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Checks Capsense_sensorEnableMask[] array and calls the
 623:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_UpdateSensorBaseline function to update the baselines
 624:Generated_Source\PSoC4/Capsense_CSHL.c **** *  for the enabled sensors that belong to widget.
 625:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 626:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 627:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  Widget number.
 628:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 629:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 630:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 631:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 632:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 633:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[] - used to store the sensor scanning
 634:Generated_Source\PSoC4/Capsense_CSHL.c **** *  state.
 635:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[0] contains the masked bits for sensors
 636:Generated_Source\PSoC4/Capsense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 637:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[1] contains the masked bits for
 638:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 639:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 - sensor doesn't scan by Capsense_ScanEnabledWidgets().
 640:Generated_Source\PSoC4/Capsense_CSHL.c **** *  1 - sensor scans by Capsense_ScanEnabledWidgets().
 641:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 642:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 643:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 644:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 645:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 646:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_UpdateWidgetBaseline(uint32 widget)
 647:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 802              		.loc 1 647 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 32
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806 0000 80B5     		push	{r7, lr}
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 88B0     		sub	sp, sp, #32
 811              		.cfi_def_cfa_offset 40
 812 0004 00AF     		add	r7, sp, #0
 813              		.cfi_def_cfa_register 7
 814 0006 7860     		str	r0, [r7, #4]
 648:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 sensorsPerWidget;
 649:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 firstSensor;
 650:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 lastSensor;
 651:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 i;
 652:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 isSensorEnabled;
 653:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 654:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Get number of sensors in widget */
 655:Generated_Source\PSoC4/Capsense_CSHL.c ****     sensorsPerWidget = Capsense_numberOfSensors[widget];
 815              		.loc 1 655 0
 816 0008 0123     		movs	r3, #1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 27


 817 000a BB61     		str	r3, [r7, #24]
 656:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 657:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Get first sensor in widget */
 658:Generated_Source\PSoC4/Capsense_CSHL.c ****     firstSensor = Capsense_rawDataIndex[widget];
 818              		.loc 1 658 0
 819 000c 0023     		movs	r3, #0
 820 000e 7B61     		str	r3, [r7, #20]
 659:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 660:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Get last sensor in widget */
 661:Generated_Source\PSoC4/Capsense_CSHL.c ****     lastSensor = (Capsense_rawDataIndex[widget] + sensorsPerWidget);
 821              		.loc 1 661 0
 822 0010 0023     		movs	r3, #0
 823 0012 1A00     		movs	r2, r3
 824 0014 BB69     		ldr	r3, [r7, #24]
 825 0016 D318     		adds	r3, r2, r3
 826 0018 3B61     		str	r3, [r7, #16]
 662:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 663:Generated_Source\PSoC4/Capsense_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 827              		.loc 1 663 0
 828 001a 7B69     		ldr	r3, [r7, #20]
 829 001c FB61     		str	r3, [r7, #28]
 830 001e 11E0     		b	.L39
 831              	.L41:
 664:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 665:Generated_Source\PSoC4/Capsense_CSHL.c ****         isSensorEnabled = Capsense_GetBitValue(Capsense_sensorEnableMask, i);
 832              		.loc 1 665 0
 833 0020 FA69     		ldr	r2, [r7, #28]
 834 0022 0C4B     		ldr	r3, .L42
 835 0024 1100     		movs	r1, r2
 836 0026 1800     		movs	r0, r3
 837 0028 FFF7FEFF 		bl	Capsense_GetBitValue
 838 002c 0300     		movs	r3, r0
 839 002e FB60     		str	r3, [r7, #12]
 666:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 667:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(0u != isSensorEnabled)
 840              		.loc 1 667 0
 841 0030 FB68     		ldr	r3, [r7, #12]
 842 0032 002B     		cmp	r3, #0
 843 0034 03D0     		beq	.L40
 668:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
 669:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_UpdateSensorBaseline(i);
 844              		.loc 1 669 0
 845 0036 FB69     		ldr	r3, [r7, #28]
 846 0038 1800     		movs	r0, r3
 847 003a FFF7FEFF 		bl	Capsense_UpdateSensorBaseline
 848              	.L40:
 663:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 849              		.loc 1 663 0 discriminator 2
 850 003e FB69     		ldr	r3, [r7, #28]
 851 0040 0133     		adds	r3, r3, #1
 852 0042 FB61     		str	r3, [r7, #28]
 853              	.L39:
 663:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 854              		.loc 1 663 0 is_stmt 0 discriminator 1
 855 0044 FA69     		ldr	r2, [r7, #28]
 856 0046 3B69     		ldr	r3, [r7, #16]
 857 0048 9A42     		cmp	r2, r3
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 28


 858 004a E9D3     		bcc	.L41
 670:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
 671:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 672:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 859              		.loc 1 672 0 is_stmt 1
 860 004c C046     		nop
 861 004e BD46     		mov	sp, r7
 862 0050 08B0     		add	sp, sp, #32
 863              		@ sp needed
 864 0052 80BD     		pop	{r7, pc}
 865              	.L43:
 866              		.align	2
 867              	.L42:
 868 0054 00000000 		.word	Capsense_sensorEnableMask
 869              		.cfi_endproc
 870              	.LFE43:
 871              		.size	Capsense_UpdateWidgetBaseline, .-Capsense_UpdateWidgetBaseline
 872              		.section	.text.Capsense_GetBaselineData,"ax",%progbits
 873              		.align	2
 874              		.global	Capsense_GetBaselineData
 875              		.code	16
 876              		.thumb_func
 877              		.type	Capsense_GetBaselineData, %function
 878              	Capsense_GetBaselineData:
 879              	.LFB44:
 673:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 674:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 675:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 676:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetBaselineData
 677:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 678:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 679:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 680:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function reads the sensor baseline from the component.
 681:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 682:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 683:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 684:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 685:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 686:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the baseline value of the sensor indicated by an argument.
 687:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 688:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 689:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaseline[] - the array with an initial values by scanning
 690:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 691:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 692:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 693:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 694:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 695:Generated_Source\PSoC4/Capsense_CSHL.c **** uint16 Capsense_GetBaselineData(uint32 sensor)
 696:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 880              		.loc 1 696 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 8
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884 0000 80B5     		push	{r7, lr}
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 29


 888 0002 82B0     		sub	sp, sp, #8
 889              		.cfi_def_cfa_offset 16
 890 0004 00AF     		add	r7, sp, #0
 891              		.cfi_def_cfa_register 7
 892 0006 7860     		str	r0, [r7, #4]
 697:Generated_Source\PSoC4/Capsense_CSHL.c ****     return (Capsense_sensorBaseline[sensor]);
 893              		.loc 1 697 0
 894 0008 034B     		ldr	r3, .L46
 895 000a 7A68     		ldr	r2, [r7, #4]
 896 000c 5200     		lsls	r2, r2, #1
 897 000e D35A     		ldrh	r3, [r2, r3]
 698:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 898              		.loc 1 698 0
 899 0010 1800     		movs	r0, r3
 900 0012 BD46     		mov	sp, r7
 901 0014 02B0     		add	sp, sp, #8
 902              		@ sp needed
 903 0016 80BD     		pop	{r7, pc}
 904              	.L47:
 905              		.align	2
 906              	.L46:
 907 0018 00000000 		.word	Capsense_sensorBaseline
 908              		.cfi_endproc
 909              	.LFE44:
 910              		.size	Capsense_GetBaselineData, .-Capsense_GetBaselineData
 911              		.section	.text.Capsense_SetBaselineData,"ax",%progbits
 912              		.align	2
 913              		.global	Capsense_SetBaselineData
 914              		.code	16
 915              		.thumb_func
 916              		.type	Capsense_SetBaselineData, %function
 917              	Capsense_SetBaselineData:
 918              	.LFB45:
 699:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 700:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 701:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 702:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_SetBaselineData
 703:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 704:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 705:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 706:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API writes the data value passed as an argument to the sensor baseline array.
 707:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 708:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 709:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 710:Generated_Source\PSoC4/Capsense_CSHL.c **** *  data:    Sensor baseline.
 711:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 712:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 713:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None.
 714:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 715:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 716:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorBaseline[] - the array with initial values by scanning
 717:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 718:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 719:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 720:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 721:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 722:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_SetBaselineData(uint32 sensor, uint16 data)
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 30


 723:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 919              		.loc 1 723 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 8
 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 82B0     		sub	sp, sp, #8
 928              		.cfi_def_cfa_offset 16
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 7860     		str	r0, [r7, #4]
 932 0008 0A00     		movs	r2, r1
 933 000a BB1C     		adds	r3, r7, #2
 934 000c 1A80     		strh	r2, [r3]
 724:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_sensorBaseline[sensor] = data;
 935              		.loc 1 724 0
 936 000e 054B     		ldr	r3, .L49
 937 0010 7A68     		ldr	r2, [r7, #4]
 938 0012 5200     		lsls	r2, r2, #1
 939 0014 B91C     		adds	r1, r7, #2
 940 0016 0988     		ldrh	r1, [r1]
 941 0018 D152     		strh	r1, [r2, r3]
 725:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 942              		.loc 1 725 0
 943 001a C046     		nop
 944 001c BD46     		mov	sp, r7
 945 001e 02B0     		add	sp, sp, #8
 946              		@ sp needed
 947 0020 80BD     		pop	{r7, pc}
 948              	.L50:
 949 0022 C046     		.align	2
 950              	.L49:
 951 0024 00000000 		.word	Capsense_sensorBaseline
 952              		.cfi_endproc
 953              	.LFE45:
 954              		.size	Capsense_SetBaselineData, .-Capsense_SetBaselineData
 955              		.section	.text.Capsense_GetDiffCountData,"ax",%progbits
 956              		.align	2
 957              		.global	Capsense_GetDiffCountData
 958              		.code	16
 959              		.thumb_func
 960              		.type	Capsense_GetDiffCountData, %function
 961              	Capsense_GetDiffCountData:
 962              	.LFB46:
 726:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 727:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 728:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 729:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetDiffCountData
 730:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 731:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 732:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 733:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function returns the Sensor Signal from the component.
 734:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 735:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 31


 736:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 737:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 738:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 739:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the difference count value of the sensor indicated by the
 740:Generated_Source\PSoC4/Capsense_CSHL.c **** *  argument.
 741:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 742:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 743:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorSignal[] - the array with difference counts for sensors
 744:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 745:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 746:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 747:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 748:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 749:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetDiffCountData(uint32 sensor)
 750:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 963              		.loc 1 750 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 8
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 82B0     		sub	sp, sp, #8
 972              		.cfi_def_cfa_offset 16
 973 0004 00AF     		add	r7, sp, #0
 974              		.cfi_def_cfa_register 7
 975 0006 7860     		str	r0, [r7, #4]
 751:Generated_Source\PSoC4/Capsense_CSHL.c ****     return (Capsense_sensorSignal[sensor]);
 976              		.loc 1 751 0
 977 0008 034A     		ldr	r2, .L53
 978 000a 7B68     		ldr	r3, [r7, #4]
 979 000c D318     		adds	r3, r2, r3
 980 000e 1B78     		ldrb	r3, [r3]
 752:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 981              		.loc 1 752 0
 982 0010 1800     		movs	r0, r3
 983 0012 BD46     		mov	sp, r7
 984 0014 02B0     		add	sp, sp, #8
 985              		@ sp needed
 986 0016 80BD     		pop	{r7, pc}
 987              	.L54:
 988              		.align	2
 989              	.L53:
 990 0018 00000000 		.word	Capsense_sensorSignal
 991              		.cfi_endproc
 992              	.LFE46:
 993              		.size	Capsense_GetDiffCountData, .-Capsense_GetDiffCountData
 994              		.section	.text.Capsense_SetDiffCountData,"ax",%progbits
 995              		.align	2
 996              		.global	Capsense_SetDiffCountData
 997              		.code	16
 998              		.thumb_func
 999              		.type	Capsense_SetDiffCountData, %function
 1000              	Capsense_SetDiffCountData:
 1001              	.LFB47:
 753:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 32


 754:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 755:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 756:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_SetDiffCountData
 757:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 758:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 759:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 760:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API writes the data value passed as an argument to the sensor signal array.
 761:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 762:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 763:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
 764:Generated_Source\PSoC4/Capsense_CSHL.c **** *  value:   Sensor signal.
 765:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 766:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 767:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None.
 768:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 769:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 770:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorSignal[] - the array with difference counts for sensors
 771:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 772:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 773:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 774:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 775:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 776:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_SetDiffCountData(uint32 sensor, uint8 value)
 777:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1002              		.loc 1 777 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 8
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006 0000 80B5     		push	{r7, lr}
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 7, -8
 1009              		.cfi_offset 14, -4
 1010 0002 82B0     		sub	sp, sp, #8
 1011              		.cfi_def_cfa_offset 16
 1012 0004 00AF     		add	r7, sp, #0
 1013              		.cfi_def_cfa_register 7
 1014 0006 7860     		str	r0, [r7, #4]
 1015 0008 0A00     		movs	r2, r1
 1016 000a FB1C     		adds	r3, r7, #3
 1017 000c 1A70     		strb	r2, [r3]
 778:Generated_Source\PSoC4/Capsense_CSHL.c ****     Capsense_sensorSignal[sensor] = value;
 1018              		.loc 1 778 0
 1019 000e 054A     		ldr	r2, .L56
 1020 0010 7B68     		ldr	r3, [r7, #4]
 1021 0012 D318     		adds	r3, r2, r3
 1022 0014 FA1C     		adds	r2, r7, #3
 1023 0016 1278     		ldrb	r2, [r2]
 1024 0018 1A70     		strb	r2, [r3]
 779:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1025              		.loc 1 779 0
 1026 001a C046     		nop
 1027 001c BD46     		mov	sp, r7
 1028 001e 02B0     		add	sp, sp, #8
 1029              		@ sp needed
 1030 0020 80BD     		pop	{r7, pc}
 1031              	.L57:
 1032 0022 C046     		.align	2
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 33


 1033              	.L56:
 1034 0024 00000000 		.word	Capsense_sensorSignal
 1035              		.cfi_endproc
 1036              	.LFE47:
 1037              		.size	Capsense_SetDiffCountData, .-Capsense_SetDiffCountData
 1038              		.section	.text.Capsense_GetFingerThreshold,"ax",%progbits
 1039              		.align	2
 1040              		.global	Capsense_GetFingerThreshold
 1041              		.code	16
 1042              		.thumb_func
 1043              		.type	Capsense_GetFingerThreshold, %function
 1044              	Capsense_GetFingerThreshold:
 1045              	.LFB48:
 780:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 781:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 782:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 783:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetFingerThreshold
 784:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 785:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 786:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 787:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function reads the finger threshold from the component.
 788:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 789:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 790:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
 791:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 792:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 793:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the finger threshold of the widget indicated by the argument.
 794:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 795:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 796:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_fingerThreshold[] - This array contains the level of signal
 797:Generated_Source\PSoC4/Capsense_CSHL.c **** *  for each widget that is determined if a finger is present on the widget.
 798:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 799:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 800:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 801:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 802:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 803:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetFingerThreshold(uint32 widget)
 804:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1046              		.loc 1 804 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 8
 1049              		@ frame_needed = 1, uses_anonymous_args = 0
 1050 0000 80B5     		push	{r7, lr}
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 7, -8
 1053              		.cfi_offset 14, -4
 1054 0002 82B0     		sub	sp, sp, #8
 1055              		.cfi_def_cfa_offset 16
 1056 0004 00AF     		add	r7, sp, #0
 1057              		.cfi_def_cfa_register 7
 1058 0006 7860     		str	r0, [r7, #4]
 805:Generated_Source\PSoC4/Capsense_CSHL.c ****     return(Capsense_fingerThreshold[widget]);
 1059              		.loc 1 805 0
 1060 0008 034A     		ldr	r2, .L60
 1061 000a 7B68     		ldr	r3, [r7, #4]
 1062 000c D318     		adds	r3, r2, r3
 1063 000e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 34


 806:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1064              		.loc 1 806 0
 1065 0010 1800     		movs	r0, r3
 1066 0012 BD46     		mov	sp, r7
 1067 0014 02B0     		add	sp, sp, #8
 1068              		@ sp needed
 1069 0016 80BD     		pop	{r7, pc}
 1070              	.L61:
 1071              		.align	2
 1072              	.L60:
 1073 0018 00000000 		.word	Capsense_fingerThreshold
 1074              		.cfi_endproc
 1075              	.LFE48:
 1076              		.size	Capsense_GetFingerThreshold, .-Capsense_GetFingerThreshold
 1077              		.section	.text.Capsense_GetNoiseThreshold,"ax",%progbits
 1078              		.align	2
 1079              		.global	Capsense_GetNoiseThreshold
 1080              		.code	16
 1081              		.thumb_func
 1082              		.type	Capsense_GetNoiseThreshold, %function
 1083              	Capsense_GetNoiseThreshold:
 1084              	.LFB49:
 807:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 808:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 809:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 810:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetNoiseThreshold
 811:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 812:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 813:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 814:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function reads the noise threshold from the component.
 815:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 816:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 817:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
 818:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 819:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 820:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the noise threshold of the widget indicated by the argument.
 821:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 822:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 823:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_noiseThreshold[] - This array contains the level of signal
 824:Generated_Source\PSoC4/Capsense_CSHL.c **** *  for each widget that determines the level of noise in the capacitive scan.
 825:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 826:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 827:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 828:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 829:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 830:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetNoiseThreshold(uint32 widget)
 831:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1085              		.loc 1 831 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 8
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089 0000 80B5     		push	{r7, lr}
 1090              		.cfi_def_cfa_offset 8
 1091              		.cfi_offset 7, -8
 1092              		.cfi_offset 14, -4
 1093 0002 82B0     		sub	sp, sp, #8
 1094              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 35


 1095 0004 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 0006 7860     		str	r0, [r7, #4]
 832:Generated_Source\PSoC4/Capsense_CSHL.c ****     return (Capsense_noiseThreshold[widget]);
 1098              		.loc 1 832 0
 1099 0008 034A     		ldr	r2, .L64
 1100 000a 7B68     		ldr	r3, [r7, #4]
 1101 000c D318     		adds	r3, r2, r3
 1102 000e 1B78     		ldrb	r3, [r3]
 833:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1103              		.loc 1 833 0
 1104 0010 1800     		movs	r0, r3
 1105 0012 BD46     		mov	sp, r7
 1106 0014 02B0     		add	sp, sp, #8
 1107              		@ sp needed
 1108 0016 80BD     		pop	{r7, pc}
 1109              	.L65:
 1110              		.align	2
 1111              	.L64:
 1112 0018 00000000 		.word	Capsense_noiseThreshold
 1113              		.cfi_endproc
 1114              	.LFE49:
 1115              		.size	Capsense_GetNoiseThreshold, .-Capsense_GetNoiseThreshold
 1116              		.section	.text.Capsense_GetFingerHysteresis,"ax",%progbits
 1117              		.align	2
 1118              		.global	Capsense_GetFingerHysteresis
 1119              		.code	16
 1120              		.thumb_func
 1121              		.type	Capsense_GetFingerHysteresis, %function
 1122              	Capsense_GetFingerHysteresis:
 1123              	.LFB50:
 834:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 835:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 836:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 837:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetFingerHysteresis
 838:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 839:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 840:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 841:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function reads the Hysteresis value from the component.
 842:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 843:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 844:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
 845:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 846:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
 847:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the Hysteresis of the widget indicated by the argument.
 848:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 849:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
 850:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_hysteresis[] - This array contains the hysteresis value
 851:Generated_Source\PSoC4/Capsense_CSHL.c **** *   for each widget.
 852:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_widgetNumberSld - structure with dynamic sliders' parameters.
 853:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 854:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 855:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 856:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 857:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 858:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetFingerHysteresis(uint32 widget)
 859:Generated_Source\PSoC4/Capsense_CSHL.c **** {
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 36


 1124              		.loc 1 859 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 8
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128 0000 80B5     		push	{r7, lr}
 1129              		.cfi_def_cfa_offset 8
 1130              		.cfi_offset 7, -8
 1131              		.cfi_offset 14, -4
 1132 0002 82B0     		sub	sp, sp, #8
 1133              		.cfi_def_cfa_offset 16
 1134 0004 00AF     		add	r7, sp, #0
 1135              		.cfi_def_cfa_register 7
 1136 0006 7860     		str	r0, [r7, #4]
 860:Generated_Source\PSoC4/Capsense_CSHL.c ****     return(Capsense_hysteresis[widget]);
 1137              		.loc 1 860 0
 1138 0008 034A     		ldr	r2, .L68
 1139 000a 7B68     		ldr	r3, [r7, #4]
 1140 000c D318     		adds	r3, r2, r3
 1141 000e 1B78     		ldrb	r3, [r3]
 861:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1142              		.loc 1 861 0
 1143 0010 1800     		movs	r0, r3
 1144 0012 BD46     		mov	sp, r7
 1145 0014 02B0     		add	sp, sp, #8
 1146              		@ sp needed
 1147 0016 80BD     		pop	{r7, pc}
 1148              	.L69:
 1149              		.align	2
 1150              	.L68:
 1151 0018 00000000 		.word	Capsense_hysteresis
 1152              		.cfi_endproc
 1153              	.LFE50:
 1154              		.size	Capsense_GetFingerHysteresis, .-Capsense_GetFingerHysteresis
 1155              		.section	.text.Capsense_GetNegativeNoiseThreshold,"ax",%progbits
 1156              		.align	2
 1157              		.global	Capsense_GetNegativeNoiseThreshold
 1158              		.code	16
 1159              		.thumb_func
 1160              		.type	Capsense_GetNegativeNoiseThreshold, %function
 1161              	Capsense_GetNegativeNoiseThreshold:
 1162              	.LFB51:
 862:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 863:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 864:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
 865:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetNegativeNoiseThreshold
 866:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
 867:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 868:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
 869:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function reads the negative noise threshold from the component.
 870:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 871:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
 872:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None.
 873:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 874:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return Value:
 875:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the negative noise threshold
 876:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 877:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 37


 878:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_negativeNoiseThreshold - This variable specifies the negative
 879:Generated_Source\PSoC4/Capsense_CSHL.c **** *   difference between the raw count and baseline levels for Baseline resetting
 880:Generated_Source\PSoC4/Capsense_CSHL.c **** *   to the raw count level.
 881:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 882:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
 883:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
 884:Generated_Source\PSoC4/Capsense_CSHL.c **** *
 885:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
 886:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetNegativeNoiseThreshold(uint32 widget)
 887:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1163              		.loc 1 887 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 8
 1166              		@ frame_needed = 1, uses_anonymous_args = 0
 1167 0000 80B5     		push	{r7, lr}
 1168              		.cfi_def_cfa_offset 8
 1169              		.cfi_offset 7, -8
 1170              		.cfi_offset 14, -4
 1171 0002 82B0     		sub	sp, sp, #8
 1172              		.cfi_def_cfa_offset 16
 1173 0004 00AF     		add	r7, sp, #0
 1174              		.cfi_def_cfa_register 7
 1175 0006 7860     		str	r0, [r7, #4]
 888:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_TUNING_METHOD != Capsense__TUNING_NONE)
 889:Generated_Source\PSoC4/Capsense_CSHL.c ****     return(Capsense_negativeNoiseThreshold[widget]);
 1176              		.loc 1 889 0
 1177 0008 034A     		ldr	r2, .L72
 1178 000a 7B68     		ldr	r3, [r7, #4]
 1179 000c D318     		adds	r3, r2, r3
 1180 000e 1B78     		ldrb	r3, [r3]
 890:Generated_Source\PSoC4/Capsense_CSHL.c **** #else
 891:Generated_Source\PSoC4/Capsense_CSHL.c ****     return(Capsense_NEGATIVE_NOISE_THRESHOLD);
 892:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TUNING_METHOD != Capsense__TUNING_NONE) */
 893:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1181              		.loc 1 893 0
 1182 0010 1800     		movs	r0, r3
 1183 0012 BD46     		mov	sp, r7
 1184 0014 02B0     		add	sp, sp, #8
 1185              		@ sp needed
 1186 0016 80BD     		pop	{r7, pc}
 1187              	.L73:
 1188              		.align	2
 1189              	.L72:
 1190 0018 00000000 		.word	Capsense_negativeNoiseThreshold
 1191              		.cfi_endproc
 1192              	.LFE51:
 1193              		.size	Capsense_GetNegativeNoiseThreshold, .-Capsense_GetNegativeNoiseThreshold
 1194              		.section	.text.Capsense_SetFingerThreshold,"ax",%progbits
 1195              		.align	2
 1196              		.global	Capsense_SetFingerThreshold
 1197              		.code	16
 1198              		.thumb_func
 1199              		.type	Capsense_SetFingerThreshold, %function
 1200              	Capsense_SetFingerThreshold:
 1201              	.LFB52:
 894:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 895:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 38


 896:Generated_Source\PSoC4/Capsense_CSHL.c **** #if(Capsense_TUNING_METHOD != Capsense__TUNING_NONE)
 897:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
 898:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_SetFingerThreshold
 899:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
 900:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 901:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
 902:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This API sets the finger threshold value for a widget.
 903:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 904:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
 905:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  sensorNumber:  widget index.
 906:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  value:  Finger threshold value for the widget.
 907:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 908:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return Value:
 909:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 910:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 911:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
 912:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_fingerThreshold[] - This array contains the level of signal
 913:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   for each widget that determines if a finger is present on the widget.
 914:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 915:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
 916:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 917:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 918:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
 919:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_SetFingerThreshold(uint32 widget, uint8 value)
 920:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1202              		.loc 1 920 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 8
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206 0000 80B5     		push	{r7, lr}
 1207              		.cfi_def_cfa_offset 8
 1208              		.cfi_offset 7, -8
 1209              		.cfi_offset 14, -4
 1210 0002 82B0     		sub	sp, sp, #8
 1211              		.cfi_def_cfa_offset 16
 1212 0004 00AF     		add	r7, sp, #0
 1213              		.cfi_def_cfa_register 7
 1214 0006 7860     		str	r0, [r7, #4]
 1215 0008 0A00     		movs	r2, r1
 1216 000a FB1C     		adds	r3, r7, #3
 1217 000c 1A70     		strb	r2, [r3]
 921:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_fingerThreshold[widget] = value;
 1218              		.loc 1 921 0
 1219 000e 054A     		ldr	r2, .L75
 1220 0010 7B68     		ldr	r3, [r7, #4]
 1221 0012 D318     		adds	r3, r2, r3
 1222 0014 FA1C     		adds	r2, r7, #3
 1223 0016 1278     		ldrb	r2, [r2]
 1224 0018 1A70     		strb	r2, [r3]
 922:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1225              		.loc 1 922 0
 1226 001a C046     		nop
 1227 001c BD46     		mov	sp, r7
 1228 001e 02B0     		add	sp, sp, #8
 1229              		@ sp needed
 1230 0020 80BD     		pop	{r7, pc}
 1231              	.L76:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 39


 1232 0022 C046     		.align	2
 1233              	.L75:
 1234 0024 00000000 		.word	Capsense_fingerThreshold
 1235              		.cfi_endproc
 1236              	.LFE52:
 1237              		.size	Capsense_SetFingerThreshold, .-Capsense_SetFingerThreshold
 1238              		.section	.text.Capsense_SetNoiseThreshold,"ax",%progbits
 1239              		.align	2
 1240              		.global	Capsense_SetNoiseThreshold
 1241              		.code	16
 1242              		.thumb_func
 1243              		.type	Capsense_SetNoiseThreshold, %function
 1244              	Capsense_SetNoiseThreshold:
 1245              	.LFB53:
 923:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 924:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 925:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
 926:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_SetNoiseThreshold
 927:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
 928:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 929:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
 930:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This API sets the Noise Threshold value for each widget.
 931:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 932:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
 933:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget:  Sensor index number.
 934:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  value:   Noise Threshold value for widget.
 935:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 936:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return Value:
 937:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 938:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 939:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
 940:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_noiseThreshold[] - This array contains the level of signal
 941:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   for each widget that determines the level of noise in the capacitive scan.
 942:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 943:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
 944:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 945:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 946:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
 947:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_SetNoiseThreshold(uint32 widget, uint8 value)
 948:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1246              		.loc 1 948 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 8
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 82B0     		sub	sp, sp, #8
 1255              		.cfi_def_cfa_offset 16
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 1258 0006 7860     		str	r0, [r7, #4]
 1259 0008 0A00     		movs	r2, r1
 1260 000a FB1C     		adds	r3, r7, #3
 1261 000c 1A70     		strb	r2, [r3]
 949:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_noiseThreshold[widget] = value;
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 40


 1262              		.loc 1 949 0
 1263 000e 054A     		ldr	r2, .L78
 1264 0010 7B68     		ldr	r3, [r7, #4]
 1265 0012 D318     		adds	r3, r2, r3
 1266 0014 FA1C     		adds	r2, r7, #3
 1267 0016 1278     		ldrb	r2, [r2]
 1268 0018 1A70     		strb	r2, [r3]
 950:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1269              		.loc 1 950 0
 1270 001a C046     		nop
 1271 001c BD46     		mov	sp, r7
 1272 001e 02B0     		add	sp, sp, #8
 1273              		@ sp needed
 1274 0020 80BD     		pop	{r7, pc}
 1275              	.L79:
 1276 0022 C046     		.align	2
 1277              	.L78:
 1278 0024 00000000 		.word	Capsense_noiseThreshold
 1279              		.cfi_endproc
 1280              	.LFE53:
 1281              		.size	Capsense_SetNoiseThreshold, .-Capsense_SetNoiseThreshold
 1282              		.section	.text.Capsense_SetFingerHysteresis,"ax",%progbits
 1283              		.align	2
 1284              		.global	Capsense_SetFingerHysteresis
 1285              		.code	16
 1286              		.thumb_func
 1287              		.type	Capsense_SetFingerHysteresis, %function
 1288              	Capsense_SetFingerHysteresis:
 1289              	.LFB54:
 951:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 952:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 953:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
 954:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_SetFingerHysteresis
 955:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
 956:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 957:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
 958:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This API sets the Hysteresis value of a widget
 959:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 960:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
 961:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  value:  Hysteresis value for widgets.
 962:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget:  widget number
 963:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 964:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return Value:
 965:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 966:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 967:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
 968:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_hysteresis[] - This array contains the hysteresis value for each widget.
 969:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_widgetNumberSld - structure with dynamic sliders' parameters.
 970:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 971:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
 972:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 973:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 974:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
 975:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_SetFingerHysteresis(uint32 widget, uint8 value)
 976:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1290              		.loc 1 976 0
 1291              		.cfi_startproc
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 41


 1292              		@ args = 0, pretend = 0, frame = 8
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294 0000 80B5     		push	{r7, lr}
 1295              		.cfi_def_cfa_offset 8
 1296              		.cfi_offset 7, -8
 1297              		.cfi_offset 14, -4
 1298 0002 82B0     		sub	sp, sp, #8
 1299              		.cfi_def_cfa_offset 16
 1300 0004 00AF     		add	r7, sp, #0
 1301              		.cfi_def_cfa_register 7
 1302 0006 7860     		str	r0, [r7, #4]
 1303 0008 0A00     		movs	r2, r1
 1304 000a FB1C     		adds	r3, r7, #3
 1305 000c 1A70     		strb	r2, [r3]
 977:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_hysteresis[widget] = value;
 1306              		.loc 1 977 0
 1307 000e 054A     		ldr	r2, .L81
 1308 0010 7B68     		ldr	r3, [r7, #4]
 1309 0012 D318     		adds	r3, r2, r3
 1310 0014 FA1C     		adds	r2, r7, #3
 1311 0016 1278     		ldrb	r2, [r2]
 1312 0018 1A70     		strb	r2, [r3]
 978:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1313              		.loc 1 978 0
 1314 001a C046     		nop
 1315 001c BD46     		mov	sp, r7
 1316 001e 02B0     		add	sp, sp, #8
 1317              		@ sp needed
 1318 0020 80BD     		pop	{r7, pc}
 1319              	.L82:
 1320 0022 C046     		.align	2
 1321              	.L81:
 1322 0024 00000000 		.word	Capsense_hysteresis
 1323              		.cfi_endproc
 1324              	.LFE54:
 1325              		.size	Capsense_SetFingerHysteresis, .-Capsense_SetFingerHysteresis
 1326              		.section	.text.Capsense_SetNegativeNoiseThreshold,"ax",%progbits
 1327              		.align	2
 1328              		.global	Capsense_SetNegativeNoiseThreshold
 1329              		.code	16
 1330              		.thumb_func
 1331              		.type	Capsense_SetNegativeNoiseThreshold, %function
 1332              	Capsense_SetNegativeNoiseThreshold:
 1333              	.LFB55:
 979:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 980:Generated_Source\PSoC4/Capsense_CSHL.c **** 
 981:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
 982:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_SetNegativeNoiseThreshold
 983:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
 984:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 985:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
 986:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This API sets the Negative Noise Threshold value of a widget
 987:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 988:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
 989:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  value:  Negative Noise Threshold value for widgets.
 990:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget: widget number
 991:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 42


 992:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return Value:
 993:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
 994:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
 995:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
 996:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_negativeNoiseThreshold  - This parameter specifies the negative
 997:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   difference between the raw count and baseline levels for Baseline resetting to
 998:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   the raw count level.
 999:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1000:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1001:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1002:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1003:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1004:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_SetNegativeNoiseThreshold(uint32 widget, uint8 value)
1005:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1334              		.loc 1 1005 0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 8
 1337              		@ frame_needed = 1, uses_anonymous_args = 0
 1338 0000 80B5     		push	{r7, lr}
 1339              		.cfi_def_cfa_offset 8
 1340              		.cfi_offset 7, -8
 1341              		.cfi_offset 14, -4
 1342 0002 82B0     		sub	sp, sp, #8
 1343              		.cfi_def_cfa_offset 16
 1344 0004 00AF     		add	r7, sp, #0
 1345              		.cfi_def_cfa_register 7
 1346 0006 7860     		str	r0, [r7, #4]
 1347 0008 0A00     		movs	r2, r1
 1348 000a FB1C     		adds	r3, r7, #3
 1349 000c 1A70     		strb	r2, [r3]
1006:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_negativeNoiseThreshold[widget] = value;
 1350              		.loc 1 1006 0
 1351 000e 054A     		ldr	r2, .L84
 1352 0010 7B68     		ldr	r3, [r7, #4]
 1353 0012 D318     		adds	r3, r2, r3
 1354 0014 FA1C     		adds	r2, r7, #3
 1355 0016 1278     		ldrb	r2, [r2]
 1356 0018 1A70     		strb	r2, [r3]
1007:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1357              		.loc 1 1007 0
 1358 001a C046     		nop
 1359 001c BD46     		mov	sp, r7
 1360 001e 02B0     		add	sp, sp, #8
 1361              		@ sp needed
 1362 0020 80BD     		pop	{r7, pc}
 1363              	.L85:
 1364 0022 C046     		.align	2
 1365              	.L84:
 1366 0024 00000000 		.word	Capsense_negativeNoiseThreshold
 1367              		.cfi_endproc
 1368              	.LFE55:
 1369              		.size	Capsense_SetNegativeNoiseThreshold, .-Capsense_SetNegativeNoiseThreshold
 1370              		.section	.text.Capsense_SetDebounce,"ax",%progbits
 1371              		.align	2
 1372              		.global	Capsense_SetDebounce
 1373              		.code	16
 1374              		.thumb_func
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 43


 1375              		.type	Capsense_SetDebounce, %function
 1376              	Capsense_SetDebounce:
 1377              	.LFB56:
1008:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1009:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1010:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
1011:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_SetDebounce
1012:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
1013:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1014:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
1015:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This API sets the debounce value for a widget.
1016:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1017:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
1018:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  value:  Debounce value for widget.
1019:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget: widget index.
1020:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1021:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return Value:
1022:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1023:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1024:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
1025:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_debounce[] - This array contains the debounce value for each widget.
1026:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_widgetNumberSld - structure with dynamic sliders' parameters.
1027:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1028:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1029:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1030:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1031:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1032:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_SetDebounce(uint32 widget, uint8 value)
1033:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1378              		.loc 1 1033 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382 0000 80B5     		push	{r7, lr}
 1383              		.cfi_def_cfa_offset 8
 1384              		.cfi_offset 7, -8
 1385              		.cfi_offset 14, -4
 1386 0002 82B0     		sub	sp, sp, #8
 1387              		.cfi_def_cfa_offset 16
 1388 0004 00AF     		add	r7, sp, #0
 1389              		.cfi_def_cfa_register 7
 1390 0006 7860     		str	r0, [r7, #4]
 1391 0008 0A00     		movs	r2, r1
 1392 000a FB1C     		adds	r3, r7, #3
 1393 000c 1A70     		strb	r2, [r3]
1034:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_debounce[widget] = value;
 1394              		.loc 1 1034 0
 1395 000e 054A     		ldr	r2, .L87
 1396 0010 7B68     		ldr	r3, [r7, #4]
 1397 0012 D318     		adds	r3, r2, r3
 1398 0014 FA1C     		adds	r2, r7, #3
 1399 0016 1278     		ldrb	r2, [r2]
 1400 0018 1A70     		strb	r2, [r3]
1035:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1401              		.loc 1 1035 0
 1402 001a C046     		nop
 1403 001c BD46     		mov	sp, r7
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 44


 1404 001e 02B0     		add	sp, sp, #8
 1405              		@ sp needed
 1406 0020 80BD     		pop	{r7, pc}
 1407              	.L88:
 1408 0022 C046     		.align	2
 1409              	.L87:
 1410 0024 00000000 		.word	Capsense_debounce
 1411              		.cfi_endproc
 1412              	.LFE56:
 1413              		.size	Capsense_SetDebounce, .-Capsense_SetDebounce
 1414              		.section	.text.Capsense_SetLowBaselineReset,"ax",%progbits
 1415              		.align	2
 1416              		.global	Capsense_SetLowBaselineReset
 1417              		.code	16
 1418              		.thumb_func
 1419              		.type	Capsense_SetLowBaselineReset, %function
 1420              	Capsense_SetLowBaselineReset:
 1421              	.LFB57:
1036:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1037:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1038:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
1039:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_SetLowBaselineReset
1040:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
1041:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1042:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
1043:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This API sets the low baseline reset threshold value for the sensor.
1044:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1045:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
1046:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  value: low baseline reset threshold value.
1047:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  sensor: Sensor index.
1048:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1049:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return Value:
1050:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1051:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1052:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
1053:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_lowBaselineReset[] - This array contains the Baseline update
1054:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  threshold value for each sensor.
1055:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1056:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1057:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1058:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1059:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1060:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_SetLowBaselineReset(uint32 sensor, uint8 value)
1061:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1422              		.loc 1 1061 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 8
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426 0000 80B5     		push	{r7, lr}
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
 1430 0002 82B0     		sub	sp, sp, #8
 1431              		.cfi_def_cfa_offset 16
 1432 0004 00AF     		add	r7, sp, #0
 1433              		.cfi_def_cfa_register 7
 1434 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 45


 1435 0008 0A00     		movs	r2, r1
 1436 000a FB1C     		adds	r3, r7, #3
 1437 000c 1A70     		strb	r2, [r3]
1062:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_lowBaselineReset[sensor] = value;
 1438              		.loc 1 1062 0
 1439 000e 054A     		ldr	r2, .L90
 1440 0010 7B68     		ldr	r3, [r7, #4]
 1441 0012 D318     		adds	r3, r2, r3
 1442 0014 FA1C     		adds	r2, r7, #3
 1443 0016 1278     		ldrb	r2, [r2]
 1444 0018 1A70     		strb	r2, [r3]
1063:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1445              		.loc 1 1063 0
 1446 001a C046     		nop
 1447 001c BD46     		mov	sp, r7
 1448 001e 02B0     		add	sp, sp, #8
 1449              		@ sp needed
 1450 0020 80BD     		pop	{r7, pc}
 1451              	.L91:
 1452 0022 C046     		.align	2
 1453              	.L90:
 1454 0024 00000000 		.word	Capsense_lowBaselineReset
 1455              		.cfi_endproc
 1456              	.LFE57:
 1457              		.size	Capsense_SetLowBaselineReset, .-Capsense_SetLowBaselineReset
 1458              		.section	.text.Capsense_CheckIsSensorActive,"ax",%progbits
 1459              		.align	2
 1460              		.global	Capsense_CheckIsSensorActive
 1461              		.code	16
 1462              		.thumb_func
 1463              		.type	Capsense_CheckIsSensorActive, %function
 1464              	Capsense_CheckIsSensorActive:
 1465              	.LFB58:
1064:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TUNING_METHOD != Capsense__TUNING_NONE) */
1065:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1066:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1067:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
1068:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_CheckIsSensorActive
1069:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
1070:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1071:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
1072:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Compares the Capsense_sensorSignal[sensor] array element to the finger
1073:Generated_Source\PSoC4/Capsense_CSHL.c **** *  threshold of the widget it belongs to. The hysteresis and debounce are taken into
1074:Generated_Source\PSoC4/Capsense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold
1075:Generated_Source\PSoC4/Capsense_CSHL.c **** *  based on whether the sensor is currently active.
1076:Generated_Source\PSoC4/Capsense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
1077:Generated_Source\PSoC4/Capsense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
1078:Generated_Source\PSoC4/Capsense_CSHL.c **** *  The debounce counter is added to the sensor active transition.
1079:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This function updates the Capsense_sensorOnMask[] array element.
1080:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1081:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
1082:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor:  Sensor number.
1083:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1084:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
1085:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
1086:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1087:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 46


1088:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorSignal[] - used to store the difference between
1089:Generated_Source\PSoC4/Capsense_CSHL.c **** *  the current value of raw data and a previous value of the baseline.
1090:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_debounceCounter[]   - used to store the current debounce
1091:Generated_Source\PSoC4/Capsense_CSHL.c **** *  counter of the sensor. the widget which have this parameter are buttons, matrix
1092:Generated_Source\PSoC4/Capsense_CSHL.c **** *  buttons, proximity, and guard. All other widgets don't have the  debounce parameter
1093:Generated_Source\PSoC4/Capsense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
1094:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorOnMask[] - used to store the sensors on/off state.
1095:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorOnMask[0] contains the masked bits for sensors
1096:Generated_Source\PSoC4/Capsense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1097:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[1] contains the masked bits for
1098:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1099:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 - sensor is inactive.
1100:Generated_Source\PSoC4/Capsense_CSHL.c **** *  1 - sensor is active.
1101:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1102:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
1103:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1104:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1105:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
1106:Generated_Source\PSoC4/Capsense_CSHL.c **** uint32 Capsense_CheckIsSensorActive(uint32 sensor)
1107:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1466              		.loc 1 1107 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 16
 1469              		@ frame_needed = 1, uses_anonymous_args = 0
 1470 0000 80B5     		push	{r7, lr}
 1471              		.cfi_def_cfa_offset 8
 1472              		.cfi_offset 7, -8
 1473              		.cfi_offset 14, -4
 1474 0002 84B0     		sub	sp, sp, #16
 1475              		.cfi_def_cfa_offset 24
 1476 0004 00AF     		add	r7, sp, #0
 1477              		.cfi_def_cfa_register 7
 1478 0006 7860     		str	r0, [r7, #4]
1108:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 widget;
1109:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 debounce;
1110:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 debounceIndex;
1111:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1112:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 fingerThreshold;
1113:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 hysteresis;
1114:Generated_Source\PSoC4/Capsense_CSHL.c ****     
1115:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1116:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Prepare to find debounce counter index */
1117:Generated_Source\PSoC4/Capsense_CSHL.c ****     widget = Capsense_widgetNumber[sensor];
 1479              		.loc 1 1117 0
 1480 0008 0F23     		movs	r3, #15
 1481 000a FB18     		adds	r3, r7, r3
 1482 000c 4149     		ldr	r1, .L101
 1483 000e 7A68     		ldr	r2, [r7, #4]
 1484 0010 8A18     		adds	r2, r1, r2
 1485 0012 1278     		ldrb	r2, [r2]
 1486 0014 1A70     		strb	r2, [r3]
1118:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1119:Generated_Source\PSoC4/Capsense_CSHL.c ****     fingerThreshold = Capsense_fingerThreshold[widget];
 1487              		.loc 1 1119 0
 1488 0016 0F23     		movs	r3, #15
 1489 0018 FB18     		adds	r3, r7, r3
 1490 001a 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 47


 1491 001c 0E23     		movs	r3, #14
 1492 001e FB18     		adds	r3, r7, r3
 1493 0020 3D49     		ldr	r1, .L101+4
 1494 0022 8A5C     		ldrb	r2, [r1, r2]
 1495 0024 1A70     		strb	r2, [r3]
1120:Generated_Source\PSoC4/Capsense_CSHL.c ****     hysteresis = Capsense_hysteresis[widget];
 1496              		.loc 1 1120 0
 1497 0026 0F23     		movs	r3, #15
 1498 0028 FB18     		adds	r3, r7, r3
 1499 002a 1A78     		ldrb	r2, [r3]
 1500 002c 0D23     		movs	r3, #13
 1501 002e FB18     		adds	r3, r7, r3
 1502 0030 3A49     		ldr	r1, .L101+8
 1503 0032 8A5C     		ldrb	r2, [r1, r2]
 1504 0034 1A70     		strb	r2, [r3]
1121:Generated_Source\PSoC4/Capsense_CSHL.c ****     debounce = Capsense_debounce[widget];
 1505              		.loc 1 1121 0
 1506 0036 0F23     		movs	r3, #15
 1507 0038 FB18     		adds	r3, r7, r3
 1508 003a 1A78     		ldrb	r2, [r3]
 1509 003c 0C23     		movs	r3, #12
 1510 003e FB18     		adds	r3, r7, r3
 1511 0040 3749     		ldr	r1, .L101+12
 1512 0042 8A5C     		ldrb	r2, [r1, r2]
 1513 0044 1A70     		strb	r2, [r3]
1122:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1123:Generated_Source\PSoC4/Capsense_CSHL.c ****         debounceIndex = widget;
 1514              		.loc 1 1123 0
 1515 0046 0B23     		movs	r3, #11
 1516 0048 FB18     		adds	r3, r7, r3
 1517 004a 0F22     		movs	r2, #15
 1518 004c BA18     		adds	r2, r7, r2
 1519 004e 1278     		ldrb	r2, [r2]
 1520 0050 1A70     		strb	r2, [r3]
1124:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1125:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1126:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Was on */
1127:Generated_Source\PSoC4/Capsense_CSHL.c ****     if (0u != Capsense_GetBitValue(Capsense_sensorOnMask, sensor))
 1521              		.loc 1 1127 0
 1522 0052 7A68     		ldr	r2, [r7, #4]
 1523 0054 334B     		ldr	r3, .L101+16
 1524 0056 1100     		movs	r1, r2
 1525 0058 1800     		movs	r0, r3
 1526 005a FFF7FEFF 		bl	Capsense_GetBitValue
 1527 005e 031E     		subs	r3, r0, #0
 1528 0060 1CD0     		beq	.L93
1128:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1129:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Hysteresis minus */
1130:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (Capsense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 1529              		.loc 1 1130 0
 1530 0062 314A     		ldr	r2, .L101+20
 1531 0064 7B68     		ldr	r3, [r7, #4]
 1532 0066 D318     		adds	r3, r2, r3
 1533 0068 1B78     		ldrb	r3, [r3]
 1534 006a 1900     		movs	r1, r3
 1535 006c 0E23     		movs	r3, #14
 1536 006e FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 48


 1537 0070 1A78     		ldrb	r2, [r3]
 1538 0072 0D23     		movs	r3, #13
 1539 0074 FB18     		adds	r3, r7, r3
 1540 0076 1B78     		ldrb	r3, [r3]
 1541 0078 D31A     		subs	r3, r2, r3
 1542 007a 9942     		cmp	r1, r3
 1543 007c 3BDA     		bge	.L95
1131:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1132:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_SetBitValue(Capsense_sensorOnMask, sensor, 0u);
 1544              		.loc 1 1132 0
 1545 007e 7968     		ldr	r1, [r7, #4]
 1546 0080 284B     		ldr	r3, .L101+16
 1547 0082 0022     		movs	r2, #0
 1548 0084 1800     		movs	r0, r3
 1549 0086 FFF7FEFF 		bl	Capsense_SetBitValue
1133:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1134:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_debounceCounter[debounceIndex] = debounce;
 1550              		.loc 1 1134 0
 1551 008a 0B23     		movs	r3, #11
 1552 008c FB18     		adds	r3, r7, r3
 1553 008e 1B78     		ldrb	r3, [r3]
 1554 0090 264A     		ldr	r2, .L101+24
 1555 0092 0C21     		movs	r1, #12
 1556 0094 7918     		adds	r1, r7, r1
 1557 0096 0978     		ldrb	r1, [r1]
 1558 0098 D154     		strb	r1, [r2, r3]
 1559 009a 2CE0     		b	.L95
 1560              	.L93:
1135:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1136:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1137:Generated_Source\PSoC4/Capsense_CSHL.c ****     else    /* Was off */
1138:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1139:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Hysteresis plus */
1140:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (Capsense_sensorSignal[sensor] >= (fingerThreshold + hysteresis))
 1561              		.loc 1 1140 0
 1562 009c 224A     		ldr	r2, .L101+20
 1563 009e 7B68     		ldr	r3, [r7, #4]
 1564 00a0 D318     		adds	r3, r2, r3
 1565 00a2 1B78     		ldrb	r3, [r3]
 1566 00a4 1900     		movs	r1, r3
 1567 00a6 0E23     		movs	r3, #14
 1568 00a8 FB18     		adds	r3, r7, r3
 1569 00aa 1A78     		ldrb	r2, [r3]
 1570 00ac 0D23     		movs	r3, #13
 1571 00ae FB18     		adds	r3, r7, r3
 1572 00b0 1B78     		ldrb	r3, [r3]
 1573 00b2 D318     		adds	r3, r2, r3
 1574 00b4 9942     		cmp	r1, r3
 1575 00b6 16DB     		blt	.L96
1141:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1142:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_debounceCounter[debounceIndex]--;
 1576              		.loc 1 1142 0
 1577 00b8 0B23     		movs	r3, #11
 1578 00ba FB18     		adds	r3, r7, r3
 1579 00bc 1B78     		ldrb	r3, [r3]
 1580 00be 1B4A     		ldr	r2, .L101+24
 1581 00c0 D25C     		ldrb	r2, [r2, r3]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 49


 1582 00c2 013A     		subs	r2, r2, #1
 1583 00c4 D1B2     		uxtb	r1, r2
 1584 00c6 194A     		ldr	r2, .L101+24
 1585 00c8 D154     		strb	r1, [r2, r3]
1143:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Sensor active, decrement debounce counter */
1144:Generated_Source\PSoC4/Capsense_CSHL.c ****             if(Capsense_debounceCounter[debounceIndex] == 0u)
 1586              		.loc 1 1144 0
 1587 00ca 0B23     		movs	r3, #11
 1588 00cc FB18     		adds	r3, r7, r3
 1589 00ce 1B78     		ldrb	r3, [r3]
 1590 00d0 164A     		ldr	r2, .L101+24
 1591 00d2 D35C     		ldrb	r3, [r2, r3]
 1592 00d4 002B     		cmp	r3, #0
 1593 00d6 0ED1     		bne	.L95
1145:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1146:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_SetBitValue(Capsense_sensorOnMask, sensor, 1u);
 1594              		.loc 1 1146 0
 1595 00d8 7968     		ldr	r1, [r7, #4]
 1596 00da 124B     		ldr	r3, .L101+16
 1597 00dc 0122     		movs	r2, #1
 1598 00de 1800     		movs	r0, r3
 1599 00e0 FFF7FEFF 		bl	Capsense_SetBitValue
 1600 00e4 07E0     		b	.L95
 1601              	.L96:
1147:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1148:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1149:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
1150:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1151:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1152:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_debounceCounter[debounceIndex] = debounce;
 1602              		.loc 1 1152 0
 1603 00e6 0B23     		movs	r3, #11
 1604 00e8 FB18     		adds	r3, r7, r3
 1605 00ea 1B78     		ldrb	r3, [r3]
 1606 00ec 0F4A     		ldr	r2, .L101+24
 1607 00ee 0C21     		movs	r1, #12
 1608 00f0 7918     		adds	r1, r7, r1
 1609 00f2 0978     		ldrb	r1, [r1]
 1610 00f4 D154     		strb	r1, [r2, r3]
 1611              	.L95:
1153:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1154:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1155:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1156:Generated_Source\PSoC4/Capsense_CSHL.c ****     return ((uint32)((0u != Capsense_GetBitValue(Capsense_sensorOnMask, sensor)) ? 1u : 0u));
 1612              		.loc 1 1156 0
 1613 00f6 7A68     		ldr	r2, [r7, #4]
 1614 00f8 0A4B     		ldr	r3, .L101+16
 1615 00fa 1100     		movs	r1, r2
 1616 00fc 1800     		movs	r0, r3
 1617 00fe FFF7FEFF 		bl	Capsense_GetBitValue
 1618 0102 031E     		subs	r3, r0, #0
 1619 0104 01D0     		beq	.L98
 1620              		.loc 1 1156 0 is_stmt 0 discriminator 1
 1621 0106 0123     		movs	r3, #1
 1622 0108 00E0     		b	.L100
 1623              	.L98:
 1624              		.loc 1 1156 0 discriminator 2
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 50


 1625 010a 0023     		movs	r3, #0
 1626              	.L100:
1157:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1627              		.loc 1 1157 0 is_stmt 1 discriminator 5
 1628 010c 1800     		movs	r0, r3
 1629 010e BD46     		mov	sp, r7
 1630 0110 04B0     		add	sp, sp, #16
 1631              		@ sp needed
 1632 0112 80BD     		pop	{r7, pc}
 1633              	.L102:
 1634              		.align	2
 1635              	.L101:
 1636 0114 00000000 		.word	Capsense_widgetNumber
 1637 0118 00000000 		.word	Capsense_fingerThreshold
 1638 011c 00000000 		.word	Capsense_hysteresis
 1639 0120 00000000 		.word	Capsense_debounce
 1640 0124 00000000 		.word	Capsense_sensorOnMask
 1641 0128 00000000 		.word	Capsense_sensorSignal
 1642 012c 10000000 		.word	Capsense_debounceCounter
 1643              		.cfi_endproc
 1644              	.LFE58:
 1645              		.size	Capsense_CheckIsSensorActive, .-Capsense_CheckIsSensorActive
 1646              		.section	.text.Capsense_CheckIsWidgetActive,"ax",%progbits
 1647              		.align	2
 1648              		.global	Capsense_CheckIsWidgetActive
 1649              		.code	16
 1650              		.thumb_func
 1651              		.type	Capsense_CheckIsWidgetActive, %function
 1652              	Capsense_CheckIsWidgetActive:
 1653              	.LFB59:
1158:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1159:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1160:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
1161:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_CheckIsWidgetActive
1162:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
1163:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1164:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
1165:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Compares the CapSense_sensorSignal[] array element to the finger threshold of
1166:Generated_Source\PSoC4/Capsense_CSHL.c **** * the widget it belongs to. The hysteresis and debounce are taken into account.
1167:Generated_Source\PSoC4/Capsense_CSHL.c **** * The hysteresis is added or subtracted from the finger threshold based on whether
1168:Generated_Source\PSoC4/Capsense_CSHL.c **** *  the sensor is currently active. If the sensor is active, the threshold is
1169:Generated_Source\PSoC4/Capsense_CSHL.c **** *  lowered by the hysteresis amount. If the sensor is inactive, the threshold
1170:Generated_Source\PSoC4/Capsense_CSHL.c **** *  is raised by the hysteresis amount.
1171:Generated_Source\PSoC4/Capsense_CSHL.c **** * The debounce counter added to the sensor active transition.
1172:Generated_Source\PSoC4/Capsense_CSHL.c **** * This function updates CapSense_sensorOnMask[] array element
1173:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1174:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
1175:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
1176:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1177:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
1178:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are
1179:Generated_Source\PSoC4/Capsense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
1180:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1181:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
1182:Generated_Source\PSoC4/Capsense_CSHL.c **** *  rawDataIndex[]: Contains the  1st sensor position in the widget
1183:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1184:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 51


1185:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1186:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1187:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
1188:Generated_Source\PSoC4/Capsense_CSHL.c **** uint32 Capsense_CheckIsWidgetActive(uint32 widget)
1189:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1654              		.loc 1 1189 0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 24
 1657              		@ frame_needed = 1, uses_anonymous_args = 0
 1658 0000 80B5     		push	{r7, lr}
 1659              		.cfi_def_cfa_offset 8
 1660              		.cfi_offset 7, -8
 1661              		.cfi_offset 14, -4
 1662 0002 86B0     		sub	sp, sp, #24
 1663              		.cfi_def_cfa_offset 32
 1664 0004 00AF     		add	r7, sp, #0
 1665              		.cfi_def_cfa_register 7
 1666 0006 7860     		str	r0, [r7, #4]
1190:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 rawIndex = (uint32)Capsense_rawDataIndex[widget];
 1667              		.loc 1 1190 0
 1668 0008 0023     		movs	r3, #0
 1669 000a 7B61     		str	r3, [r7, #20]
1191:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 numOfSensors = (uint32)Capsense_numberOfSensors[widget] + rawIndex;
 1670              		.loc 1 1191 0
 1671 000c 0123     		movs	r3, #1
 1672 000e 1A00     		movs	r2, r3
 1673 0010 7B69     		ldr	r3, [r7, #20]
 1674 0012 D318     		adds	r3, r2, r3
 1675 0014 FB60     		str	r3, [r7, #12]
1192:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 state = 0u;
 1676              		.loc 1 1192 0
 1677 0016 0023     		movs	r3, #0
 1678 0018 3B61     		str	r3, [r7, #16]
 1679              	.L105:
1193:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1194:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Check all sensors of widget */
1195:Generated_Source\PSoC4/Capsense_CSHL.c ****     do
1196:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1197:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(Capsense_CheckIsSensorActive((uint32)rawIndex) != 0u)
 1680              		.loc 1 1197 0
 1681 001a 7B69     		ldr	r3, [r7, #20]
 1682 001c 1800     		movs	r0, r3
 1683 001e FFF7FEFF 		bl	Capsense_CheckIsSensorActive
 1684 0022 031E     		subs	r3, r0, #0
 1685 0024 01D0     		beq	.L104
1198:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1199:Generated_Source\PSoC4/Capsense_CSHL.c ****             state = Capsense_SENSOR_IS_ACTIVE;
 1686              		.loc 1 1199 0
 1687 0026 0123     		movs	r3, #1
 1688 0028 3B61     		str	r3, [r7, #16]
 1689              	.L104:
1200:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1201:Generated_Source\PSoC4/Capsense_CSHL.c ****         rawIndex++;
 1690              		.loc 1 1201 0
 1691 002a 7B69     		ldr	r3, [r7, #20]
 1692 002c 0133     		adds	r3, r3, #1
 1693 002e 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 52


1202:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1203:Generated_Source\PSoC4/Capsense_CSHL.c ****     while(rawIndex < numOfSensors);
 1694              		.loc 1 1203 0
 1695 0030 7A69     		ldr	r2, [r7, #20]
 1696 0032 FB68     		ldr	r3, [r7, #12]
 1697 0034 9A42     		cmp	r2, r3
 1698 0036 F0D3     		bcc	.L105
1204:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1205:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1206:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1207:Generated_Source\PSoC4/Capsense_CSHL.c ****     return state;
 1699              		.loc 1 1207 0
 1700 0038 3B69     		ldr	r3, [r7, #16]
1208:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1701              		.loc 1 1208 0
 1702 003a 1800     		movs	r0, r3
 1703 003c BD46     		mov	sp, r7
 1704 003e 06B0     		add	sp, sp, #24
 1705              		@ sp needed
 1706 0040 80BD     		pop	{r7, pc}
 1707              		.cfi_endproc
 1708              	.LFE59:
 1709              		.size	Capsense_CheckIsWidgetActive, .-Capsense_CheckIsWidgetActive
 1710 0042 C046     		.section	.text.Capsense_CheckIsAnyWidgetActive,"ax",%progbits
 1711              		.align	2
 1712              		.global	Capsense_CheckIsAnyWidgetActive
 1713              		.code	16
 1714              		.thumb_func
 1715              		.type	Capsense_CheckIsAnyWidgetActive, %function
 1716              	Capsense_CheckIsAnyWidgetActive:
 1717              	.LFB60:
1209:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1210:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1211:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
1212:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_CheckIsAnyWidgetActive
1213:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
1214:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1215:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
1216:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Compares all the sensors of the Capsense_Signal[] array to their finger
1217:Generated_Source\PSoC4/Capsense_CSHL.c **** *  threshold. Calls Capsense_CheckIsWidgetActive() for each widget so
1218:Generated_Source\PSoC4/Capsense_CSHL.c **** *  the Capsense_sensorOnMask[] array is up to date after calling this
1219:Generated_Source\PSoC4/Capsense_CSHL.c **** *  function.
1220:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1221:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
1222:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
1223:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1224:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
1225:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
1226:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1227:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
1228:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1229:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1230:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
1231:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1232:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1233:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
1234:Generated_Source\PSoC4/Capsense_CSHL.c **** uint32 Capsense_CheckIsAnyWidgetActive(void)
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 53


1235:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1718              		.loc 1 1235 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 8
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722 0000 80B5     		push	{r7, lr}
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726 0002 82B0     		sub	sp, sp, #8
 1727              		.cfi_def_cfa_offset 16
 1728 0004 00AF     		add	r7, sp, #0
 1729              		.cfi_def_cfa_register 7
1236:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1237:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 i;
1238:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 state = 0u;
 1730              		.loc 1 1238 0
 1731 0006 0023     		movs	r3, #0
 1732 0008 3B60     		str	r3, [r7]
1239:Generated_Source\PSoC4/Capsense_CSHL.c ****     
1240:Generated_Source\PSoC4/Capsense_CSHL.c ****     for(i = 0u; i < Capsense_TOTAL_WIDGET_COUNT; i++)
 1733              		.loc 1 1240 0
 1734 000a 0023     		movs	r3, #0
 1735 000c 7B60     		str	r3, [r7, #4]
 1736 000e 0AE0     		b	.L108
 1737              	.L110:
1241:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1242:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (Capsense_CheckIsWidgetActive(i) != 0u)
 1738              		.loc 1 1242 0
 1739 0010 7B68     		ldr	r3, [r7, #4]
 1740 0012 1800     		movs	r0, r3
 1741 0014 FFF7FEFF 		bl	Capsense_CheckIsWidgetActive
 1742 0018 031E     		subs	r3, r0, #0
 1743 001a 01D0     		beq	.L109
1243:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1244:Generated_Source\PSoC4/Capsense_CSHL.c ****             state = Capsense_WIDGET_IS_ACTIVE;
 1744              		.loc 1 1244 0
 1745 001c 0123     		movs	r3, #1
 1746 001e 3B60     		str	r3, [r7]
 1747              	.L109:
1240:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1748              		.loc 1 1240 0 discriminator 2
 1749 0020 7B68     		ldr	r3, [r7, #4]
 1750 0022 0133     		adds	r3, r3, #1
 1751 0024 7B60     		str	r3, [r7, #4]
 1752              	.L108:
1240:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1753              		.loc 1 1240 0 is_stmt 0 discriminator 1
 1754 0026 7B68     		ldr	r3, [r7, #4]
 1755 0028 002B     		cmp	r3, #0
 1756 002a F1D0     		beq	.L110
1245:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1246:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1247:Generated_Source\PSoC4/Capsense_CSHL.c ****     
1248:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1249:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1250:Generated_Source\PSoC4/Capsense_CSHL.c ****     return state;
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 54


 1757              		.loc 1 1250 0 is_stmt 1
 1758 002c 3B68     		ldr	r3, [r7]
1251:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1759              		.loc 1 1251 0
 1760 002e 1800     		movs	r0, r3
 1761 0030 BD46     		mov	sp, r7
 1762 0032 02B0     		add	sp, sp, #8
 1763              		@ sp needed
 1764 0034 80BD     		pop	{r7, pc}
 1765              		.cfi_endproc
 1766              	.LFE60:
 1767              		.size	Capsense_CheckIsAnyWidgetActive, .-Capsense_CheckIsAnyWidgetActive
 1768 0036 C046     		.section	.text.Capsense_EnableWidget,"ax",%progbits
 1769              		.align	2
 1770              		.global	Capsense_EnableWidget
 1771              		.code	16
 1772              		.thumb_func
 1773              		.type	Capsense_EnableWidget, %function
 1774              	Capsense_EnableWidget:
 1775              	.LFB61:
1252:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1253:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1254:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
1255:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_EnableWidget
1256:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
1257:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1258:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
1259:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Enables all the widget elements (sensors) to the scanning process.
1260:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1261:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
1262:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
1263:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1264:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
1265:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1266:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1267:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
1268:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[] - used to store the sensor scanning
1269:Generated_Source\PSoC4/Capsense_CSHL.c **** *  state.
1270:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[0] contains the masked bits for sensors
1271:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1272:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[1] contains the masked bits for
1273:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1274:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 - sensor doesn't scan by Capsense_ScanEnabledWidgets().
1275:Generated_Source\PSoC4/Capsense_CSHL.c **** *  1 - sensor scans by Capsense_ScanEnabledWidgets().
1276:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1277:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
1278:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1279:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1280:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
1281:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_EnableWidget(uint32 widget)
1282:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1776              		.loc 1 1282 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 16
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780 0000 80B5     		push	{r7, lr}
 1781              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 55


 1782              		.cfi_offset 7, -8
 1783              		.cfi_offset 14, -4
 1784 0002 84B0     		sub	sp, sp, #16
 1785              		.cfi_def_cfa_offset 24
 1786 0004 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 0006 7860     		str	r0, [r7, #4]
1283:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1284:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 rawIndex = Capsense_rawDataIndex[widget];
 1789              		.loc 1 1284 0
 1790 0008 0F23     		movs	r3, #15
 1791 000a FB18     		adds	r3, r7, r3
 1792 000c 0022     		movs	r2, #0
 1793 000e 1A70     		strb	r2, [r3]
1285:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 numOfSensors = Capsense_numberOfSensors[widget] + rawIndex;
 1794              		.loc 1 1285 0
 1795 0010 0121     		movs	r1, #1
 1796 0012 0E23     		movs	r3, #14
 1797 0014 FB18     		adds	r3, r7, r3
 1798 0016 0F22     		movs	r2, #15
 1799 0018 BA18     		adds	r2, r7, r2
 1800 001a 1278     		ldrb	r2, [r2]
 1801 001c 8A18     		adds	r2, r1, r2
 1802 001e 1A70     		strb	r2, [r3]
 1803              	.L113:
1286:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1287:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Enable all sensors of widget */
1288:Generated_Source\PSoC4/Capsense_CSHL.c ****     do
1289:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1290:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_SetBitValue(Capsense_sensorEnableMask, (uint32)rawIndex, 1u);
 1804              		.loc 1 1290 0 discriminator 1
 1805 0020 0F23     		movs	r3, #15
 1806 0022 FB18     		adds	r3, r7, r3
 1807 0024 1978     		ldrb	r1, [r3]
 1808 0026 0C4B     		ldr	r3, .L114
 1809 0028 0122     		movs	r2, #1
 1810 002a 1800     		movs	r0, r3
 1811 002c FFF7FEFF 		bl	Capsense_SetBitValue
1291:Generated_Source\PSoC4/Capsense_CSHL.c ****         rawIndex++;
 1812              		.loc 1 1291 0 discriminator 1
 1813 0030 0F23     		movs	r3, #15
 1814 0032 FB18     		adds	r3, r7, r3
 1815 0034 1A78     		ldrb	r2, [r3]
 1816 0036 0F23     		movs	r3, #15
 1817 0038 FB18     		adds	r3, r7, r3
 1818 003a 0132     		adds	r2, r2, #1
 1819 003c 1A70     		strb	r2, [r3]
1292:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1293:Generated_Source\PSoC4/Capsense_CSHL.c ****     while(rawIndex < numOfSensors);
 1820              		.loc 1 1293 0 discriminator 1
 1821 003e 0F23     		movs	r3, #15
 1822 0040 FA18     		adds	r2, r7, r3
 1823 0042 0E23     		movs	r3, #14
 1824 0044 FB18     		adds	r3, r7, r3
 1825 0046 1278     		ldrb	r2, [r2]
 1826 0048 1B78     		ldrb	r3, [r3]
 1827 004a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 56


 1828 004c E8D3     		bcc	.L113
1294:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1829              		.loc 1 1294 0
 1830 004e C046     		nop
 1831 0050 BD46     		mov	sp, r7
 1832 0052 04B0     		add	sp, sp, #16
 1833              		@ sp needed
 1834 0054 80BD     		pop	{r7, pc}
 1835              	.L115:
 1836 0056 C046     		.align	2
 1837              	.L114:
 1838 0058 00000000 		.word	Capsense_sensorEnableMask
 1839              		.cfi_endproc
 1840              	.LFE61:
 1841              		.size	Capsense_EnableWidget, .-Capsense_EnableWidget
 1842              		.section	.text.Capsense_DisableWidget,"ax",%progbits
 1843              		.align	2
 1844              		.global	Capsense_DisableWidget
 1845              		.code	16
 1846              		.thumb_func
 1847              		.type	Capsense_DisableWidget, %function
 1848              	Capsense_DisableWidget:
 1849              	.LFB62:
1295:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1296:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1297:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
1298:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_DisableWidget
1299:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
1300:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1301:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
1302:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Disables all the widget elements (sensors) from the scanning process.
1303:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1304:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
1305:Generated_Source\PSoC4/Capsense_CSHL.c **** *  widget:  widget number.
1306:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1307:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
1308:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1309:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1310:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
1311:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[] - used to store the sensor scanning
1312:Generated_Source\PSoC4/Capsense_CSHL.c **** *  state.
1313:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[0] contains the masked bits for sensors
1314:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1315:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_sensorEnableMask[1] contains the masked bits for
1316:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1317:Generated_Source\PSoC4/Capsense_CSHL.c **** *  0 - sensor isn't scanned by Capsense_ScanEnabledWidgets().
1318:Generated_Source\PSoC4/Capsense_CSHL.c **** *  1 - sensor is scanned by Capsense_ScanEnabledWidgets().
1319:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1320:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
1321:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
1322:Generated_Source\PSoC4/Capsense_CSHL.c **** *
1323:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
1324:Generated_Source\PSoC4/Capsense_CSHL.c **** void Capsense_DisableWidget(uint32 widget)
1325:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1850              		.loc 1 1325 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 57


 1853              		@ frame_needed = 1, uses_anonymous_args = 0
 1854 0000 80B5     		push	{r7, lr}
 1855              		.cfi_def_cfa_offset 8
 1856              		.cfi_offset 7, -8
 1857              		.cfi_offset 14, -4
 1858 0002 84B0     		sub	sp, sp, #16
 1859              		.cfi_def_cfa_offset 24
 1860 0004 00AF     		add	r7, sp, #0
 1861              		.cfi_def_cfa_register 7
 1862 0006 7860     		str	r0, [r7, #4]
1326:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 rawIndex = Capsense_rawDataIndex[widget];
 1863              		.loc 1 1326 0
 1864 0008 0F23     		movs	r3, #15
 1865 000a FB18     		adds	r3, r7, r3
 1866 000c 0022     		movs	r2, #0
 1867 000e 1A70     		strb	r2, [r3]
1327:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 numOfSensors = Capsense_numberOfSensors[widget] + rawIndex;
 1868              		.loc 1 1327 0
 1869 0010 0121     		movs	r1, #1
 1870 0012 0E23     		movs	r3, #14
 1871 0014 FB18     		adds	r3, r7, r3
 1872 0016 0F22     		movs	r2, #15
 1873 0018 BA18     		adds	r2, r7, r2
 1874 001a 1278     		ldrb	r2, [r2]
 1875 001c 8A18     		adds	r2, r1, r2
 1876 001e 1A70     		strb	r2, [r3]
 1877              	.L117:
1328:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1329:Generated_Source\PSoC4/Capsense_CSHL.c ****     /* Disable all sensors of widget */
1330:Generated_Source\PSoC4/Capsense_CSHL.c ****     do
1331:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1332:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1333:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_SetBitValue(Capsense_sensorEnableMask, (uint32)rawIndex, 0u);
 1878              		.loc 1 1333 0 discriminator 1
 1879 0020 0F23     		movs	r3, #15
 1880 0022 FB18     		adds	r3, r7, r3
 1881 0024 1978     		ldrb	r1, [r3]
 1882 0026 0C4B     		ldr	r3, .L118
 1883 0028 0022     		movs	r2, #0
 1884 002a 1800     		movs	r0, r3
 1885 002c FFF7FEFF 		bl	Capsense_SetBitValue
1334:Generated_Source\PSoC4/Capsense_CSHL.c ****         rawIndex++;
 1886              		.loc 1 1334 0 discriminator 1
 1887 0030 0F23     		movs	r3, #15
 1888 0032 FB18     		adds	r3, r7, r3
 1889 0034 1A78     		ldrb	r2, [r3]
 1890 0036 0F23     		movs	r3, #15
 1891 0038 FB18     		adds	r3, r7, r3
 1892 003a 0132     		adds	r2, r2, #1
 1893 003c 1A70     		strb	r2, [r3]
1335:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1336:Generated_Source\PSoC4/Capsense_CSHL.c ****     while(rawIndex < numOfSensors);
 1894              		.loc 1 1336 0 discriminator 1
 1895 003e 0F23     		movs	r3, #15
 1896 0040 FA18     		adds	r2, r7, r3
 1897 0042 0E23     		movs	r3, #14
 1898 0044 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 58


 1899 0046 1278     		ldrb	r2, [r2]
 1900 0048 1B78     		ldrb	r3, [r3]
 1901 004a 9A42     		cmp	r2, r3
 1902 004c E8D3     		bcc	.L117
1337:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1903              		.loc 1 1337 0
 1904 004e C046     		nop
 1905 0050 BD46     		mov	sp, r7
 1906 0052 04B0     		add	sp, sp, #16
 1907              		@ sp needed
 1908 0054 80BD     		pop	{r7, pc}
 1909              	.L119:
 1910 0056 C046     		.align	2
 1911              	.L118:
 1912 0058 00000000 		.word	Capsense_sensorEnableMask
 1913              		.cfi_endproc
 1914              	.LFE62:
 1915              		.size	Capsense_DisableWidget, .-Capsense_DisableWidget
 1916              		.section	.text.Capsense_IIR4Filter,"ax",%progbits
 1917              		.align	2
 1918              		.global	Capsense_IIR4Filter
 1919              		.code	16
 1920              		.thumb_func
 1921              		.type	Capsense_IIR4Filter, %function
 1922              	Capsense_IIR4Filter:
 1923              	.LFB63:
1338:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1339:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1340:Generated_Source\PSoC4/Capsense_CSHL.c **** #if(Capsense_TOTAL_CENTROIDS_BASIC_COUNT)
1341:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
1342:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_FindMaximum
1343:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
1344:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1345:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
1346:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Finds the index of the maximum element within a defined centroid. Checks
1347:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_sensorSignal[] within a defined centroid and
1348:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  returns the index of the maximum element. The values below the finger threshold are
1349:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  ignored.
1350:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The centroid is defined by offset of the first element and a number of elements - count.
1351:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The diplexed centroid requires at least two consecutive elements above
1352:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  FingerThreshold to find the index of the maximum element.
1353:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1354:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
1355:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  offset:  Start index of centroid in Capsense_sensorSignal[] array.
1356:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  count:   number of elements within centroid.
1357:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  fingerThreshold:  Finger threshold.
1358:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  diplex:   pointer to diplex table.
1359:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1360:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
1361:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns the index of the maximum element within a defined centroid.
1362:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  If the index of the maximum element isn't found it returns 0xFF.
1363:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1364:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
1365:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_startOfSlider[] - contains the index of the first slider element
1366:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1367:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1368:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 59


1369:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1370:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1371:Generated_Source\PSoC4/Capsense_CSHL.c ****     #if (Capsense_IS_DIPLEX_SLIDER)
1372:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 Capsense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 *d
1373:Generated_Source\PSoC4/Capsense_CSHL.c ****     #else
1374:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 Capsense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
1375:Generated_Source\PSoC4/Capsense_CSHL.c ****     #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1376:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1377:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 i;
1378:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1379:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 curPos = 0u;
1380:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* No centroid at Start */
1381:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 curCntrdSize = 0u;
1382:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 curCtrdStartPos = Capsense_MAXIMUM_CENTROID;
1383:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Biggest centroid is zero */
1384:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
1385:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
1386:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1387:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 maximum = Capsense_MAXIMUM_CENTROID;
1388:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1389:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 temp = 0u;
1390:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 *startOfSlider = &Capsense_sensorSignal[offset];
1391:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1392:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1393:Generated_Source\PSoC4/Capsense_CSHL.c ****             if(diplex != 0u)
1394:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1395:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Initialize */
1396:Generated_Source\PSoC4/Capsense_CSHL.c ****                 i = 0u;
1397:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1398:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Make slider x2 as Diplexed */
1399:Generated_Source\PSoC4/Capsense_CSHL.c ****                 count <<= 1u;
1400:Generated_Source\PSoC4/Capsense_CSHL.c ****                 while(1u)
1401:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1402:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
1403:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1404:Generated_Source\PSoC4/Capsense_CSHL.c ****                         if (curCtrdStartPos == Capsense_MAXIMUM_CENTROID)
1405:Generated_Source\PSoC4/Capsense_CSHL.c ****                         {
1406:Generated_Source\PSoC4/Capsense_CSHL.c ****                             /* Start of centroid */
1407:Generated_Source\PSoC4/Capsense_CSHL.c ****                             curCtrdStartPos = i;
1408:Generated_Source\PSoC4/Capsense_CSHL.c ****                             curCntrdSize++;
1409:Generated_Source\PSoC4/Capsense_CSHL.c ****                         }
1410:Generated_Source\PSoC4/Capsense_CSHL.c ****                         else
1411:Generated_Source\PSoC4/Capsense_CSHL.c ****                         {
1412:Generated_Source\PSoC4/Capsense_CSHL.c ****                             curCntrdSize++;
1413:Generated_Source\PSoC4/Capsense_CSHL.c ****                         }
1414:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1415:Generated_Source\PSoC4/Capsense_CSHL.c ****                     else   /* Select biggest and indicate zero start */
1416:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1417:Generated_Source\PSoC4/Capsense_CSHL.c ****                         if(curCntrdSize > 0u)
1418:Generated_Source\PSoC4/Capsense_CSHL.c ****                         {
1419:Generated_Source\PSoC4/Capsense_CSHL.c ****                             /* We are at the end of current */
1420:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
1421:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1422:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
1423:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
1424:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1425:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 60


1426:Generated_Source\PSoC4/Capsense_CSHL.c ****                             curCntrdSize = 0u;
1427:Generated_Source\PSoC4/Capsense_CSHL.c ****                             curCtrdStartPos = Capsense_MAXIMUM_CENTROID;
1428:Generated_Source\PSoC4/Capsense_CSHL.c ****                         }
1429:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1430:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1431:Generated_Source\PSoC4/Capsense_CSHL.c ****                     i++;
1432:Generated_Source\PSoC4/Capsense_CSHL.c ****                     curPos = diplex[i];
1433:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if(i == count)
1434:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1435:Generated_Source\PSoC4/Capsense_CSHL.c ****                         break;
1436:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1437:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1438:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1439:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Find biggest centroid if two are same size, last one wins
1440:Generated_Source\PSoC4/Capsense_CSHL.c ****                        We are at the end of current */
1441:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize)
1442:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1443:Generated_Source\PSoC4/Capsense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
1444:Generated_Source\PSoC4/Capsense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
1445:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1446:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1447:Generated_Source\PSoC4/Capsense_CSHL.c ****             else
1448:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1449:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Without diplexing */
1450:Generated_Source\PSoC4/Capsense_CSHL.c ****                 biggestCtrdSize = count;
1451:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1452:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1453:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1454:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Check centroid size */
1455:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if (Capsense_IS_NON_DIPLEX_SLIDER)
1456:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
1457:Generated_Source\PSoC4/Capsense_CSHL.c ****             #else
1458:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
1459:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (Capsense_IS_NON_DIPLEX_SLIDER) */
1460:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1461:Generated_Source\PSoC4/Capsense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
1462:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1463:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (Capsense_IS_DIPLEX_SLIDER && Capsense_IS_NON_DIPLEX_SLIDER)
1464:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (diplex == 0u)
1465:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1466:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 curPos = i;
1467:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1468:Generated_Source\PSoC4/Capsense_CSHL.c ****                             else
1469:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1470:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 curPos = diplex[i];
1471:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1472:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #elif (Capsense_IS_DIPLEX_SLIDER)
1473:Generated_Source\PSoC4/Capsense_CSHL.c ****                             curPos = diplex[i];
1474:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (Capsense_IS_DIPLEX_SLIDER && Capsense_IS_NON_DIPLEX_SLIDER) */
1475:Generated_Source\PSoC4/Capsense_CSHL.c ****                         /* Looking for greater element within centroid */
1476:Generated_Source\PSoC4/Capsense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
1477:Generated_Source\PSoC4/Capsense_CSHL.c ****                         {
1478:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
1479:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1480:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 maximum = i;
1481:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 temp = startOfSlider[curPos];
1482:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 61


1483:Generated_Source\PSoC4/Capsense_CSHL.c ****                         }
1484:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1485:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1486:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
1487:Generated_Source\PSoC4/Capsense_CSHL.c ****             for (i = 0u; i < count; i++)
1488:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1489:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Looking for greater element within centroid */
1490:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
1491:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1492:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if(startOfSlider[i] > temp)
1493:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1494:Generated_Source\PSoC4/Capsense_CSHL.c ****                         maximum = i;
1495:Generated_Source\PSoC4/Capsense_CSHL.c ****                         temp = startOfSlider[i];
1496:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1497:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1498:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1499:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1500:Generated_Source\PSoC4/Capsense_CSHL.c ****         return (maximum);
1501:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1502:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1503:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1504:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
1505:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_CalcCentroid
1506:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
1507:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1508:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
1509:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns a position value calculated according to the index of the maximum element and API
1510:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  resolution.
1511:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1512:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
1513:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  type:  widget type.
1514:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  diplex:  pointer to diplex table.
1515:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1516:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  offset:   Start index of centroid in Capsense_sensorSignal[] array.
1517:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  count:    Number of elements within centroid.
1518:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1519:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  API resolution.
1520:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  noiseThreshold:  Noise threshold.
1521:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1522:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
1523:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns a position value of the slider.
1524:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1525:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1526:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1527:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1528:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1529:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_TOTAL_TRACKPAD_GESTURES_COUNT > 0u)
1530:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 Capsense_CalcCentroid(uint8 maximum, uint8 offset,
1531:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         uint8 count, uint32 resolution, uint8 noiseThreshold)
1532:Generated_Source\PSoC4/Capsense_CSHL.c **** #else
1533:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint8 Capsense_CalcCentroid(uint8 maximum, uint8 offset,
1534:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         uint8 count, uint16 resolution, uint8 noiseThreshold)
1535:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TOTAL_TRACKPAD_GESTURES_COUNT > 0u) */
1536:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1537:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if ((Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_TOUCH_PADS_BASIC_COUNT >
1538:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posPrev;
1539:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posNext;
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 62


1540:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* ((Capsense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (Capsense_TOTAL_TOUCH_PADS_BASIC_COU
1541:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1542:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Helps during centroid calculation */
1543:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_TOTAL_CENTROIDS_BASIC_COUNT)
1544:Generated_Source\PSoC4/Capsense_CSHL.c ****             static uint8 Capsense_centroid[3u];
1545:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif  /* (Capsense_TOTAL_CENTROIDS_BASIC_COUNT) */
1546:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1547:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1548:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 pos;
1549:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1550:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1551:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 position;
1552:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 numerator;
1553:Generated_Source\PSoC4/Capsense_CSHL.c ****         int32 denominator;
1554:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1555:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8  *startOfSlider = &Capsense_sensorSignal[offset];
1556:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1557:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if ((Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_TOUCH_PADS_BASIC_COUNT >
1558:Generated_Source\PSoC4/Capsense_CSHL.c ****             posPrev = 0u;
1559:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* ((Capsense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (Capsense_TOTAL_TOUCH_PADS_BASIC_COU
1560:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1561:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_ADD_SLIDER_TYPE)
1562:Generated_Source\PSoC4/Capsense_CSHL.c ****             if(type == Capsense_TYPE_RADIAL_SLIDER)
1563:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1564:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_ADD_SLIDER_TYPE) */
1565:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1566:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if (Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1567:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Copy Signal to the centroid array */
1568:Generated_Source\PSoC4/Capsense_CSHL.c ****                 Capsense_centroid[Capsense_POS] = startOfSlider[maximum];
1569:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1570:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1571:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1572:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1573:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_PREV] = startOfSlider[count - 1u];
1574:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_NEXT] = startOfSlider[1u];
1575:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1576:Generated_Source\PSoC4/Capsense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1577:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1578:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_PREV] = startOfSlider[maximum - 1u];
1579:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_NEXT] = startOfSlider[0u];
1580:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1581:Generated_Source\PSoC4/Capsense_CSHL.c ****                 else                                /* Not first Not last */
1582:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1583:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_PREV] = startOfSlider[maximum - 1u];
1584:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_NEXT] = startOfSlider[maximum + 1u];
1585:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1586:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1587:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1588:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_ADD_SLIDER_TYPE)
1589:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1590:Generated_Source\PSoC4/Capsense_CSHL.c ****             else
1591:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1592:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_ADD_SLIDER_TYPE) */
1593:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1594:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if ((Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_TOUCH_PADS_BASIC_COU
1595:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #if (Capsense_IS_DIPLEX_SLIDER && Capsense_IS_NON_DIPLEX_SLIDER)
1596:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Calculate next and previous near to maximum */
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 63


1597:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if(diplex == 0u)
1598:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1599:Generated_Source\PSoC4/Capsense_CSHL.c ****                         pos     = maximum;
1600:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posPrev = maximum - 1u;
1601:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posNext = maximum + 1u;
1602:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1603:Generated_Source\PSoC4/Capsense_CSHL.c ****                     else
1604:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1605:Generated_Source\PSoC4/Capsense_CSHL.c ****                         pos     = diplex[maximum];
1606:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1607:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1608:Generated_Source\PSoC4/Capsense_CSHL.c ****                         count <<= 1u;
1609:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1610:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #elif (Capsense_IS_DIPLEX_SLIDER)
1611:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1612:Generated_Source\PSoC4/Capsense_CSHL.c ****                     pos     = diplex[maximum];
1613:Generated_Source\PSoC4/Capsense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1614:Generated_Source\PSoC4/Capsense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1615:Generated_Source\PSoC4/Capsense_CSHL.c ****                     count <<= 1u;
1616:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #else
1617:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1618:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if (maximum >= 1u)
1619:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1620:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posPrev = maximum - 1u;
1621:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1622:Generated_Source\PSoC4/Capsense_CSHL.c ****                     posNext = maximum + 1u;
1623:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #endif /* (Capsense_IS_DIPLEX_SLIDER && Capsense_IS_NON_DIPLEX_SLIDER) */
1624:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1625:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Copy Signal to the centroid array */
1626:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #if (Capsense_IS_DIPLEX_SLIDER)
1627:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS] = startOfSlider[pos];
1628:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #else
1629:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS] = startOfSlider[maximum];
1630:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1631:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1632:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1633:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1634:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1635:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_PREV] = 0u;
1636:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_NEXT] = startOfSlider[posNext];
1637:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1638:Generated_Source\PSoC4/Capsense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1639:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1640:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_PREV] = startOfSlider[posPrev];
1641:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_NEXT] = 0u;
1642:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1643:Generated_Source\PSoC4/Capsense_CSHL.c ****                 else                                /* Not first Not last */
1644:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1645:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_PREV] = startOfSlider[posPrev];
1646:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_centroid[Capsense_POS_NEXT] = startOfSlider[posNext];
1647:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1648:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* ((Capsense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(Capsense_TOTAL_TOUCH_PADS_BASIC_C
1649:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1650:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_ADD_SLIDER_TYPE)
1651:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1652:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_ADD_SLIDER_TYPE) */
1653:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 64


1654:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Subtract noiseThreshold */
1655:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(Capsense_centroid[Capsense_POS_PREV] > noiseThreshold)
1656:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1657:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_centroid[Capsense_POS_PREV] -= noiseThreshold;
1658:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1659:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
1660:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1661:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_centroid[Capsense_POS_PREV] = 0u;
1662:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1663:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1664:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Maximum always greater than fingerThreshold, so greater than noiseThreshold */
1665:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_centroid[Capsense_POS] -= noiseThreshold;
1666:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1667:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Subtract noiseThreshold */
1668:Generated_Source\PSoC4/Capsense_CSHL.c ****         if(Capsense_centroid[Capsense_POS_NEXT] > noiseThreshold)
1669:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1670:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_centroid[Capsense_POS_NEXT] -= noiseThreshold;
1671:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1672:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
1673:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1674:Generated_Source\PSoC4/Capsense_CSHL.c ****             Capsense_centroid[Capsense_POS_NEXT] = 0u;
1675:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1676:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1677:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1678:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Si+1 - Si-1 */
1679:Generated_Source\PSoC4/Capsense_CSHL.c ****         numerator = (uint32) Capsense_centroid[Capsense_POS_NEXT] -
1680:Generated_Source\PSoC4/Capsense_CSHL.c ****                     (uint32) Capsense_centroid[Capsense_POS_PREV];
1681:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1682:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1683:Generated_Source\PSoC4/Capsense_CSHL.c ****         denominator = (int32) Capsense_centroid[Capsense_POS_PREV] +
1684:Generated_Source\PSoC4/Capsense_CSHL.c ****                       (int32) Capsense_centroid[Capsense_POS] +
1685:Generated_Source\PSoC4/Capsense_CSHL.c ****                       (int32) Capsense_centroid[Capsense_POS_NEXT];
1686:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1687:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* (numerator/denominator) + maximum */
1688:Generated_Source\PSoC4/Capsense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1689:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1690:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if(Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1691:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Only required for RADIAL Slider */
1692:Generated_Source\PSoC4/Capsense_CSHL.c ****             if(denominator < 0)
1693:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1694:Generated_Source\PSoC4/Capsense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1695:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1696:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1697:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1698:Generated_Source\PSoC4/Capsense_CSHL.c ****         denominator *= (int16)resolution;
1699:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1700:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Round result and put it to uint8 */
1701:Generated_Source\PSoC4/Capsense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + Capsense_CENTROID_ROUND_VALUE));
1702:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1703:Generated_Source\PSoC4/Capsense_CSHL.c ****         return (position);
1704:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1705:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TOTAL_CENTROIDS_BASIC_COUNT) */
1706:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1707:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1708:Generated_Source\PSoC4/Capsense_CSHL.c **** #if((Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1709:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
1710:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_GetCentroidPos
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 65


1711:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
1712:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1713:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
1714:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Checks the Capsense_Signal[ ] array for a centroid within
1715:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1716:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1717:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  result if enabled.
1718:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1719:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
1720:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget:  Widget number.
1721:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1722:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  #define Capsense_"widget_name"__LS           5
1723:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1724:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
1725:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns a position value of the linear slider.
1726:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1727:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
1728:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
1729:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1730:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1731:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1732:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1733:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1734:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1735:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1736:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1737:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1738:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Note:
1739:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1740:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1741:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1742:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  that noise will not generate a false centroid.
1743:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1744:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_GetCentroidPos(uint32 widget)
1745:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1746:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1747:Generated_Source\PSoC4/Capsense_CSHL.c ****             const uint8 *diplex;
1748:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1749:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1750:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (0u != Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1751:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posIndex;
1752:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 firstTimeIndex = Capsense_posFiltersData[widget];
1753:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posFiltersMask = Capsense_posFiltersMask[widget];
1754:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (0u != Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1755:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1756:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if ((0u != (Capsense_MEDIAN_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1757:Generated_Source\PSoC4/Capsense_CSHL.c ****              (0u != (Capsense_AVERAGING_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1758:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 tempPos;
1759:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* ((0u != (Capsense_MEDIAN_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1760:Generated_Source\PSoC4/Capsense_CSHL.c ****                *   (0u != (Capsense_AVERAGING_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1761:Generated_Source\PSoC4/Capsense_CSHL.c ****                */
1762:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1763:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 maximum;
1764:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint16 position;
1765:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 offset = Capsense_rawDataIndex[widget];
1766:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 count = Capsense_numberOfSensors[widget];
1767:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 66


1768:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1769:Generated_Source\PSoC4/Capsense_CSHL.c ****             if(widget < Capsense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1770:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1771:Generated_Source\PSoC4/Capsense_CSHL.c ****                 maximum = Capsense_diplexTable[widget];
1772:Generated_Source\PSoC4/Capsense_CSHL.c ****                 diplex = &Capsense_diplexTable[maximum];
1773:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1774:Generated_Source\PSoC4/Capsense_CSHL.c ****             else
1775:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
1776:Generated_Source\PSoC4/Capsense_CSHL.c ****                 diplex = 0u;
1777:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
1778:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1779:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1780:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Find Maximum within centroid */
1781:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1782:Generated_Source\PSoC4/Capsense_CSHL.c ****             maximum = Capsense_FindMaximum(offset, count, (uint8)Capsense_fingerThreshold[widget], 
1783:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
1784:Generated_Source\PSoC4/Capsense_CSHL.c ****             maximum = Capsense_FindMaximum(offset, count, (uint8)Capsense_fingerThreshold[widget]);
1785:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1786:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1787:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (maximum != 0xFFu)
1788:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1789:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Calculate centroid */
1790:Generated_Source\PSoC4/Capsense_CSHL.c ****             position = (uint16) Capsense_CalcCentroid(maximum,
1791:Generated_Source\PSoC4/Capsense_CSHL.c ****                          offset, count, Capsense_centroidMult[widget], Capsense_noiseThreshold[widg
1792:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1793:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if (0u != Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1794:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1795:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (0u != (posFiltersMask & Capsense_ANY_POS_FILTER))
1796:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1797:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Calculate position to store filters data */
1798:Generated_Source\PSoC4/Capsense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1799:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1800:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if (0u == Capsense_posFiltersData[firstTimeIndex])
1801:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1802:Generated_Source\PSoC4/Capsense_CSHL.c ****                         /* Init filters */
1803:Generated_Source\PSoC4/Capsense_CSHL.c ****                         Capsense_posFiltersData[posIndex] = (uint8) position;
1804:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if ((0u != (Capsense_MEDIAN_FILTER & \
1805:Generated_Source\PSoC4/Capsense_CSHL.c ****                                      Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1806:Generated_Source\PSoC4/Capsense_CSHL.c ****                              (0u != (Capsense_AVERAGING_FILTER & \
1807:Generated_Source\PSoC4/Capsense_CSHL.c ****                                      Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1808:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1809:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if ( (0u != (posFiltersMask & Capsense_MEDIAN_FILTER)) ||
1810:Generated_Source\PSoC4/Capsense_CSHL.c ****                                  (0u != (posFiltersMask & Capsense_AVERAGING_FILTER)) )
1811:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1812:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex + 1u] = (uint8) position;
1813:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1814:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* ((0u != (Capsense_MEDIAN_FILTER & \
1815:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1816:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *   (0u != (Capsense_AVERAGING_FILTER & \
1817:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1818:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
1819:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1820:Generated_Source\PSoC4/Capsense_CSHL.c ****                         Capsense_posFiltersData[firstTimeIndex] = 1u;
1821:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1822:Generated_Source\PSoC4/Capsense_CSHL.c ****                     else
1823:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1824:Generated_Source\PSoC4/Capsense_CSHL.c ****                         /* Do filtering */
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 67


1825:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_MEDIAN_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MA
1826:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_MEDIAN_FILTER))
1827:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1828:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 tempPos = (uint8) position;
1829:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_MedianFilter(position,
1830:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                 (uint16)Capsense_posFiltersData[pos
1831:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                 (uint16)Capsense_posFiltersData[pos
1832:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex + 1u] =
1833:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                              Capsense_posFiltersDat
1834:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = tempPos;
1835:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1836:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /*(0u != (Capsense_MEDIAN_FILTER &
1837:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *         Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1838:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
1839:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1840:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if(0u!=(Capsense_AVERAGING_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MA
1841:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_AVERAGING_FILTER))
1842:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1843:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 tempPos = (uint8) position;
1844:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_AveragingFilter(position,
1845:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                 (uint16)Capsense_posFiltersData[pos
1846:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                 (uint16)Capsense_posFiltersData[pos
1847:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex+1u]=Capsense_posFiltersData[posInd
1848:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = tempPos;
1849:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1850:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_AVERAGING_FILTER & \
1851:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1852:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
1853:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1854:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_IIR2_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK
1855:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_IIR2_FILTER))
1856:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1857:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_IIR2Filter(position,
1858:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
1859:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = (uint8) position;
1860:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1861:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_IIR2_FILTER & \
1862:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *          Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1863:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
1864:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1865:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_IIR4_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK
1866:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_IIR4_FILTER))
1867:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1868:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_IIR4Filter(position,
1869:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
1870:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = (uint8) position;
1871:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1872:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_IIR4_FILTER & \
1873:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *          Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1874:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
1875:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1876:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_JITTER_FILTER & Capsense_LINEAR_SLIDERS_POS_FILTERS_MA
1877:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_JITTER_FILTER))
1878:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1879:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_JitterFilter(position,
1880:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
1881:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = (uint8) position;
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 68


1882:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
1883:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_JITTER_FILTER & \
1884:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1885:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
1886:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
1887:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1888:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (0u != Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1889:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1890:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1891:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
1892:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1893:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Maximum wasn't found */
1894:Generated_Source\PSoC4/Capsense_CSHL.c ****             position = 0xFFFFu;
1895:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1896:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if(0u != Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1897:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Reset filters */
1898:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if(0u != (posFiltersMask & Capsense_ANY_POS_FILTER))
1899:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1900:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_posFiltersData[firstTimeIndex] = 0u;
1901:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
1902:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (0u != Capsense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1903:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
1904:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1905:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1906:Generated_Source\PSoC4/Capsense_CSHL.c ****         return (position);
1907:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
1908:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ((Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1909:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1910:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1911:Generated_Source\PSoC4/Capsense_CSHL.c **** #if((Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1912:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
1913:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_GetRadialCentroidPos
1914:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
1915:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1916:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
1917:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Checks the Capsense_Signal[ ] array for a centroid within
1918:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1919:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1920:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  result if enabled.
1921:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1922:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
1923:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget:  Widget number.
1924:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1925:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  #define Capsense_"widget_name"__RS           5
1926:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1927:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
1928:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns a position value of the radial slider.
1929:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1930:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
1931:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
1932:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1933:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
1934:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1935:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1936:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1937:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1938:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 69


1939:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1940:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Note:
1941:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1942:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1943:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1944:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  that noise will not generate a false centroid.
1945:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
1946:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
1947:Generated_Source\PSoC4/Capsense_CSHL.c ****      uint16 Capsense_GetRadialCentroidPos(uint32 widget)
1948:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
1949:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (0u != Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1950:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posIndex;
1951:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 firstTimeIndex = Capsense_posFiltersData[widget];
1952:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posFiltersMask = Capsense_posFiltersMask[widget];
1953:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (0u != Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1954:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1955:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if ((0u != (Capsense_MEDIAN_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1956:Generated_Source\PSoC4/Capsense_CSHL.c ****              (0u != (Capsense_AVERAGING_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1957:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 tempPos;
1958:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* ((0u != (Capsense_MEDIAN_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1959:Generated_Source\PSoC4/Capsense_CSHL.c ****                *   (0u != (Capsense_AVERAGING_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1960:Generated_Source\PSoC4/Capsense_CSHL.c ****                */
1961:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1962:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 maximum;
1963:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint16 position;
1964:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 offset = Capsense_rawDataIndex[widget];
1965:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 count = Capsense_numberOfSensors[widget];
1966:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1967:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Find Maximum within centroid */
1968:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
1969:Generated_Source\PSoC4/Capsense_CSHL.c ****             maximum = Capsense_FindMaximum(offset, count, (uint8)Capsense_fingerThreshold[widget], 
1970:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
1971:Generated_Source\PSoC4/Capsense_CSHL.c ****             maximum = Capsense_FindMaximum(offset, count, (uint8)Capsense_fingerThreshold[widget]);
1972:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
1973:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1974:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (maximum != Capsense_MAXIMUM_CENTROID)
1975:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
1976:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Calculate centroid */
1977:Generated_Source\PSoC4/Capsense_CSHL.c ****             position = (uint16) Capsense_CalcCentroid(maximum,
1978:Generated_Source\PSoC4/Capsense_CSHL.c ****                          offset, count, Capsense_centroidMult[widget], Capsense_noiseThreshold[widg
1979:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1980:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if (0u != Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1981:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1982:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (0u != (posFiltersMask & Capsense_ANY_POS_FILTER))
1983:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
1984:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Calculate position to store filters data */
1985:Generated_Source\PSoC4/Capsense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1986:Generated_Source\PSoC4/Capsense_CSHL.c **** 
1987:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if (0u == Capsense_posFiltersData[firstTimeIndex])
1988:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
1989:Generated_Source\PSoC4/Capsense_CSHL.c ****                         /* Init filters */
1990:Generated_Source\PSoC4/Capsense_CSHL.c ****                         Capsense_posFiltersData[posIndex] = (uint8) position;
1991:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if ((0u != (Capsense_MEDIAN_FILTER & \
1992:Generated_Source\PSoC4/Capsense_CSHL.c ****                                      Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1993:Generated_Source\PSoC4/Capsense_CSHL.c ****                              (0u != (Capsense_AVERAGING_FILTER & \
1994:Generated_Source\PSoC4/Capsense_CSHL.c ****                                      Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1995:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 70


1996:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if ( (0u != (posFiltersMask & Capsense_MEDIAN_FILTER))  ||
1997:Generated_Source\PSoC4/Capsense_CSHL.c ****                                  (0u != (posFiltersMask & Capsense_AVERAGING_FILTER)) )
1998:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
1999:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex + 1u] = (uint8) position;
2000:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
2001:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* ((0u != (Capsense_MEDIAN_FILTER & \
2002:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
2003:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *   (0u != (Capsense_AVERAGING_FILTER & \
2004:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
2005:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
2006:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2007:Generated_Source\PSoC4/Capsense_CSHL.c ****                         Capsense_posFiltersData[firstTimeIndex] = 1u;
2008:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
2009:Generated_Source\PSoC4/Capsense_CSHL.c ****                     else
2010:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
2011:Generated_Source\PSoC4/Capsense_CSHL.c ****                         /* Do filtering */
2012:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_MEDIAN_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MA
2013:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_MEDIAN_FILTER))
2014:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
2015:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 tempPos = (uint8) position;
2016:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_MedianFilter(position,
2017:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                         Capsense_posFiltersData[pos
2018:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                         Capsense_posFiltersData[pos
2019:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex + 1u] =
2020:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                               Capsense_posFiltersDa
2021:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = tempPos;
2022:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
2023:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_MEDIAN_FILTER &
2024:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *          Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2025:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
2026:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2027:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_AVERAGING_FILTER & \
2028:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2029:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_AVERAGING_FILTER))
2030:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
2031:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 tempPos = (uint8) position;
2032:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_AveragingFilter(position,
2033:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                        Capsense_posFiltersData[posI
2034:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                        Capsense_posFiltersData[posI
2035:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex+1u]= Capsense_posFiltersData[posIn
2036:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = tempPos;
2037:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
2038:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_AVERAGING_FILTER & \
2039:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *          Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2040:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
2041:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2042:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_IIR2_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK
2043:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_IIR2_FILTER))
2044:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
2045:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_IIR2Filter(position,
2046:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
2047:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = (uint8) position;
2048:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
2049:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_IIR2_FILTER &
2050:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *          Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2051:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
2052:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 71


2053:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_IIR4_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK
2054:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_IIR4_FILTER))
2055:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
2056:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_IIR4Filter(position,
2057:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
2058:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = (uint8) position;
2059:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
2060:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_IIR4_FILTER &
2061:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *          Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2062:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
2063:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2064:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #if (0u != (Capsense_JITTER_FILTER & Capsense_RADIAL_SLIDERS_POS_FILTERS_MA
2065:Generated_Source\PSoC4/Capsense_CSHL.c ****                             if (0u != (posFiltersMask & Capsense_JITTER_FILTER))
2066:Generated_Source\PSoC4/Capsense_CSHL.c ****                             {
2067:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 position = Capsense_JitterFilter(position,
2068:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                          Capsense_posFiltersData[po
2069:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 Capsense_posFiltersData[posIndex] = (uint8) position;
2070:Generated_Source\PSoC4/Capsense_CSHL.c ****                             }
2071:Generated_Source\PSoC4/Capsense_CSHL.c ****                         #endif /* (0u != (Capsense_JITTER_FILTER &
2072:Generated_Source\PSoC4/Capsense_CSHL.c ****                                *           Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2073:Generated_Source\PSoC4/Capsense_CSHL.c ****                                */
2074:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
2075:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
2076:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (0u != Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2077:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2078:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2079:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
2080:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
2081:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Maximum was not found */
2082:Generated_Source\PSoC4/Capsense_CSHL.c ****             position = 0xFFFFu;
2083:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2084:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if (0u != Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK)
2085:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Reset filters */
2086:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if((posFiltersMask & Capsense_ANY_POS_FILTER) != 0u)
2087:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
2088:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_posFiltersData[firstTimeIndex] = 0u;
2089:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
2090:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (0u != Capsense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2091:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2092:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2093:Generated_Source\PSoC4/Capsense_CSHL.c ****         return (position);
2094:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2095:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ((Capsense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (Capsense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
2096:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2097:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2098:Generated_Source\PSoC4/Capsense_CSHL.c **** #if(Capsense_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u)
2099:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2100:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_GetTouchCentroidPos
2101:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2102:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2103:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2104:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  If a finger is present on a touchpad, this function calculates the X and Y
2105:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  position of the finger by calculating the centroids within touchpad specified
2106:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  range. The X and Y positions are calculated according to the API resolutions set in the
2107:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  CapSense customizer. Returns 1 if a finger is on the touchpad.
2108:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The position filter is applied to the result if enabled.
2109:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 72


2110:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  customizer.
2111:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2112:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2113:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget:  Widget number.
2114:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
2115:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  #define Capsense_"widget_name"__TP            5
2116:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2117:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
2118:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  result of calculation of X and Y position are stored.
2119:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  pos[0u]  - position of X
2120:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  pos[1u]  - position of Y
2121:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2122:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2123:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
2124:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2125:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2126:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2127:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2128:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2129:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   There are no checks of the widget type argument provided to this function.
2130:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
2131:Generated_Source\PSoC4/Capsense_CSHL.c ****     *   calculations.
2132:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2133:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2134:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 Capsense_GetTouchCentroidPos(uint32 widget, uint16* pos)
2135:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2136:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (0u != Capsense_TOUCH_PADS_POS_FILTERS_MASK)
2137:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posXIndex;
2138:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posYIndex;
2139:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 firstTimeIndex = Capsense_posFiltersData[widget];
2140:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint8 posFiltersMask = Capsense_posFiltersMask[widget];
2141:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (0u != Capsense_TOUCH_PADS_POS_FILTERS_MASK) */
2142:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2143:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if ((0u != (Capsense_MEDIAN_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2144:Generated_Source\PSoC4/Capsense_CSHL.c ****              (0u != (Capsense_AVERAGING_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MASK)))
2145:Generated_Source\PSoC4/Capsense_CSHL.c ****             uint16 tempPos;
2146:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* ((0u != (Capsense_MEDIAN_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2147:Generated_Source\PSoC4/Capsense_CSHL.c ****                *   (0u != (Capsense_AVERAGING_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MASK)))
2148:Generated_Source\PSoC4/Capsense_CSHL.c ****                */
2149:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2150:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 MaxX;
2151:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 MaxY;
2152:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 posX;
2153:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 posY;
2154:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 touch = 0u;
2155:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 offset = Capsense_rawDataIndex[widget];
2156:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 count = Capsense_numberOfSensors[widget];
2157:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2158:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* Find Maximum within X centroid */
2159:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (Capsense_IS_DIPLEX_SLIDER)
2160:Generated_Source\PSoC4/Capsense_CSHL.c ****             MaxX = Capsense_FindMaximum(offset, count, Capsense_fingerThreshold[widget], 0u);
2161:Generated_Source\PSoC4/Capsense_CSHL.c ****         #else
2162:Generated_Source\PSoC4/Capsense_CSHL.c ****             MaxX = Capsense_FindMaximum(offset, count, Capsense_fingerThreshold[widget]);
2163:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (Capsense_IS_DIPLEX_SLIDER) */
2164:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2165:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (MaxX != Capsense_MAXIMUM_CENTROID)
2166:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 73


2167:Generated_Source\PSoC4/Capsense_CSHL.c ****             offset = Capsense_rawDataIndex[widget + 1u];
2168:Generated_Source\PSoC4/Capsense_CSHL.c ****             count = Capsense_numberOfSensors[widget + 1u];
2169:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2170:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Find Maximum within Y centroid */
2171:Generated_Source\PSoC4/Capsense_CSHL.c ****             #if (Capsense_IS_DIPLEX_SLIDER)
2172:Generated_Source\PSoC4/Capsense_CSHL.c ****                 MaxY = Capsense_FindMaximum(offset, count, Capsense_fingerThreshold[widget + 1u], 0
2173:Generated_Source\PSoC4/Capsense_CSHL.c ****             #else
2174:Generated_Source\PSoC4/Capsense_CSHL.c ****                 MaxY = Capsense_FindMaximum(offset, count, Capsense_fingerThreshold[widget + 1u]);
2175:Generated_Source\PSoC4/Capsense_CSHL.c ****             #endif /* (Capsense_IS_DIPLEX_SLIDER) */
2176:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2177:Generated_Source\PSoC4/Capsense_CSHL.c ****             if (MaxY != Capsense_MAXIMUM_CENTROID)
2178:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
2179:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* X and Y maximums are found = true touch */
2180:Generated_Source\PSoC4/Capsense_CSHL.c ****                 touch = 1u;
2181:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2182:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Calculate Y centroid */
2183:Generated_Source\PSoC4/Capsense_CSHL.c ****                 posY = Capsense_CalcCentroid(MaxY, offset, count,
2184:Generated_Source\PSoC4/Capsense_CSHL.c ****                             Capsense_centroidMult[widget + 1u], Capsense_noiseThreshold[widget + 1u
2185:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2186:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Calculate X centroid */
2187:Generated_Source\PSoC4/Capsense_CSHL.c ****                 offset = Capsense_rawDataIndex[widget];
2188:Generated_Source\PSoC4/Capsense_CSHL.c ****                 count = Capsense_numberOfSensors[widget];
2189:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2190:Generated_Source\PSoC4/Capsense_CSHL.c ****                 posX = Capsense_CalcCentroid(MaxX, offset, count,
2191:Generated_Source\PSoC4/Capsense_CSHL.c ****                             Capsense_centroidMult[widget],Capsense_noiseThreshold[widget]);
2192:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2193:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #if (0u != Capsense_TOUCH_PADS_POS_FILTERS_MASK)
2194:Generated_Source\PSoC4/Capsense_CSHL.c ****                     /* Check if this TP has enabled filters */
2195:Generated_Source\PSoC4/Capsense_CSHL.c ****                     if (0u != (posFiltersMask & Capsense_ANY_POS_FILTER))
2196:Generated_Source\PSoC4/Capsense_CSHL.c ****                     {
2197:Generated_Source\PSoC4/Capsense_CSHL.c ****                         /* Calculate position to store filters data */
2198:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
2199:Generated_Source\PSoC4/Capsense_CSHL.c ****                         posYIndex  = Capsense_posFiltersData[widget + 1u];
2200:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2201:Generated_Source\PSoC4/Capsense_CSHL.c ****                         if (0u == Capsense_posFiltersData[firstTimeIndex])
2202:Generated_Source\PSoC4/Capsense_CSHL.c ****                         {
2203:Generated_Source\PSoC4/Capsense_CSHL.c ****                             /* Init filters */
2204:Generated_Source\PSoC4/Capsense_CSHL.c ****                             Capsense_posFiltersData[posXIndex] = posX;
2205:Generated_Source\PSoC4/Capsense_CSHL.c ****                             Capsense_posFiltersData[posYIndex] = posY;
2206:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2207:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #if((0u != (Capsense_MEDIAN_FILTER & \
2208:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         Capsense_TOUCH_PADS_POS_FILTERS_MASK))|| \
2209:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 (0u != (Capsense_AVERAGING_FILTER & \
2210:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         Capsense_TOUCH_PADS_POS_FILTERS_MASK)))
2211:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2212:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 if ( (0u != (posFiltersMask & Capsense_MEDIAN_FILTER)) ||
2213:Generated_Source\PSoC4/Capsense_CSHL.c ****                                      (0u != (posFiltersMask & Capsense_AVERAGING_FILTER)) )
2214:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 {
2215:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex + 1u] = posX;
2216:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex + 1u] = posY;
2217:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 }
2218:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #endif /* ((0u != (Capsense_MEDIAN_FILTER & \
2219:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *           Capsense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2220:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *    (0u != (Capsense_AVERAGING_FILTER & \
2221:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *            Capsense_TOUCH_PADS_POS_FILTERS_MASK)))
2222:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    */
2223:Generated_Source\PSoC4/Capsense_CSHL.c **** 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 74


2224:Generated_Source\PSoC4/Capsense_CSHL.c ****                             Capsense_posFiltersData[firstTimeIndex] = 1u;
2225:Generated_Source\PSoC4/Capsense_CSHL.c ****                         }
2226:Generated_Source\PSoC4/Capsense_CSHL.c ****                         else
2227:Generated_Source\PSoC4/Capsense_CSHL.c ****                         {
2228:Generated_Source\PSoC4/Capsense_CSHL.c ****                             /* Do filtering */
2229:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #if (0u != (Capsense_MEDIAN_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MA
2230:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 if (0u != (posFiltersMask & Capsense_MEDIAN_FILTER))
2231:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 {
2232:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     tempPos = posX;
2233:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posX = (uint8) Capsense_MedianFilter(posX,
2234:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                       Capsense_posFiltersData[posXI
2235:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                       Capsense_posFiltersData[posXI
2236:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex + 1u] =
2237:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                              Capsense_posFiltersDat
2238:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex] = tempPos;
2239:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2240:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     tempPos = posY;
2241:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posY = (uint8) Capsense_MedianFilter(posY,
2242:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                        Capsense_posFiltersData[posY
2243:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                        Capsense_posFiltersData[posY
2244:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex + 1u] =
2245:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                              Capsense_posFiltersDat
2246:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex] = tempPos;
2247:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 }
2248:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2249:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #endif /* (0u != (Capsense_MEDIAN_FILTER & \
2250:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *          Capsense_TOUCH_PADS_POS_FILTERS_MASK))
2251:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    */
2252:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2253:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #if(0u !=(Capsense_AVERAGING_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_M
2254:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 if (0u != (posFiltersMask & Capsense_AVERAGING_FILTER))
2255:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 {
2256:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     tempPos = posX;
2257:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posX = (uint8) Capsense_AveragingFilter(posX,
2258:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                        Capsense_posFiltersData[posX
2259:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                        Capsense_posFiltersData[posX
2260:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex + 1u] =
2261:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                              Capsense_posFiltersDat
2262:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex] = tempPos;
2263:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2264:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     tempPos = posY;
2265:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posY = (uint8) Capsense_AveragingFilter(posY,
2266:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                       Capsense_posFiltersData[posYI
2267:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                       Capsense_posFiltersData[posYI
2268:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex + 1u] =
2269:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                             Capsense_posFiltersData
2270:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex] = tempPos;
2271:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 }
2272:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2273:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #endif /* (0u != (Capsense_AVERAGING_FILTER & \
2274:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *           Capsense_TOUCH_PADS_POS_FILTERS_MASK))
2275:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    */
2276:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2277:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #if (0u != (Capsense_IIR2_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MASK
2278:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 if (0u != (posFiltersMask & Capsense_IIR2_FILTER))
2279:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 {
2280:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posX = (uint8) Capsense_IIR2Filter(posX,
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 75


2281:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                            Capsense_posFiltersData[
2282:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex] = posX;
2283:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2284:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posY = (uint8) Capsense_IIR2Filter(posY,
2285:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                             Capsense_posFiltersData
2286:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex] = posY;
2287:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 }
2288:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2289:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #endif /* (0u != (Capsense_IIR2_FILTER & \
2290:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *          Capsense_TOUCH_PADS_POS_FILTERS_MASK))
2291:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    */
2292:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2293:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #if (0u != (Capsense_IIR4_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MASK
2294:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 if (0u != (posFiltersMask & Capsense_IIR4_FILTER))
2295:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 {
2296:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posX = (uint8) Capsense_IIR4Filter((uint16)posX,
2297:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
2298:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posXIndex] = posX;
2299:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2300:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     posY = (uint8) Capsense_IIR4Filter((uint16)posY,
2301:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                     (uint16)Capsense_posFiltersData
2302:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     Capsense_posFiltersData[posYIndex] = posY;
2303:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 }
2304:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2305:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #endif /* (0u != (Capsense_IIR4_FILTER & \
2306:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *           Capsense_TOUCH_PADS_POS_FILTERS_MASK))
2307:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    */
2308:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2309:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #if (0u != (Capsense_JITTER_FILTER & Capsense_TOUCH_PADS_POS_FILTERS_MA
2310:Generated_Source\PSoC4/Capsense_CSHL.c ****                                 if (0u != (posFiltersMask & Capsense_JITTER_FILTER))
2311:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     {
2312:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         posX = (uint8) Capsense_JitterFilter(posX,
2313:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                             Capsense_posFiltersData
2314:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         Capsense_posFiltersData[posXIndex] = posX;
2315:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2316:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         posY = (uint8) Capsense_JitterFilter(posY,
2317:Generated_Source\PSoC4/Capsense_CSHL.c ****                                                                             Capsense_posFiltersData
2318:Generated_Source\PSoC4/Capsense_CSHL.c ****                                         Capsense_posFiltersData[posYIndex] = posY;
2319:Generated_Source\PSoC4/Capsense_CSHL.c ****                                     }
2320:Generated_Source\PSoC4/Capsense_CSHL.c ****                             #endif /* (0u != (Capsense_JITTER_FILTER & \
2321:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    *           Capsense_TOUCH_PADS_POS_FILTERS_MASK))
2322:Generated_Source\PSoC4/Capsense_CSHL.c ****                                    */
2323:Generated_Source\PSoC4/Capsense_CSHL.c ****                         }
2324:Generated_Source\PSoC4/Capsense_CSHL.c ****                     }
2325:Generated_Source\PSoC4/Capsense_CSHL.c ****                 #endif /* (0u != Capsense_TOUCH_PADS_POS_FILTERS_MASK) */
2326:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2327:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Save positions */
2328:Generated_Source\PSoC4/Capsense_CSHL.c ****                 pos[0u] = posX;
2329:Generated_Source\PSoC4/Capsense_CSHL.c ****                 pos[1u] = posY;
2330:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
2331:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2332:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2333:Generated_Source\PSoC4/Capsense_CSHL.c ****         #if (0u != Capsense_TOUCH_PADS_POS_FILTERS_MASK)
2334:Generated_Source\PSoC4/Capsense_CSHL.c ****             if(touch == 0u)
2335:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
2336:Generated_Source\PSoC4/Capsense_CSHL.c ****                 /* Reset filters */
2337:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if ((posFiltersMask & Capsense_ANY_POS_FILTER) != 0u)
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 76


2338:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
2339:Generated_Source\PSoC4/Capsense_CSHL.c ****                     Capsense_posFiltersData[firstTimeIndex] = 0u;
2340:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
2341:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
2342:Generated_Source\PSoC4/Capsense_CSHL.c ****         #endif /* (0u != Capsense_TOUCH_PADS_POS_FILTERS_MASK) */
2343:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2344:Generated_Source\PSoC4/Capsense_CSHL.c ****         return (touch);
2345:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2346:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u) */
2347:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2348:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2349:Generated_Source\PSoC4/Capsense_CSHL.c **** #if ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER)) || \
2350:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_MEDIAN_FILTER)) || \
2351:Generated_Source\PSoC4/Capsense_CSHL.c ****       ((Capsense_TUNING_METHOD == Capsense__TUNING_AUTO)) )
2352:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2353:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_MedianFilter
2354:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2355:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2356:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2357:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the Median filter function.
2358:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the
2359:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  median value.
2360:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2361:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2362:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2363:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2364:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x3:  Before previous value.
2365:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2366:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2367:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns filtered value.
2368:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2369:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2370:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2371:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2372:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2373:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2374:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2375:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2376:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
2377:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2378:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint16 tmp;
2379:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2380:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (x1 > x2)
2381:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
2382:Generated_Source\PSoC4/Capsense_CSHL.c ****             tmp = x2;
2383:Generated_Source\PSoC4/Capsense_CSHL.c ****             x2 = x1;
2384:Generated_Source\PSoC4/Capsense_CSHL.c ****             x1 = tmp;
2385:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2386:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2387:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (x2 > x3)
2388:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
2389:Generated_Source\PSoC4/Capsense_CSHL.c ****             x2 = x3;
2390:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2391:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2392:Generated_Source\PSoC4/Capsense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
2393:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2394:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_MEDIAN_FILTER)) || \
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 77


2395:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_MEDIAN_FILTER)) || \
2396:Generated_Source\PSoC4/Capsense_CSHL.c ****       ((Capsense_TUNING_METHOD == Capsense__TUNING_AUTO)) ) */
2397:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2398:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2399:Generated_Source\PSoC4/Capsense_CSHL.c **** #if ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER)) || \
2400:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_AVERAGING_FILTER)) )
2401:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2402:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_AveragingFilter
2403:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2404:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2405:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2406:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the Averaging filter function.
2407:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of a position and
2408:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  reports the averaging value.
2409:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2410:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2411:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2412:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2413:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x3:  Before previous value.
2414:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2415:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2416:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns filtered value.
2417:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2418:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2419:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2420:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2421:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2422:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2423:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2424:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2425:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
2426:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2427:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
2428:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2429:Generated_Source\PSoC4/Capsense_CSHL.c ****         return ((uint16) tmp);
2430:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2431:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_AVERAGING_FILTER) || \
2432:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_AVERAGING_FILTER) ) */
2433:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2434:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2435:Generated_Source\PSoC4/Capsense_CSHL.c **** #if ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR2_FILTER)) || \
2436:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_IIR2_FILTER)) )
2437:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2438:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_IIR2Filter
2439:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2440:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2441:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2442:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
2443:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2444:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2445:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2446:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2447:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2448:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2449:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns filtered value.
2450:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2451:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 78


2452:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2453:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2454:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2455:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2456:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2457:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2458:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_IIR2Filter(uint16 x1, uint16 x2)
2459:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2460:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 tmp;
2461:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2462:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
2463:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
2464:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp >>= 1u;
2465:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2466:Generated_Source\PSoC4/Capsense_CSHL.c ****         return ((uint16) tmp);
2467:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2468:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR2_FILTER)) || \
2469:Generated_Source\PSoC4/Capsense_CSHL.c ****        *    (0u != (Capsense_POS_FILTERS_MASK & Capsense_IIR2_FILTER)) )
2470:Generated_Source\PSoC4/Capsense_CSHL.c ****        */
2471:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2472:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2473:Generated_Source\PSoC4/Capsense_CSHL.c **** #if ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR4_FILTER)) || \
2474:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_IIR4_FILTER)) )
2475:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2476:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_IIR4Filter
2477:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2478:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2479:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2480:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
2481:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2482:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2483:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2484:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2485:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2486:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2487:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns a filtered value.
2488:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2489:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2490:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2491:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2492:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2493:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2494:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2495:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2496:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_IIR4Filter(uint16 x1, uint16 x2)
2497:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 1924              		.loc 1 2497 0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 16
 1927              		@ frame_needed = 1, uses_anonymous_args = 0
 1928 0000 80B5     		push	{r7, lr}
 1929              		.cfi_def_cfa_offset 8
 1930              		.cfi_offset 7, -8
 1931              		.cfi_offset 14, -4
 1932 0002 84B0     		sub	sp, sp, #16
 1933              		.cfi_def_cfa_offset 24
 1934 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 79


 1935              		.cfi_def_cfa_register 7
 1936 0006 0200     		movs	r2, r0
 1937 0008 BB1D     		adds	r3, r7, #6
 1938 000a 1A80     		strh	r2, [r3]
 1939 000c 3B1D     		adds	r3, r7, #4
 1940 000e 0A1C     		adds	r2, r1, #0
 1941 0010 1A80     		strh	r2, [r3]
2498:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 tmp;
2499:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2500:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
2501:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1942              		.loc 1 2501 0
 1943 0012 BB1D     		adds	r3, r7, #6
 1944 0014 1A88     		ldrh	r2, [r3]
 1945 0016 3B1D     		adds	r3, r7, #4
 1946 0018 1B88     		ldrh	r3, [r3]
 1947 001a D318     		adds	r3, r2, r3
 1948 001c FB60     		str	r3, [r7, #12]
2502:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 1949              		.loc 1 2502 0
 1950 001e 3B1D     		adds	r3, r7, #4
 1951 0020 1B88     		ldrh	r3, [r3]
 1952 0022 5B00     		lsls	r3, r3, #1
 1953 0024 FA68     		ldr	r2, [r7, #12]
 1954 0026 D318     		adds	r3, r2, r3
 1955 0028 FB60     		str	r3, [r7, #12]
2503:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp >>= 2u;
 1956              		.loc 1 2503 0
 1957 002a FB68     		ldr	r3, [r7, #12]
 1958 002c 9B08     		lsrs	r3, r3, #2
 1959 002e FB60     		str	r3, [r7, #12]
2504:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2505:Generated_Source\PSoC4/Capsense_CSHL.c ****         return ((uint16) tmp);
 1960              		.loc 1 2505 0
 1961 0030 FB68     		ldr	r3, [r7, #12]
 1962 0032 9BB2     		uxth	r3, r3
2506:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 1963              		.loc 1 2506 0
 1964 0034 1800     		movs	r0, r3
 1965 0036 BD46     		mov	sp, r7
 1966 0038 04B0     		add	sp, sp, #16
 1967              		@ sp needed
 1968 003a 80BD     		pop	{r7, pc}
 1969              		.cfi_endproc
 1970              	.LFE63:
 1971              		.size	Capsense_IIR4Filter, .-Capsense_IIR4Filter
 1972              		.section	.text.Capsense_GetWidgetNumber,"ax",%progbits
 1973              		.align	2
 1974              		.global	Capsense_GetWidgetNumber
 1975              		.code	16
 1976              		.thumb_func
 1977              		.type	Capsense_GetWidgetNumber, %function
 1978              	Capsense_GetWidgetNumber:
 1979              	.LFB64:
2507:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR4_FILTER)) || \
2508:Generated_Source\PSoC4/Capsense_CSHL.c ****        *    (0u != (Capsense_POS_FILTERS_MASK & Capsense_IIR4_FILTER)) )
2509:Generated_Source\PSoC4/Capsense_CSHL.c ****        */
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 80


2510:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2511:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2512:Generated_Source\PSoC4/Capsense_CSHL.c **** #if ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_JITTER_FILTER)) || \
2513:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_POS_FILTERS_MASK & Capsense_JITTER_FILTER)) || \
2514:Generated_Source\PSoC4/Capsense_CSHL.c ****       (0u != (Capsense_TRACKPAD_GEST_POS_FILTERS_MASK & Capsense_JITTER_FILTER)))
2515:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2516:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: uint16 Capsense_JitterFilter
2517:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2518:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2519:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2520:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the Jitter filter function.
2521:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2522:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2523:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2524:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2525:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2526:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2527:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns filtered value.
2528:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2529:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2530:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2531:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2532:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2533:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2534:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2535:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2536:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_JitterFilter(uint16 x1, uint16 x2)
2537:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2538:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (x1 > x2)
2539:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
2540:Generated_Source\PSoC4/Capsense_CSHL.c ****             x1--;
2541:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2542:Generated_Source\PSoC4/Capsense_CSHL.c ****         else
2543:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
2544:Generated_Source\PSoC4/Capsense_CSHL.c ****             if (x1 < x2)
2545:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
2546:Generated_Source\PSoC4/Capsense_CSHL.c ****                 x1++;
2547:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
2548:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2549:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2550:Generated_Source\PSoC4/Capsense_CSHL.c ****         return x1;
2551:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2552:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* ( (0u != (Capsense_RAW_FILTER_MASK & Capsense_JITTER_FILTER)) || \
2553:Generated_Source\PSoC4/Capsense_CSHL.c ****        *    (0u != (Capsense_POS_FILTERS_MASK & Capsense_JITTER_FILTER)) )
2554:Generated_Source\PSoC4/Capsense_CSHL.c ****        *    (0u != (Capsense_TRACKPAD_GEST_POS_FILTERS_MASK & Capsense_JITTER_FILTER)) )
2555:Generated_Source\PSoC4/Capsense_CSHL.c ****        */
2556:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2557:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2558:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR8_FILTER))
2559:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2560:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_IIR8Filter
2561:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2562:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2563:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2564:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
2565:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Only applies for raw data.
2566:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 81


2567:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2568:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2569:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2570:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2571:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2572:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns filtered value.
2573:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2574:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2575:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2576:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2577:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2578:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2579:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2580:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2581:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_IIR8Filter(uint16 x1, uint16 x2)
2582:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2583:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 tmp;
2584:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2585:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* IIR = 1/8 Current Value + 7/8 Previous Value */
2586:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp = (uint32)x1;
2587:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp += (((uint32)x2 << 3u) - ((uint32)x2));
2588:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp >>= 3u;
2589:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2590:Generated_Source\PSoC4/Capsense_CSHL.c ****         return ((uint16) tmp);
2591:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2592:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR8_FILTER)) */
2593:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2594:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2595:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (0u != (Capsense_RAW_FILTER_MASK & Capsense_IIR16_FILTER))
2596:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2597:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_IIR16Filter
2598:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2599:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2600:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2601:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  This is the IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
2602:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Only applies for raw data.
2603:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2604:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2605:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x1:  Current value.
2606:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  x2:  Previous value.
2607:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2608:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2609:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns filtered value.
2610:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2611:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2612:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None.
2613:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2614:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2615:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2616:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2617:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2618:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint16 Capsense_IIR16Filter(uint16 x1, uint16 x2)
2619:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2620:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 tmp;
2621:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2622:Generated_Source\PSoC4/Capsense_CSHL.c ****         /* IIR = 1/16 Current Value + 15/16 Previous Value */
2623:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp = (uint32)x1;
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 82


2624:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp += (((uint32)x2 << 4u) - ((uint32)x2));
2625:Generated_Source\PSoC4/Capsense_CSHL.c ****         tmp >>= 4u;
2626:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2627:Generated_Source\PSoC4/Capsense_CSHL.c ****         return ((uint16) tmp);
2628:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2629:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (Capsense_RAW_FILTER_MASK & Capsense_IIR16_FILTER) */
2630:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2631:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2632:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (0u != (Capsense_TOTAL_MATRIX_BUTTONS_COUNT))
2633:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2634:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2635:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_GetMatrixButtonPos
2636:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2637:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2638:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2639:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Function calculates and returns a touch position (column and row) for the matrix
2640:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  button widget.
2641:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2642:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2643:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  widget:  widget number;
2644:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  pos:     pointer to an array of two uint8, where touch position will be
2645:Generated_Source\PSoC4/Capsense_CSHL.c ****     *           stored:
2646:Generated_Source\PSoC4/Capsense_CSHL.c ****     *           pos[0] - column position;
2647:Generated_Source\PSoC4/Capsense_CSHL.c ****     *           pos[1] - raw position.
2648:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2649:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2650:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
2651:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  cases.
2652:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2653:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2654:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_fingerThreshold[ ] - used to store the finger threshold for all widgets.
2655:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_sensorSignal[ ] - used to store a difference between the current value of
2656:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  raw data and a previous value of the baseline.
2657:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2658:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2659:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2660:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2661:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2662:Generated_Source\PSoC4/Capsense_CSHL.c ****     uint32 Capsense_GetMatrixButtonPos(uint32 widget, uint8* pos)
2663:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
2664:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 i;
2665:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint32 retVal = 0u;
2666:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint16 row_sig_max = 0u;
2667:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint16 col_sig_max = 0u;
2668:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 row_ind = 0u;
2669:Generated_Source\PSoC4/Capsense_CSHL.c ****         uint8 col_ind = 0u;
2670:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2671:Generated_Source\PSoC4/Capsense_CSHL.c ****         if (Capsense_CheckIsWidgetActive(widget) == 1u)
2672:Generated_Source\PSoC4/Capsense_CSHL.c ****         {
2673:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Find row number with maximal signal value */
2674:Generated_Source\PSoC4/Capsense_CSHL.c ****             for(i = Capsense_rawDataIndex[widget]; i < (Capsense_rawDataIndex[widget] + \
2675:Generated_Source\PSoC4/Capsense_CSHL.c ****                  Capsense_numberOfSensors[widget]); i++)
2676:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
2677:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (Capsense_sensorSignal[i] > col_sig_max)
2678:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
2679:Generated_Source\PSoC4/Capsense_CSHL.c ****                     col_ind = i;
2680:Generated_Source\PSoC4/Capsense_CSHL.c ****                     col_sig_max = Capsense_sensorSignal[i];
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 83


2681:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
2682:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
2683:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2684:Generated_Source\PSoC4/Capsense_CSHL.c ****             /* Find row number with maximal signal value */
2685:Generated_Source\PSoC4/Capsense_CSHL.c ****             for(i = Capsense_rawDataIndex[widget+1u]; i < (Capsense_rawDataIndex[widget+1u] + \
2686:Generated_Source\PSoC4/Capsense_CSHL.c ****                  Capsense_numberOfSensors[widget+1u]); i++)
2687:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
2688:Generated_Source\PSoC4/Capsense_CSHL.c ****                 if (Capsense_sensorSignal[i] > row_sig_max)
2689:Generated_Source\PSoC4/Capsense_CSHL.c ****                 {
2690:Generated_Source\PSoC4/Capsense_CSHL.c ****                     row_ind = i;
2691:Generated_Source\PSoC4/Capsense_CSHL.c ****                     row_sig_max = Capsense_sensorSignal[i];
2692:Generated_Source\PSoC4/Capsense_CSHL.c ****                 }
2693:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
2694:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2695:Generated_Source\PSoC4/Capsense_CSHL.c ****             if((col_sig_max >= Capsense_fingerThreshold[widget]) && \
2696:Generated_Source\PSoC4/Capsense_CSHL.c ****                (row_sig_max >= Capsense_fingerThreshold[widget+1u]))
2697:Generated_Source\PSoC4/Capsense_CSHL.c ****             {
2698:Generated_Source\PSoC4/Capsense_CSHL.c ****                 pos[0u] = col_ind - Capsense_rawDataIndex[widget];
2699:Generated_Source\PSoC4/Capsense_CSHL.c ****                 pos[1u] = row_ind - Capsense_rawDataIndex[widget+1u];
2700:Generated_Source\PSoC4/Capsense_CSHL.c ****                 retVal = 1u;
2701:Generated_Source\PSoC4/Capsense_CSHL.c ****             }
2702:Generated_Source\PSoC4/Capsense_CSHL.c ****         }
2703:Generated_Source\PSoC4/Capsense_CSHL.c ****         return (retVal);
2704:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
2705:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2706:Generated_Source\PSoC4/Capsense_CSHL.c **** #endif /* (0u != (Capsense_TOTAL_MATRIX_BUTTONS_COUNT)) */
2707:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2708:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
2709:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetWidgetNumber
2710:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
2711:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2712:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
2713:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the widget number for the sensor.
2714:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2715:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
2716:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor: sensor index. The value of index can be
2717:Generated_Source\PSoC4/Capsense_CSHL.c **** *  from 0 to (Capsense_TOTAL_SENSOR_COUNT-1).
2718:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2719:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
2720:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the widget number for the sensor.
2721:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2722:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
2723:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_widgetNumber[]  - stores widget numbers.
2724:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2725:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
2726:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
2727:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2728:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
2729:Generated_Source\PSoC4/Capsense_CSHL.c **** uint32 Capsense_GetWidgetNumber(uint32 sensor)
2730:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 1980              		.loc 1 2730 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 8
 1983              		@ frame_needed = 1, uses_anonymous_args = 0
 1984 0000 80B5     		push	{r7, lr}
 1985              		.cfi_def_cfa_offset 8
 1986              		.cfi_offset 7, -8
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 84


 1987              		.cfi_offset 14, -4
 1988 0002 82B0     		sub	sp, sp, #8
 1989              		.cfi_def_cfa_offset 16
 1990 0004 00AF     		add	r7, sp, #0
 1991              		.cfi_def_cfa_register 7
 1992 0006 7860     		str	r0, [r7, #4]
2731:Generated_Source\PSoC4/Capsense_CSHL.c ****     return((uint32)Capsense_widgetNumber[sensor]);
 1993              		.loc 1 2731 0
 1994 0008 034A     		ldr	r2, .L124
 1995 000a 7B68     		ldr	r3, [r7, #4]
 1996 000c D318     		adds	r3, r2, r3
 1997 000e 1B78     		ldrb	r3, [r3]
2732:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 1998              		.loc 1 2732 0
 1999 0010 1800     		movs	r0, r3
 2000 0012 BD46     		mov	sp, r7
 2001 0014 02B0     		add	sp, sp, #8
 2002              		@ sp needed
 2003 0016 80BD     		pop	{r7, pc}
 2004              	.L125:
 2005              		.align	2
 2006              	.L124:
 2007 0018 00000000 		.word	Capsense_widgetNumber
 2008              		.cfi_endproc
 2009              	.LFE64:
 2010              		.size	Capsense_GetWidgetNumber, .-Capsense_GetWidgetNumber
 2011              		.section	.text.Capsense_GetLowBaselineReset,"ax",%progbits
 2012              		.align	2
 2013              		.global	Capsense_GetLowBaselineReset
 2014              		.code	16
 2015              		.thumb_func
 2016              		.type	Capsense_GetLowBaselineReset, %function
 2017              	Capsense_GetLowBaselineReset:
 2018              	.LFB65:
2733:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2734:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
2735:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetLowBaselineReset
2736:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
2737:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2738:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
2739:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns the low baseline reset threshold value for the  sensor.
2740:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2741:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
2742:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor: sensor index. The value of index can be
2743:Generated_Source\PSoC4/Capsense_CSHL.c **** *  from 0 to (Capsense_TOTAL_SENSOR_COUNT-1).
2744:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2745:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
2746:Generated_Source\PSoC4/Capsense_CSHL.c **** *  low baseline reset threshold value a sensor.
2747:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2748:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
2749:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_lowBaselineReset[]  - stores low baseline reset values.
2750:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2751:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
2752:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
2753:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2754:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
2755:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetLowBaselineReset(uint32 sensor)
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 85


2756:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 2019              		.loc 1 2756 0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 8
 2022              		@ frame_needed = 1, uses_anonymous_args = 0
 2023 0000 80B5     		push	{r7, lr}
 2024              		.cfi_def_cfa_offset 8
 2025              		.cfi_offset 7, -8
 2026              		.cfi_offset 14, -4
 2027 0002 82B0     		sub	sp, sp, #8
 2028              		.cfi_def_cfa_offset 16
 2029 0004 00AF     		add	r7, sp, #0
 2030              		.cfi_def_cfa_register 7
 2031 0006 7860     		str	r0, [r7, #4]
2757:Generated_Source\PSoC4/Capsense_CSHL.c ****     return(Capsense_lowBaselineReset[sensor]);
 2032              		.loc 1 2757 0
 2033 0008 034A     		ldr	r2, .L128
 2034 000a 7B68     		ldr	r3, [r7, #4]
 2035 000c D318     		adds	r3, r2, r3
 2036 000e 1B78     		ldrb	r3, [r3]
2758:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 2037              		.loc 1 2758 0
 2038 0010 1800     		movs	r0, r3
 2039 0012 BD46     		mov	sp, r7
 2040 0014 02B0     		add	sp, sp, #8
 2041              		@ sp needed
 2042 0016 80BD     		pop	{r7, pc}
 2043              	.L129:
 2044              		.align	2
 2045              	.L128:
 2046 0018 00000000 		.word	Capsense_lowBaselineReset
 2047              		.cfi_endproc
 2048              	.LFE65:
 2049              		.size	Capsense_GetLowBaselineReset, .-Capsense_GetLowBaselineReset
 2050              		.section	.text.Capsense_GetDebounce,"ax",%progbits
 2051              		.align	2
 2052              		.global	Capsense_GetDebounce
 2053              		.code	16
 2054              		.thumb_func
 2055              		.type	Capsense_GetDebounce, %function
 2056              	Capsense_GetDebounce:
 2057              	.LFB66:
2759:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2760:Generated_Source\PSoC4/Capsense_CSHL.c **** /*******************************************************************************
2761:Generated_Source\PSoC4/Capsense_CSHL.c **** * Function Name: Capsense_GetDebounce
2762:Generated_Source\PSoC4/Capsense_CSHL.c **** ********************************************************************************
2763:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2764:Generated_Source\PSoC4/Capsense_CSHL.c **** * Summary:
2765:Generated_Source\PSoC4/Capsense_CSHL.c **** *  This API returns a debounce value.
2766:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2767:Generated_Source\PSoC4/Capsense_CSHL.c **** * Parameters:
2768:Generated_Source\PSoC4/Capsense_CSHL.c **** *  sensor: sensor index. The value of index can be
2769:Generated_Source\PSoC4/Capsense_CSHL.c **** *  from 0 to (Capsense_TOTAL_SENSOR_COUNT-1).
2770:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2771:Generated_Source\PSoC4/Capsense_CSHL.c **** * Return:
2772:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Debounce value
2773:Generated_Source\PSoC4/Capsense_CSHL.c **** *
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 86


2774:Generated_Source\PSoC4/Capsense_CSHL.c **** * Global Variables:
2775:Generated_Source\PSoC4/Capsense_CSHL.c **** *  Capsense_debounce[]  - stores the debounce value.
2776:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2777:Generated_Source\PSoC4/Capsense_CSHL.c **** * Side Effects:
2778:Generated_Source\PSoC4/Capsense_CSHL.c **** *  None
2779:Generated_Source\PSoC4/Capsense_CSHL.c **** *
2780:Generated_Source\PSoC4/Capsense_CSHL.c **** *******************************************************************************/
2781:Generated_Source\PSoC4/Capsense_CSHL.c **** uint8 Capsense_GetDebounce(uint32 widget)
2782:Generated_Source\PSoC4/Capsense_CSHL.c **** {
 2058              		.loc 1 2782 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 8
 2061              		@ frame_needed = 1, uses_anonymous_args = 0
 2062 0000 80B5     		push	{r7, lr}
 2063              		.cfi_def_cfa_offset 8
 2064              		.cfi_offset 7, -8
 2065              		.cfi_offset 14, -4
 2066 0002 82B0     		sub	sp, sp, #8
 2067              		.cfi_def_cfa_offset 16
 2068 0004 00AF     		add	r7, sp, #0
 2069              		.cfi_def_cfa_register 7
 2070 0006 7860     		str	r0, [r7, #4]
2783:Generated_Source\PSoC4/Capsense_CSHL.c ****     return(Capsense_debounce[widget]);
 2071              		.loc 1 2783 0
 2072 0008 034A     		ldr	r2, .L132
 2073 000a 7B68     		ldr	r3, [r7, #4]
 2074 000c D318     		adds	r3, r2, r3
 2075 000e 1B78     		ldrb	r3, [r3]
2784:Generated_Source\PSoC4/Capsense_CSHL.c **** }
 2076              		.loc 1 2784 0
 2077 0010 1800     		movs	r0, r3
 2078 0012 BD46     		mov	sp, r7
 2079 0014 02B0     		add	sp, sp, #8
 2080              		@ sp needed
 2081 0016 80BD     		pop	{r7, pc}
 2082              	.L133:
 2083              		.align	2
 2084              	.L132:
 2085 0018 00000000 		.word	Capsense_debounce
 2086              		.cfi_endproc
 2087              	.LFE66:
 2088              		.size	Capsense_GetDebounce, .-Capsense_GetDebounce
 2089              		.section	.text.Capsense_EnableRawDataFilters,"ax",%progbits
 2090              		.align	2
 2091              		.global	Capsense_EnableRawDataFilters
 2092              		.code	16
 2093              		.thumb_func
 2094              		.type	Capsense_EnableRawDataFilters, %function
 2095              	Capsense_EnableRawDataFilters:
 2096              	.LFB67:
2785:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2786:Generated_Source\PSoC4/Capsense_CSHL.c **** #if (Capsense_RAW_FILTER_MASK != 0u)
2787:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2788:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_EnableRawDataFilters
2789:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
2790:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2791:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 87


2792:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Enables the rawdata filters for the sensor signals.
2793:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2794:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2795:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2796:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2797:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2798:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2799:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2800:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2801:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_enableRawFilters defines if the filters are enabled or not.
2802:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2803:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2804:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2805:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2806:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2807:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_EnableRawDataFilters(void)
2808:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 2097              		.loc 1 2808 0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 0
 2100              		@ frame_needed = 1, uses_anonymous_args = 0
 2101 0000 80B5     		push	{r7, lr}
 2102              		.cfi_def_cfa_offset 8
 2103              		.cfi_offset 7, -8
 2104              		.cfi_offset 14, -4
 2105 0002 00AF     		add	r7, sp, #0
 2106              		.cfi_def_cfa_register 7
2809:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_enableRawFilters = Capsense_RAW_FILTERS_ENABLED;
 2107              		.loc 1 2809 0
 2108 0004 024B     		ldr	r3, .L135
 2109 0006 0122     		movs	r2, #1
 2110 0008 1A70     		strb	r2, [r3]
2810:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 2111              		.loc 1 2810 0
 2112 000a C046     		nop
 2113 000c BD46     		mov	sp, r7
 2114              		@ sp needed
 2115 000e 80BD     		pop	{r7, pc}
 2116              	.L136:
 2117              		.align	2
 2118              	.L135:
 2119 0010 00000000 		.word	Capsense_enableRawFilters
 2120              		.cfi_endproc
 2121              	.LFE67:
 2122              		.size	Capsense_EnableRawDataFilters, .-Capsense_EnableRawDataFilters
 2123              		.section	.text.Capsense_DisableRawDataFilters,"ax",%progbits
 2124              		.align	2
 2125              		.global	Capsense_DisableRawDataFilters
 2126              		.code	16
 2127              		.thumb_func
 2128              		.type	Capsense_DisableRawDataFilters, %function
 2129              	Capsense_DisableRawDataFilters:
 2130              	.LFB68:
2811:Generated_Source\PSoC4/Capsense_CSHL.c **** 
2812:Generated_Source\PSoC4/Capsense_CSHL.c ****     /*******************************************************************************
2813:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Function Name: Capsense_DisableRawDataFilters
2814:Generated_Source\PSoC4/Capsense_CSHL.c ****     ********************************************************************************
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 88


2815:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2816:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Summary:
2817:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Disables the rawdata filters for the sensor signals.
2818:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2819:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Parameters:
2820:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2821:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2822:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Return:
2823:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2824:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2825:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Global Variables:
2826:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  Capsense_enableRawFilters defines if the filters are enabled or not.
2827:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2828:Generated_Source\PSoC4/Capsense_CSHL.c ****     * Side Effects:
2829:Generated_Source\PSoC4/Capsense_CSHL.c ****     *  None
2830:Generated_Source\PSoC4/Capsense_CSHL.c ****     *
2831:Generated_Source\PSoC4/Capsense_CSHL.c ****     *******************************************************************************/
2832:Generated_Source\PSoC4/Capsense_CSHL.c ****     void Capsense_DisableRawDataFilters(void)
2833:Generated_Source\PSoC4/Capsense_CSHL.c ****     {
 2131              		.loc 1 2833 0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 0
 2134              		@ frame_needed = 1, uses_anonymous_args = 0
 2135 0000 80B5     		push	{r7, lr}
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 7, -8
 2138              		.cfi_offset 14, -4
 2139 0002 00AF     		add	r7, sp, #0
 2140              		.cfi_def_cfa_register 7
2834:Generated_Source\PSoC4/Capsense_CSHL.c ****         Capsense_enableRawFilters = Capsense_RAW_FILTERS_DISABLED;
 2141              		.loc 1 2834 0
 2142 0004 024B     		ldr	r3, .L138
 2143 0006 0022     		movs	r2, #0
 2144 0008 1A70     		strb	r2, [r3]
2835:Generated_Source\PSoC4/Capsense_CSHL.c ****     }
 2145              		.loc 1 2835 0
 2146 000a C046     		nop
 2147 000c BD46     		mov	sp, r7
 2148              		@ sp needed
 2149 000e 80BD     		pop	{r7, pc}
 2150              	.L139:
 2151              		.align	2
 2152              	.L138:
 2153 0010 00000000 		.word	Capsense_enableRawFilters
 2154              		.cfi_endproc
 2155              	.LFE68:
 2156              		.size	Capsense_DisableRawDataFilters, .-Capsense_DisableRawDataFilters
 2157              		.text
 2158              	.Letext0:
 2159              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2160              		.section	.debug_info,"",%progbits
 2161              	.Ldebug_info0:
 2162 0000 3F090000 		.4byte	0x93f
 2163 0004 0400     		.2byte	0x4
 2164 0006 00000000 		.4byte	.Ldebug_abbrev0
 2165 000a 04       		.byte	0x4
 2166 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 89


 2167 000c 00030000 		.4byte	.LASF89
 2168 0010 0C       		.byte	0xc
 2169 0011 83070000 		.4byte	.LASF90
 2170 0015 31060000 		.4byte	.LASF91
 2171 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2172 001d 00000000 		.4byte	0
 2173 0021 00000000 		.4byte	.Ldebug_line0
 2174 0025 02       		.uleb128 0x2
 2175 0026 01       		.byte	0x1
 2176 0027 06       		.byte	0x6
 2177 0028 60040000 		.4byte	.LASF0
 2178 002c 02       		.uleb128 0x2
 2179 002d 01       		.byte	0x1
 2180 002e 08       		.byte	0x8
 2181 002f E3030000 		.4byte	.LASF1
 2182 0033 02       		.uleb128 0x2
 2183 0034 02       		.byte	0x2
 2184 0035 05       		.byte	0x5
 2185 0036 C1000000 		.4byte	.LASF2
 2186 003a 02       		.uleb128 0x2
 2187 003b 02       		.byte	0x2
 2188 003c 07       		.byte	0x7
 2189 003d 93050000 		.4byte	.LASF3
 2190 0041 02       		.uleb128 0x2
 2191 0042 04       		.byte	0x4
 2192 0043 05       		.byte	0x5
 2193 0044 A1020000 		.4byte	.LASF4
 2194 0048 02       		.uleb128 0x2
 2195 0049 04       		.byte	0x4
 2196 004a 07       		.byte	0x7
 2197 004b 1A060000 		.4byte	.LASF5
 2198 004f 02       		.uleb128 0x2
 2199 0050 08       		.byte	0x8
 2200 0051 05       		.byte	0x5
 2201 0052 73020000 		.4byte	.LASF6
 2202 0056 02       		.uleb128 0x2
 2203 0057 08       		.byte	0x8
 2204 0058 07       		.byte	0x7
 2205 0059 8A040000 		.4byte	.LASF7
 2206 005d 03       		.uleb128 0x3
 2207 005e 04       		.byte	0x4
 2208 005f 05       		.byte	0x5
 2209 0060 696E7400 		.ascii	"int\000"
 2210 0064 02       		.uleb128 0x2
 2211 0065 04       		.byte	0x4
 2212 0066 07       		.byte	0x7
 2213 0067 EA040000 		.4byte	.LASF8
 2214 006b 04       		.uleb128 0x4
 2215 006c E2010000 		.4byte	.LASF9
 2216 0070 02       		.byte	0x2
 2217 0071 B901     		.2byte	0x1b9
 2218 0073 2C000000 		.4byte	0x2c
 2219 0077 04       		.uleb128 0x4
 2220 0078 AA010000 		.4byte	.LASF10
 2221 007c 02       		.byte	0x2
 2222 007d BA01     		.2byte	0x1ba
 2223 007f 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 90


 2224 0083 04       		.uleb128 0x4
 2225 0084 71060000 		.4byte	.LASF11
 2226 0088 02       		.byte	0x2
 2227 0089 BB01     		.2byte	0x1bb
 2228 008b 48000000 		.4byte	0x48
 2229 008f 02       		.uleb128 0x2
 2230 0090 04       		.byte	0x4
 2231 0091 04       		.byte	0x4
 2232 0092 55020000 		.4byte	.LASF12
 2233 0096 02       		.uleb128 0x2
 2234 0097 08       		.byte	0x8
 2235 0098 04       		.byte	0x4
 2236 0099 1E070000 		.4byte	.LASF13
 2237 009d 02       		.uleb128 0x2
 2238 009e 01       		.byte	0x1
 2239 009f 08       		.byte	0x8
 2240 00a0 60050000 		.4byte	.LASF14
 2241 00a4 02       		.uleb128 0x2
 2242 00a5 04       		.byte	0x4
 2243 00a6 07       		.byte	0x7
 2244 00a7 E9060000 		.4byte	.LASF15
 2245 00ab 02       		.uleb128 0x2
 2246 00ac 08       		.byte	0x8
 2247 00ad 04       		.byte	0x4
 2248 00ae D7030000 		.4byte	.LASF16
 2249 00b2 05       		.uleb128 0x5
 2250 00b3 6B000000 		.4byte	0x6b
 2251 00b7 06       		.uleb128 0x6
 2252 00b8 4C000000 		.4byte	.LASF17
 2253 00bc 01       		.byte	0x1
 2254 00bd 8E       		.byte	0x8e
 2255 00be 00000000 		.4byte	.LFB36
 2256 00c2 88000000 		.4byte	.LFE36-.LFB36
 2257 00c6 01       		.uleb128 0x1
 2258 00c7 9C       		.byte	0x9c
 2259 00c8 E9000000 		.4byte	0xe9
 2260 00cc 07       		.uleb128 0x7
 2261 00cd B1010000 		.4byte	.LASF19
 2262 00d1 01       		.byte	0x1
 2263 00d2 8E       		.byte	0x8e
 2264 00d3 83000000 		.4byte	0x83
 2265 00d7 02       		.uleb128 0x2
 2266 00d8 91       		.byte	0x91
 2267 00d9 6C       		.sleb128 -20
 2268 00da 08       		.uleb128 0x8
 2269 00db DB010000 		.4byte	.LASF21
 2270 00df 01       		.byte	0x1
 2271 00e0 92       		.byte	0x92
 2272 00e1 6B000000 		.4byte	0x6b
 2273 00e5 02       		.uleb128 0x2
 2274 00e6 91       		.byte	0x91
 2275 00e7 77       		.sleb128 -9
 2276 00e8 00       		.byte	0
 2277 00e9 09       		.uleb128 0x9
 2278 00ea AA060000 		.4byte	.LASF18
 2279 00ee 01       		.byte	0x1
 2280 00ef DA       		.byte	0xda
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 91


 2281 00f0 00000000 		.4byte	.LFB37
 2282 00f4 2A000000 		.4byte	.LFE37-.LFB37
 2283 00f8 01       		.uleb128 0x1
 2284 00f9 9C       		.byte	0x9c
 2285 00fa 0D010000 		.4byte	0x10d
 2286 00fe 07       		.uleb128 0x7
 2287 00ff B1010000 		.4byte	.LASF19
 2288 0103 01       		.byte	0x1
 2289 0104 DA       		.byte	0xda
 2290 0105 83000000 		.4byte	0x83
 2291 0109 02       		.uleb128 0x2
 2292 010a 91       		.byte	0x91
 2293 010b 74       		.sleb128 -12
 2294 010c 00       		.byte	0
 2295 010d 09       		.uleb128 0x9
 2296 010e AA070000 		.4byte	.LASF20
 2297 0112 01       		.byte	0x1
 2298 0113 FF       		.byte	0xff
 2299 0114 00000000 		.4byte	.LFB38
 2300 0118 28000000 		.4byte	.LFE38-.LFB38
 2301 011c 01       		.uleb128 0x1
 2302 011d 9C       		.byte	0x9c
 2303 011e 30010000 		.4byte	0x130
 2304 0122 0A       		.uleb128 0xa
 2305 0123 6900     		.ascii	"i\000"
 2306 0125 01       		.byte	0x1
 2307 0126 0101     		.2byte	0x101
 2308 0128 83000000 		.4byte	0x83
 2309 012c 02       		.uleb128 0x2
 2310 012d 91       		.byte	0x91
 2311 012e 74       		.sleb128 -12
 2312 012f 00       		.byte	0
 2313 0130 0B       		.uleb128 0xb
 2314 0131 8E030000 		.4byte	.LASF22
 2315 0135 01       		.byte	0x1
 2316 0136 2201     		.2byte	0x122
 2317 0138 00000000 		.4byte	.LFB39
 2318 013c 50000000 		.4byte	.LFE39-.LFB39
 2319 0140 01       		.uleb128 0x1
 2320 0141 9C       		.byte	0x9c
 2321 0142 63010000 		.4byte	0x163
 2322 0146 0A       		.uleb128 0xa
 2323 0147 6900     		.ascii	"i\000"
 2324 0149 01       		.byte	0x1
 2325 014a 2401     		.2byte	0x124
 2326 014c 83000000 		.4byte	0x83
 2327 0150 02       		.uleb128 0x2
 2328 0151 91       		.byte	0x91
 2329 0152 74       		.sleb128 -12
 2330 0153 0C       		.uleb128 0xc
 2331 0154 50050000 		.4byte	.LASF23
 2332 0158 01       		.byte	0x1
 2333 0159 2501     		.2byte	0x125
 2334 015b 83000000 		.4byte	0x83
 2335 015f 02       		.uleb128 0x2
 2336 0160 91       		.byte	0x91
 2337 0161 70       		.sleb128 -16
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 92


 2338 0162 00       		.byte	0
 2339 0163 0B       		.uleb128 0xb
 2340 0164 B3020000 		.4byte	.LASF24
 2341 0168 01       		.byte	0x1
 2342 0169 6301     		.2byte	0x163
 2343 016b 00000000 		.4byte	.LFB40
 2344 016f 24020000 		.4byte	.LFE40-.LFB40
 2345 0173 01       		.uleb128 0x1
 2346 0174 9C       		.byte	0x9c
 2347 0175 E3010000 		.4byte	0x1e3
 2348 0179 0D       		.uleb128 0xd
 2349 017a B1010000 		.4byte	.LASF19
 2350 017e 01       		.byte	0x1
 2351 017f 6301     		.2byte	0x163
 2352 0181 83000000 		.4byte	0x83
 2353 0185 02       		.uleb128 0x2
 2354 0186 91       		.byte	0x91
 2355 0187 5C       		.sleb128 -36
 2356 0188 0C       		.uleb128 0xc
 2357 0189 15060000 		.4byte	.LASF25
 2358 018d 01       		.byte	0x1
 2359 018e 6501     		.2byte	0x165
 2360 0190 83000000 		.4byte	0x83
 2361 0194 02       		.uleb128 0x2
 2362 0195 91       		.byte	0x91
 2363 0196 60       		.sleb128 -32
 2364 0197 0C       		.uleb128 0xc
 2365 0198 2C060000 		.4byte	.LASF26
 2366 019c 01       		.byte	0x1
 2367 019d 6601     		.2byte	0x166
 2368 019f 83000000 		.4byte	0x83
 2369 01a3 02       		.uleb128 0x2
 2370 01a4 91       		.byte	0x91
 2371 01a5 6C       		.sleb128 -20
 2372 01a6 0C       		.uleb128 0xc
 2373 01a7 33020000 		.4byte	.LASF27
 2374 01ab 01       		.byte	0x1
 2375 01ac 6701     		.2byte	0x167
 2376 01ae 77000000 		.4byte	0x77
 2377 01b2 02       		.uleb128 0x2
 2378 01b3 91       		.byte	0x91
 2379 01b4 6A       		.sleb128 -22
 2380 01b5 0C       		.uleb128 0xc
 2381 01b6 CB000000 		.4byte	.LASF28
 2382 01ba 01       		.byte	0x1
 2383 01bb 6801     		.2byte	0x168
 2384 01bd 77000000 		.4byte	0x77
 2385 01c1 02       		.uleb128 0x2
 2386 01c2 91       		.byte	0x91
 2387 01c3 68       		.sleb128 -24
 2388 01c4 0C       		.uleb128 0xc
 2389 01c5 DB010000 		.4byte	.LASF21
 2390 01c9 01       		.byte	0x1
 2391 01ca 6901     		.2byte	0x169
 2392 01cc 6B000000 		.4byte	0x6b
 2393 01d0 02       		.uleb128 0x2
 2394 01d1 91       		.byte	0x91
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 93


 2395 01d2 67       		.sleb128 -25
 2396 01d3 0C       		.uleb128 0xc
 2397 01d4 D6020000 		.4byte	.LASF29
 2398 01d8 01       		.byte	0x1
 2399 01d9 6A01     		.2byte	0x16a
 2400 01db 6B000000 		.4byte	0x6b
 2401 01df 02       		.uleb128 0x2
 2402 01e0 91       		.byte	0x91
 2403 01e1 66       		.sleb128 -26
 2404 01e2 00       		.byte	0
 2405 01e3 0B       		.uleb128 0xb
 2406 01e4 25040000 		.4byte	.LASF30
 2407 01e8 01       		.byte	0x1
 2408 01e9 2302     		.2byte	0x223
 2409 01eb 00000000 		.4byte	.LFB41
 2410 01ef 18000000 		.4byte	.LFE41-.LFB41
 2411 01f3 01       		.uleb128 0x1
 2412 01f4 9C       		.byte	0x9c
 2413 01f5 09020000 		.4byte	0x209
 2414 01f9 0D       		.uleb128 0xd
 2415 01fa B1010000 		.4byte	.LASF19
 2416 01fe 01       		.byte	0x1
 2417 01ff 2302     		.2byte	0x223
 2418 0201 83000000 		.4byte	0x83
 2419 0205 02       		.uleb128 0x2
 2420 0206 91       		.byte	0x91
 2421 0207 74       		.sleb128 -12
 2422 0208 00       		.byte	0
 2423 0209 0B       		.uleb128 0xb
 2424 020a F7040000 		.4byte	.LASF31
 2425 020e 01       		.byte	0x1
 2426 020f 5902     		.2byte	0x259
 2427 0211 00000000 		.4byte	.LFB42
 2428 0215 44000000 		.4byte	.LFE42-.LFB42
 2429 0219 01       		.uleb128 0x1
 2430 021a 9C       		.byte	0x9c
 2431 021b 3C020000 		.4byte	0x23c
 2432 021f 0A       		.uleb128 0xa
 2433 0220 6900     		.ascii	"i\000"
 2434 0222 01       		.byte	0x1
 2435 0223 5B02     		.2byte	0x25b
 2436 0225 83000000 		.4byte	0x83
 2437 0229 02       		.uleb128 0x2
 2438 022a 91       		.byte	0x91
 2439 022b 74       		.sleb128 -12
 2440 022c 0C       		.uleb128 0xc
 2441 022d 50050000 		.4byte	.LASF23
 2442 0231 01       		.byte	0x1
 2443 0232 5C02     		.2byte	0x25c
 2444 0234 83000000 		.4byte	0x83
 2445 0238 02       		.uleb128 0x2
 2446 0239 91       		.byte	0x91
 2447 023a 70       		.sleb128 -16
 2448 023b 00       		.byte	0
 2449 023c 0B       		.uleb128 0xb
 2450 023d F2060000 		.4byte	.LASF32
 2451 0241 01       		.byte	0x1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 94


 2452 0242 8602     		.2byte	0x286
 2453 0244 00000000 		.4byte	.LFB43
 2454 0248 58000000 		.4byte	.LFE43-.LFB43
 2455 024c 01       		.uleb128 0x1
 2456 024d 9C       		.byte	0x9c
 2457 024e AB020000 		.4byte	0x2ab
 2458 0252 0D       		.uleb128 0xd
 2459 0253 DB010000 		.4byte	.LASF21
 2460 0257 01       		.byte	0x1
 2461 0258 8602     		.2byte	0x286
 2462 025a 83000000 		.4byte	0x83
 2463 025e 02       		.uleb128 0x2
 2464 025f 91       		.byte	0x91
 2465 0260 5C       		.sleb128 -36
 2466 0261 0C       		.uleb128 0xc
 2467 0262 25070000 		.4byte	.LASF33
 2468 0266 01       		.byte	0x1
 2469 0267 8802     		.2byte	0x288
 2470 0269 83000000 		.4byte	0x83
 2471 026d 02       		.uleb128 0x2
 2472 026e 91       		.byte	0x91
 2473 026f 70       		.sleb128 -16
 2474 0270 0C       		.uleb128 0xc
 2475 0271 87050000 		.4byte	.LASF34
 2476 0275 01       		.byte	0x1
 2477 0276 8902     		.2byte	0x289
 2478 0278 83000000 		.4byte	0x83
 2479 027c 02       		.uleb128 0x2
 2480 027d 91       		.byte	0x91
 2481 027e 6C       		.sleb128 -20
 2482 027f 0C       		.uleb128 0xc
 2483 0280 B9050000 		.4byte	.LASF35
 2484 0284 01       		.byte	0x1
 2485 0285 8A02     		.2byte	0x28a
 2486 0287 83000000 		.4byte	0x83
 2487 028b 02       		.uleb128 0x2
 2488 028c 91       		.byte	0x91
 2489 028d 68       		.sleb128 -24
 2490 028e 0A       		.uleb128 0xa
 2491 028f 6900     		.ascii	"i\000"
 2492 0291 01       		.byte	0x1
 2493 0292 8B02     		.2byte	0x28b
 2494 0294 83000000 		.4byte	0x83
 2495 0298 02       		.uleb128 0x2
 2496 0299 91       		.byte	0x91
 2497 029a 74       		.sleb128 -12
 2498 029b 0C       		.uleb128 0xc
 2499 029c 50050000 		.4byte	.LASF23
 2500 02a0 01       		.byte	0x1
 2501 02a1 8C02     		.2byte	0x28c
 2502 02a3 83000000 		.4byte	0x83
 2503 02a7 02       		.uleb128 0x2
 2504 02a8 91       		.byte	0x91
 2505 02a9 64       		.sleb128 -28
 2506 02aa 00       		.byte	0
 2507 02ab 0E       		.uleb128 0xe
 2508 02ac F1030000 		.4byte	.LASF38
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 95


 2509 02b0 01       		.byte	0x1
 2510 02b1 B702     		.2byte	0x2b7
 2511 02b3 77000000 		.4byte	0x77
 2512 02b7 00000000 		.4byte	.LFB44
 2513 02bb 1C000000 		.4byte	.LFE44-.LFB44
 2514 02bf 01       		.uleb128 0x1
 2515 02c0 9C       		.byte	0x9c
 2516 02c1 D5020000 		.4byte	0x2d5
 2517 02c5 0D       		.uleb128 0xd
 2518 02c6 B1010000 		.4byte	.LASF19
 2519 02ca 01       		.byte	0x1
 2520 02cb B702     		.2byte	0x2b7
 2521 02cd 83000000 		.4byte	0x83
 2522 02d1 02       		.uleb128 0x2
 2523 02d2 91       		.byte	0x91
 2524 02d3 74       		.sleb128 -12
 2525 02d4 00       		.byte	0
 2526 02d5 0F       		.uleb128 0xf
 2527 02d6 DB000000 		.4byte	.LASF36
 2528 02da 01       		.byte	0x1
 2529 02db D202     		.2byte	0x2d2
 2530 02dd 00000000 		.4byte	.LFB45
 2531 02e1 28000000 		.4byte	.LFE45-.LFB45
 2532 02e5 01       		.uleb128 0x1
 2533 02e6 9C       		.byte	0x9c
 2534 02e7 0A030000 		.4byte	0x30a
 2535 02eb 0D       		.uleb128 0xd
 2536 02ec B1010000 		.4byte	.LASF19
 2537 02f0 01       		.byte	0x1
 2538 02f1 D202     		.2byte	0x2d2
 2539 02f3 83000000 		.4byte	0x83
 2540 02f7 02       		.uleb128 0x2
 2541 02f8 91       		.byte	0x91
 2542 02f9 74       		.sleb128 -12
 2543 02fa 0D       		.uleb128 0xd
 2544 02fb E0050000 		.4byte	.LASF37
 2545 02ff 01       		.byte	0x1
 2546 0300 D202     		.2byte	0x2d2
 2547 0302 77000000 		.4byte	0x77
 2548 0306 02       		.uleb128 0x2
 2549 0307 91       		.byte	0x91
 2550 0308 72       		.sleb128 -14
 2551 0309 00       		.byte	0
 2552 030a 0E       		.uleb128 0xe
 2553 030b FB050000 		.4byte	.LASF39
 2554 030f 01       		.byte	0x1
 2555 0310 ED02     		.2byte	0x2ed
 2556 0312 6B000000 		.4byte	0x6b
 2557 0316 00000000 		.4byte	.LFB46
 2558 031a 1C000000 		.4byte	.LFE46-.LFB46
 2559 031e 01       		.uleb128 0x1
 2560 031f 9C       		.byte	0x9c
 2561 0320 34030000 		.4byte	0x334
 2562 0324 0D       		.uleb128 0xd
 2563 0325 B1010000 		.4byte	.LASF19
 2564 0329 01       		.byte	0x1
 2565 032a ED02     		.2byte	0x2ed
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 96


 2566 032c 83000000 		.4byte	0x83
 2567 0330 02       		.uleb128 0x2
 2568 0331 91       		.byte	0x91
 2569 0332 74       		.sleb128 -12
 2570 0333 00       		.byte	0
 2571 0334 0F       		.uleb128 0xf
 2572 0335 BD030000 		.4byte	.LASF40
 2573 0339 01       		.byte	0x1
 2574 033a 0803     		.2byte	0x308
 2575 033c 00000000 		.4byte	.LFB47
 2576 0340 28000000 		.4byte	.LFE47-.LFB47
 2577 0344 01       		.uleb128 0x1
 2578 0345 9C       		.byte	0x9c
 2579 0346 69030000 		.4byte	0x369
 2580 034a 0D       		.uleb128 0xd
 2581 034b B1010000 		.4byte	.LASF19
 2582 034f 01       		.byte	0x1
 2583 0350 0803     		.2byte	0x308
 2584 0352 83000000 		.4byte	0x83
 2585 0356 02       		.uleb128 0x2
 2586 0357 91       		.byte	0x91
 2587 0358 74       		.sleb128 -12
 2588 0359 0D       		.uleb128 0xd
 2589 035a 8B010000 		.4byte	.LASF41
 2590 035e 01       		.byte	0x1
 2591 035f 0803     		.2byte	0x308
 2592 0361 6B000000 		.4byte	0x6b
 2593 0365 02       		.uleb128 0x2
 2594 0366 91       		.byte	0x91
 2595 0367 73       		.sleb128 -13
 2596 0368 00       		.byte	0
 2597 0369 0E       		.uleb128 0xe
 2598 036a C4050000 		.4byte	.LASF42
 2599 036e 01       		.byte	0x1
 2600 036f 2303     		.2byte	0x323
 2601 0371 6B000000 		.4byte	0x6b
 2602 0375 00000000 		.4byte	.LFB48
 2603 0379 1C000000 		.4byte	.LFE48-.LFB48
 2604 037d 01       		.uleb128 0x1
 2605 037e 9C       		.byte	0x9c
 2606 037f 93030000 		.4byte	0x393
 2607 0383 0D       		.uleb128 0xd
 2608 0384 DB010000 		.4byte	.LASF21
 2609 0388 01       		.byte	0x1
 2610 0389 2303     		.2byte	0x323
 2611 038b 83000000 		.4byte	0x83
 2612 038f 02       		.uleb128 0x2
 2613 0390 91       		.byte	0x91
 2614 0391 74       		.sleb128 -12
 2615 0392 00       		.byte	0
 2616 0393 0E       		.uleb128 0xe
 2617 0394 0A040000 		.4byte	.LASF43
 2618 0398 01       		.byte	0x1
 2619 0399 3E03     		.2byte	0x33e
 2620 039b 6B000000 		.4byte	0x6b
 2621 039f 00000000 		.4byte	.LFB49
 2622 03a3 1C000000 		.4byte	.LFE49-.LFB49
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 97


 2623 03a7 01       		.uleb128 0x1
 2624 03a8 9C       		.byte	0x9c
 2625 03a9 BD030000 		.4byte	0x3bd
 2626 03ad 0D       		.uleb128 0xd
 2627 03ae DB010000 		.4byte	.LASF21
 2628 03b2 01       		.byte	0x1
 2629 03b3 3E03     		.2byte	0x33e
 2630 03b5 83000000 		.4byte	0x83
 2631 03b9 02       		.uleb128 0x2
 2632 03ba 91       		.byte	0x91
 2633 03bb 74       		.sleb128 -12
 2634 03bc 00       		.byte	0
 2635 03bd 0E       		.uleb128 0xe
 2636 03be 66070000 		.4byte	.LASF44
 2637 03c2 01       		.byte	0x1
 2638 03c3 5A03     		.2byte	0x35a
 2639 03c5 6B000000 		.4byte	0x6b
 2640 03c9 00000000 		.4byte	.LFB50
 2641 03cd 1C000000 		.4byte	.LFE50-.LFB50
 2642 03d1 01       		.uleb128 0x1
 2643 03d2 9C       		.byte	0x9c
 2644 03d3 E7030000 		.4byte	0x3e7
 2645 03d7 0D       		.uleb128 0xd
 2646 03d8 DB010000 		.4byte	.LASF21
 2647 03dc 01       		.byte	0x1
 2648 03dd 5A03     		.2byte	0x35a
 2649 03df 83000000 		.4byte	0x83
 2650 03e3 02       		.uleb128 0x2
 2651 03e4 91       		.byte	0x91
 2652 03e5 74       		.sleb128 -12
 2653 03e6 00       		.byte	0
 2654 03e7 0E       		.uleb128 0xe
 2655 03e8 A1040000 		.4byte	.LASF45
 2656 03ec 01       		.byte	0x1
 2657 03ed 7603     		.2byte	0x376
 2658 03ef 6B000000 		.4byte	0x6b
 2659 03f3 00000000 		.4byte	.LFB51
 2660 03f7 1C000000 		.4byte	.LFE51-.LFB51
 2661 03fb 01       		.uleb128 0x1
 2662 03fc 9C       		.byte	0x9c
 2663 03fd 11040000 		.4byte	0x411
 2664 0401 0D       		.uleb128 0xd
 2665 0402 DB010000 		.4byte	.LASF21
 2666 0406 01       		.byte	0x1
 2667 0407 7603     		.2byte	0x376
 2668 0409 83000000 		.4byte	0x83
 2669 040d 02       		.uleb128 0x2
 2670 040e 91       		.byte	0x91
 2671 040f 74       		.sleb128 -12
 2672 0410 00       		.byte	0
 2673 0411 0F       		.uleb128 0xf
 2674 0412 34050000 		.4byte	.LASF46
 2675 0416 01       		.byte	0x1
 2676 0417 9703     		.2byte	0x397
 2677 0419 00000000 		.4byte	.LFB52
 2678 041d 28000000 		.4byte	.LFE52-.LFB52
 2679 0421 01       		.uleb128 0x1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 98


 2680 0422 9C       		.byte	0x9c
 2681 0423 46040000 		.4byte	0x446
 2682 0427 0D       		.uleb128 0xd
 2683 0428 DB010000 		.4byte	.LASF21
 2684 042c 01       		.byte	0x1
 2685 042d 9703     		.2byte	0x397
 2686 042f 83000000 		.4byte	0x83
 2687 0433 02       		.uleb128 0x2
 2688 0434 91       		.byte	0x91
 2689 0435 74       		.sleb128 -12
 2690 0436 0D       		.uleb128 0xd
 2691 0437 8B010000 		.4byte	.LASF41
 2692 043b 01       		.byte	0x1
 2693 043c 9703     		.2byte	0x397
 2694 043e 6B000000 		.4byte	0x6b
 2695 0442 02       		.uleb128 0x2
 2696 0443 91       		.byte	0x91
 2697 0444 73       		.sleb128 -13
 2698 0445 00       		.byte	0
 2699 0446 0F       		.uleb128 0xf
 2700 0447 5E000000 		.4byte	.LASF47
 2701 044b 01       		.byte	0x1
 2702 044c B303     		.2byte	0x3b3
 2703 044e 00000000 		.4byte	.LFB53
 2704 0452 28000000 		.4byte	.LFE53-.LFB53
 2705 0456 01       		.uleb128 0x1
 2706 0457 9C       		.byte	0x9c
 2707 0458 7B040000 		.4byte	0x47b
 2708 045c 0D       		.uleb128 0xd
 2709 045d DB010000 		.4byte	.LASF21
 2710 0461 01       		.byte	0x1
 2711 0462 B303     		.2byte	0x3b3
 2712 0464 83000000 		.4byte	0x83
 2713 0468 02       		.uleb128 0x2
 2714 0469 91       		.byte	0x91
 2715 046a 74       		.sleb128 -12
 2716 046b 0D       		.uleb128 0xd
 2717 046c 8B010000 		.4byte	.LASF41
 2718 0470 01       		.byte	0x1
 2719 0471 B303     		.2byte	0x3b3
 2720 0473 6B000000 		.4byte	0x6b
 2721 0477 02       		.uleb128 0x2
 2722 0478 91       		.byte	0x91
 2723 0479 73       		.sleb128 -13
 2724 047a 00       		.byte	0
 2725 047b 0F       		.uleb128 0xf
 2726 047c 16020000 		.4byte	.LASF48
 2727 0480 01       		.byte	0x1
 2728 0481 CF03     		.2byte	0x3cf
 2729 0483 00000000 		.4byte	.LFB54
 2730 0487 28000000 		.4byte	.LFE54-.LFB54
 2731 048b 01       		.uleb128 0x1
 2732 048c 9C       		.byte	0x9c
 2733 048d B0040000 		.4byte	0x4b0
 2734 0491 0D       		.uleb128 0xd
 2735 0492 DB010000 		.4byte	.LASF21
 2736 0496 01       		.byte	0x1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 99


 2737 0497 CF03     		.2byte	0x3cf
 2738 0499 83000000 		.4byte	0x83
 2739 049d 02       		.uleb128 0x2
 2740 049e 91       		.byte	0x91
 2741 049f 74       		.sleb128 -12
 2742 04a0 0D       		.uleb128 0xd
 2743 04a1 8B010000 		.4byte	.LASF41
 2744 04a5 01       		.byte	0x1
 2745 04a6 CF03     		.2byte	0x3cf
 2746 04a8 6B000000 		.4byte	0x6b
 2747 04ac 02       		.uleb128 0x2
 2748 04ad 91       		.byte	0x91
 2749 04ae 73       		.sleb128 -13
 2750 04af 00       		.byte	0
 2751 04b0 0F       		.uleb128 0xf
 2752 04b1 B8010000 		.4byte	.LASF49
 2753 04b5 01       		.byte	0x1
 2754 04b6 EC03     		.2byte	0x3ec
 2755 04b8 00000000 		.4byte	.LFB55
 2756 04bc 28000000 		.4byte	.LFE55-.LFB55
 2757 04c0 01       		.uleb128 0x1
 2758 04c1 9C       		.byte	0x9c
 2759 04c2 E5040000 		.4byte	0x4e5
 2760 04c6 0D       		.uleb128 0xd
 2761 04c7 DB010000 		.4byte	.LASF21
 2762 04cb 01       		.byte	0x1
 2763 04cc EC03     		.2byte	0x3ec
 2764 04ce 83000000 		.4byte	0x83
 2765 04d2 02       		.uleb128 0x2
 2766 04d3 91       		.byte	0x91
 2767 04d4 74       		.sleb128 -12
 2768 04d5 0D       		.uleb128 0xd
 2769 04d6 8B010000 		.4byte	.LASF41
 2770 04da 01       		.byte	0x1
 2771 04db EC03     		.2byte	0x3ec
 2772 04dd 6B000000 		.4byte	0x6b
 2773 04e1 02       		.uleb128 0x2
 2774 04e2 91       		.byte	0x91
 2775 04e3 73       		.sleb128 -13
 2776 04e4 00       		.byte	0
 2777 04e5 0F       		.uleb128 0xf
 2778 04e6 78060000 		.4byte	.LASF50
 2779 04ea 01       		.byte	0x1
 2780 04eb 0804     		.2byte	0x408
 2781 04ed 00000000 		.4byte	.LFB56
 2782 04f1 28000000 		.4byte	.LFE56-.LFB56
 2783 04f5 01       		.uleb128 0x1
 2784 04f6 9C       		.byte	0x9c
 2785 04f7 1A050000 		.4byte	0x51a
 2786 04fb 0D       		.uleb128 0xd
 2787 04fc DB010000 		.4byte	.LASF21
 2788 0500 01       		.byte	0x1
 2789 0501 0804     		.2byte	0x408
 2790 0503 83000000 		.4byte	0x83
 2791 0507 02       		.uleb128 0x2
 2792 0508 91       		.byte	0x91
 2793 0509 74       		.sleb128 -12
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 100


 2794 050a 0D       		.uleb128 0xd
 2795 050b 8B010000 		.4byte	.LASF41
 2796 050f 01       		.byte	0x1
 2797 0510 0804     		.2byte	0x408
 2798 0512 6B000000 		.4byte	0x6b
 2799 0516 02       		.uleb128 0x2
 2800 0517 91       		.byte	0x91
 2801 0518 73       		.sleb128 -13
 2802 0519 00       		.byte	0
 2803 051a 0F       		.uleb128 0xf
 2804 051b 8F000000 		.4byte	.LASF51
 2805 051f 01       		.byte	0x1
 2806 0520 2404     		.2byte	0x424
 2807 0522 00000000 		.4byte	.LFB57
 2808 0526 28000000 		.4byte	.LFE57-.LFB57
 2809 052a 01       		.uleb128 0x1
 2810 052b 9C       		.byte	0x9c
 2811 052c 4F050000 		.4byte	0x54f
 2812 0530 0D       		.uleb128 0xd
 2813 0531 B1010000 		.4byte	.LASF19
 2814 0535 01       		.byte	0x1
 2815 0536 2404     		.2byte	0x424
 2816 0538 83000000 		.4byte	0x83
 2817 053c 02       		.uleb128 0x2
 2818 053d 91       		.byte	0x91
 2819 053e 74       		.sleb128 -12
 2820 053f 0D       		.uleb128 0xd
 2821 0540 8B010000 		.4byte	.LASF41
 2822 0544 01       		.byte	0x1
 2823 0545 2404     		.2byte	0x424
 2824 0547 6B000000 		.4byte	0x6b
 2825 054b 02       		.uleb128 0x2
 2826 054c 91       		.byte	0x91
 2827 054d 73       		.sleb128 -13
 2828 054e 00       		.byte	0
 2829 054f 10       		.uleb128 0x10
 2830 0550 17050000 		.4byte	.LASF52
 2831 0554 01       		.byte	0x1
 2832 0555 5204     		.2byte	0x452
 2833 0557 83000000 		.4byte	0x83
 2834 055b 00000000 		.4byte	.LFB58
 2835 055f 30010000 		.4byte	.LFE58-.LFB58
 2836 0563 01       		.uleb128 0x1
 2837 0564 9C       		.byte	0x9c
 2838 0565 C4050000 		.4byte	0x5c4
 2839 0569 0D       		.uleb128 0xd
 2840 056a B1010000 		.4byte	.LASF19
 2841 056e 01       		.byte	0x1
 2842 056f 5204     		.2byte	0x452
 2843 0571 83000000 		.4byte	0x83
 2844 0575 02       		.uleb128 0x2
 2845 0576 91       		.byte	0x91
 2846 0577 6C       		.sleb128 -20
 2847 0578 0C       		.uleb128 0xc
 2848 0579 DB010000 		.4byte	.LASF21
 2849 057d 01       		.byte	0x1
 2850 057e 5404     		.2byte	0x454
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 101


 2851 0580 6B000000 		.4byte	0x6b
 2852 0584 02       		.uleb128 0x2
 2853 0585 91       		.byte	0x91
 2854 0586 77       		.sleb128 -9
 2855 0587 0C       		.uleb128 0xc
 2856 0588 AA020000 		.4byte	.LASF53
 2857 058c 01       		.byte	0x1
 2858 058d 5504     		.2byte	0x455
 2859 058f 6B000000 		.4byte	0x6b
 2860 0593 02       		.uleb128 0x2
 2861 0594 91       		.byte	0x91
 2862 0595 74       		.sleb128 -12
 2863 0596 0C       		.uleb128 0xc
 2864 0597 10070000 		.4byte	.LASF54
 2865 059b 01       		.byte	0x1
 2866 059c 5604     		.2byte	0x456
 2867 059e 6B000000 		.4byte	0x6b
 2868 05a2 02       		.uleb128 0x2
 2869 05a3 91       		.byte	0x91
 2870 05a4 73       		.sleb128 -13
 2871 05a5 0C       		.uleb128 0xc
 2872 05a6 CA070000 		.4byte	.LASF55
 2873 05aa 01       		.byte	0x1
 2874 05ab 5804     		.2byte	0x458
 2875 05ad 6B000000 		.4byte	0x6b
 2876 05b1 02       		.uleb128 0x2
 2877 05b2 91       		.byte	0x91
 2878 05b3 76       		.sleb128 -10
 2879 05b4 0C       		.uleb128 0xc
 2880 05b5 B2030000 		.4byte	.LASF56
 2881 05b9 01       		.byte	0x1
 2882 05ba 5904     		.2byte	0x459
 2883 05bc 6B000000 		.4byte	0x6b
 2884 05c0 02       		.uleb128 0x2
 2885 05c1 91       		.byte	0x91
 2886 05c2 75       		.sleb128 -11
 2887 05c3 00       		.byte	0
 2888 05c4 10       		.uleb128 0x10
 2889 05c5 43040000 		.4byte	.LASF57
 2890 05c9 01       		.byte	0x1
 2891 05ca A404     		.2byte	0x4a4
 2892 05cc 83000000 		.4byte	0x83
 2893 05d0 00000000 		.4byte	.LFB59
 2894 05d4 42000000 		.4byte	.LFE59-.LFB59
 2895 05d8 01       		.uleb128 0x1
 2896 05d9 9C       		.byte	0x9c
 2897 05da 1B060000 		.4byte	0x61b
 2898 05de 0D       		.uleb128 0xd
 2899 05df DB010000 		.4byte	.LASF21
 2900 05e3 01       		.byte	0x1
 2901 05e4 A404     		.2byte	0x4a4
 2902 05e6 83000000 		.4byte	0x83
 2903 05ea 02       		.uleb128 0x2
 2904 05eb 91       		.byte	0x91
 2905 05ec 64       		.sleb128 -28
 2906 05ed 0C       		.uleb128 0xc
 2907 05ee 7E050000 		.4byte	.LASF58
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 102


 2908 05f2 01       		.byte	0x1
 2909 05f3 A604     		.2byte	0x4a6
 2910 05f5 83000000 		.4byte	0x83
 2911 05f9 02       		.uleb128 0x2
 2912 05fa 91       		.byte	0x91
 2913 05fb 74       		.sleb128 -12
 2914 05fc 0C       		.uleb128 0xc
 2915 05fd 3F010000 		.4byte	.LASF59
 2916 0601 01       		.byte	0x1
 2917 0602 A704     		.2byte	0x4a7
 2918 0604 83000000 		.4byte	0x83
 2919 0608 02       		.uleb128 0x2
 2920 0609 91       		.byte	0x91
 2921 060a 6C       		.sleb128 -20
 2922 060b 0C       		.uleb128 0xc
 2923 060c 0B010000 		.4byte	.LASF60
 2924 0610 01       		.byte	0x1
 2925 0611 A804     		.2byte	0x4a8
 2926 0613 83000000 		.4byte	0x83
 2927 0617 02       		.uleb128 0x2
 2928 0618 91       		.byte	0x91
 2929 0619 70       		.sleb128 -16
 2930 061a 00       		.byte	0
 2931 061b 10       		.uleb128 0x10
 2932 061c 6B010000 		.4byte	.LASF61
 2933 0620 01       		.byte	0x1
 2934 0621 D204     		.2byte	0x4d2
 2935 0623 83000000 		.4byte	0x83
 2936 0627 00000000 		.4byte	.LFB60
 2937 062b 36000000 		.4byte	.LFE60-.LFB60
 2938 062f 01       		.uleb128 0x1
 2939 0630 9C       		.byte	0x9c
 2940 0631 52060000 		.4byte	0x652
 2941 0635 0A       		.uleb128 0xa
 2942 0636 6900     		.ascii	"i\000"
 2943 0638 01       		.byte	0x1
 2944 0639 D504     		.2byte	0x4d5
 2945 063b 83000000 		.4byte	0x83
 2946 063f 02       		.uleb128 0x2
 2947 0640 91       		.byte	0x91
 2948 0641 74       		.sleb128 -12
 2949 0642 0C       		.uleb128 0xc
 2950 0643 0B010000 		.4byte	.LASF60
 2951 0647 01       		.byte	0x1
 2952 0648 D604     		.2byte	0x4d6
 2953 064a 83000000 		.4byte	0x83
 2954 064e 02       		.uleb128 0x2
 2955 064f 91       		.byte	0x91
 2956 0650 70       		.sleb128 -16
 2957 0651 00       		.byte	0
 2958 0652 0B       		.uleb128 0xb
 2959 0653 E5050000 		.4byte	.LASF62
 2960 0657 01       		.byte	0x1
 2961 0658 0105     		.2byte	0x501
 2962 065a 00000000 		.4byte	.LFB61
 2963 065e 5C000000 		.4byte	.LFE61-.LFB61
 2964 0662 01       		.uleb128 0x1
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 103


 2965 0663 9C       		.byte	0x9c
 2966 0664 96060000 		.4byte	0x696
 2967 0668 0D       		.uleb128 0xd
 2968 0669 DB010000 		.4byte	.LASF21
 2969 066d 01       		.byte	0x1
 2970 066e 0105     		.2byte	0x501
 2971 0670 83000000 		.4byte	0x83
 2972 0674 02       		.uleb128 0x2
 2973 0675 91       		.byte	0x91
 2974 0676 6C       		.sleb128 -20
 2975 0677 0C       		.uleb128 0xc
 2976 0678 7E050000 		.4byte	.LASF58
 2977 067c 01       		.byte	0x1
 2978 067d 0405     		.2byte	0x504
 2979 067f 6B000000 		.4byte	0x6b
 2980 0683 02       		.uleb128 0x2
 2981 0684 91       		.byte	0x91
 2982 0685 77       		.sleb128 -9
 2983 0686 0C       		.uleb128 0xc
 2984 0687 3F010000 		.4byte	.LASF59
 2985 068b 01       		.byte	0x1
 2986 068c 0505     		.2byte	0x505
 2987 068e 6B000000 		.4byte	0x6b
 2988 0692 02       		.uleb128 0x2
 2989 0693 91       		.byte	0x91
 2990 0694 76       		.sleb128 -10
 2991 0695 00       		.byte	0
 2992 0696 0B       		.uleb128 0xb
 2993 0697 F4000000 		.4byte	.LASF63
 2994 069b 01       		.byte	0x1
 2995 069c 2C05     		.2byte	0x52c
 2996 069e 00000000 		.4byte	.LFB62
 2997 06a2 5C000000 		.4byte	.LFE62-.LFB62
 2998 06a6 01       		.uleb128 0x1
 2999 06a7 9C       		.byte	0x9c
 3000 06a8 DA060000 		.4byte	0x6da
 3001 06ac 0D       		.uleb128 0xd
 3002 06ad DB010000 		.4byte	.LASF21
 3003 06b1 01       		.byte	0x1
 3004 06b2 2C05     		.2byte	0x52c
 3005 06b4 83000000 		.4byte	0x83
 3006 06b8 02       		.uleb128 0x2
 3007 06b9 91       		.byte	0x91
 3008 06ba 6C       		.sleb128 -20
 3009 06bb 0C       		.uleb128 0xc
 3010 06bc 7E050000 		.4byte	.LASF58
 3011 06c0 01       		.byte	0x1
 3012 06c1 2E05     		.2byte	0x52e
 3013 06c3 6B000000 		.4byte	0x6b
 3014 06c7 02       		.uleb128 0x2
 3015 06c8 91       		.byte	0x91
 3016 06c9 77       		.sleb128 -9
 3017 06ca 0C       		.uleb128 0xc
 3018 06cb 3F010000 		.4byte	.LASF59
 3019 06cf 01       		.byte	0x1
 3020 06d0 2F05     		.2byte	0x52f
 3021 06d2 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 104


 3022 06d6 02       		.uleb128 0x2
 3023 06d7 91       		.byte	0x91
 3024 06d8 76       		.sleb128 -10
 3025 06d9 00       		.byte	0
 3026 06da 0E       		.uleb128 0xe
 3027 06db DA070000 		.4byte	.LASF64
 3028 06df 01       		.byte	0x1
 3029 06e0 C009     		.2byte	0x9c0
 3030 06e2 77000000 		.4byte	0x77
 3031 06e6 00000000 		.4byte	.LFB63
 3032 06ea 3C000000 		.4byte	.LFE63-.LFB63
 3033 06ee 01       		.uleb128 0x1
 3034 06ef 9C       		.byte	0x9c
 3035 06f0 20070000 		.4byte	0x720
 3036 06f4 11       		.uleb128 0x11
 3037 06f5 783100   		.ascii	"x1\000"
 3038 06f8 01       		.byte	0x1
 3039 06f9 C009     		.2byte	0x9c0
 3040 06fb 77000000 		.4byte	0x77
 3041 06ff 02       		.uleb128 0x2
 3042 0700 91       		.byte	0x91
 3043 0701 6E       		.sleb128 -18
 3044 0702 11       		.uleb128 0x11
 3045 0703 783200   		.ascii	"x2\000"
 3046 0706 01       		.byte	0x1
 3047 0707 C009     		.2byte	0x9c0
 3048 0709 77000000 		.4byte	0x77
 3049 070d 02       		.uleb128 0x2
 3050 070e 91       		.byte	0x91
 3051 070f 6C       		.sleb128 -20
 3052 0710 0A       		.uleb128 0xa
 3053 0711 746D7000 		.ascii	"tmp\000"
 3054 0715 01       		.byte	0x1
 3055 0716 C209     		.2byte	0x9c2
 3056 0718 83000000 		.4byte	0x83
 3057 071c 02       		.uleb128 0x2
 3058 071d 91       		.byte	0x91
 3059 071e 74       		.sleb128 -12
 3060 071f 00       		.byte	0
 3061 0720 0E       		.uleb128 0xe
 3062 0721 00000000 		.4byte	.LASF65
 3063 0725 01       		.byte	0x1
 3064 0726 A90A     		.2byte	0xaa9
 3065 0728 83000000 		.4byte	0x83
 3066 072c 00000000 		.4byte	.LFB64
 3067 0730 1C000000 		.4byte	.LFE64-.LFB64
 3068 0734 01       		.uleb128 0x1
 3069 0735 9C       		.byte	0x9c
 3070 0736 4A070000 		.4byte	0x74a
 3071 073a 0D       		.uleb128 0xd
 3072 073b B1010000 		.4byte	.LASF19
 3073 073f 01       		.byte	0x1
 3074 0740 A90A     		.2byte	0xaa9
 3075 0742 83000000 		.4byte	0x83
 3076 0746 02       		.uleb128 0x2
 3077 0747 91       		.byte	0x91
 3078 0748 74       		.sleb128 -12
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 105


 3079 0749 00       		.byte	0
 3080 074a 0E       		.uleb128 0xe
 3081 074b CC060000 		.4byte	.LASF66
 3082 074f 01       		.byte	0x1
 3083 0750 C30A     		.2byte	0xac3
 3084 0752 6B000000 		.4byte	0x6b
 3085 0756 00000000 		.4byte	.LFB65
 3086 075a 1C000000 		.4byte	.LFE65-.LFB65
 3087 075e 01       		.uleb128 0x1
 3088 075f 9C       		.byte	0x9c
 3089 0760 74070000 		.4byte	0x774
 3090 0764 0D       		.uleb128 0xd
 3091 0765 B1010000 		.4byte	.LASF19
 3092 0769 01       		.byte	0x1
 3093 076a C30A     		.2byte	0xac3
 3094 076c 83000000 		.4byte	0x83
 3095 0770 02       		.uleb128 0x2
 3096 0771 91       		.byte	0x91
 3097 0772 74       		.sleb128 -12
 3098 0773 00       		.byte	0
 3099 0774 0E       		.uleb128 0xe
 3100 0775 AC000000 		.4byte	.LASF67
 3101 0779 01       		.byte	0x1
 3102 077a DD0A     		.2byte	0xadd
 3103 077c 6B000000 		.4byte	0x6b
 3104 0780 00000000 		.4byte	.LFB66
 3105 0784 1C000000 		.4byte	.LFE66-.LFB66
 3106 0788 01       		.uleb128 0x1
 3107 0789 9C       		.byte	0x9c
 3108 078a 9E070000 		.4byte	0x79e
 3109 078e 0D       		.uleb128 0xd
 3110 078f DB010000 		.4byte	.LASF21
 3111 0793 01       		.byte	0x1
 3112 0794 DD0A     		.2byte	0xadd
 3113 0796 83000000 		.4byte	0x83
 3114 079a 02       		.uleb128 0x2
 3115 079b 91       		.byte	0x91
 3116 079c 74       		.sleb128 -12
 3117 079d 00       		.byte	0
 3118 079e 12       		.uleb128 0x12
 3119 079f 6C040000 		.4byte	.LASF68
 3120 07a3 01       		.byte	0x1
 3121 07a4 F70A     		.2byte	0xaf7
 3122 07a6 00000000 		.4byte	.LFB67
 3123 07aa 14000000 		.4byte	.LFE67-.LFB67
 3124 07ae 01       		.uleb128 0x1
 3125 07af 9C       		.byte	0x9c
 3126 07b0 12       		.uleb128 0x12
 3127 07b1 4C010000 		.4byte	.LASF69
 3128 07b5 01       		.byte	0x1
 3129 07b6 100B     		.2byte	0xb10
 3130 07b8 00000000 		.4byte	.LFB68
 3131 07bc 14000000 		.4byte	.LFE68-.LFB68
 3132 07c0 01       		.uleb128 0x1
 3133 07c1 9C       		.byte	0x9c
 3134 07c2 13       		.uleb128 0x13
 3135 07c3 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 106


 3136 07c7 D2070000 		.4byte	0x7d2
 3137 07cb 14       		.uleb128 0x14
 3138 07cc A4000000 		.4byte	0xa4
 3139 07d0 01       		.byte	0x1
 3140 07d1 00       		.byte	0
 3141 07d2 08       		.uleb128 0x8
 3142 07d3 19000000 		.4byte	.LASF70
 3143 07d7 01       		.byte	0x1
 3144 07d8 5D       		.byte	0x5d
 3145 07d9 C2070000 		.4byte	0x7c2
 3146 07dd 05       		.uleb128 0x5
 3147 07de 03       		.byte	0x3
 3148 07df 10000000 		.4byte	Capsense_debounceCounter
 3149 07e3 13       		.uleb128 0x13
 3150 07e4 77000000 		.4byte	0x77
 3151 07e8 F3070000 		.4byte	0x7f3
 3152 07ec 14       		.uleb128 0x14
 3153 07ed A4000000 		.4byte	0xa4
 3154 07f1 00       		.byte	0
 3155 07f2 00       		.byte	0
 3156 07f3 15       		.uleb128 0x15
 3157 07f4 A6050000 		.4byte	.LASF71
 3158 07f8 01       		.byte	0x1
 3159 07f9 2C       		.byte	0x2c
 3160 07fa E3070000 		.4byte	0x7e3
 3161 07fe 13       		.uleb128 0x13
 3162 07ff 6B000000 		.4byte	0x6b
 3163 0803 0E080000 		.4byte	0x80e
 3164 0807 14       		.uleb128 0x14
 3165 0808 A4000000 		.4byte	0xa4
 3166 080c 00       		.byte	0
 3167 080d 00       		.byte	0
 3168 080e 15       		.uleb128 0x15
 3169 080f 36070000 		.4byte	.LASF72
 3170 0813 01       		.byte	0x1
 3171 0814 2D       		.byte	0x2d
 3172 0815 FE070000 		.4byte	0x7fe
 3173 0819 13       		.uleb128 0x13
 3174 081a B2000000 		.4byte	0xb2
 3175 081e 29080000 		.4byte	0x829
 3176 0822 14       		.uleb128 0x14
 3177 0823 A4000000 		.4byte	0xa4
 3178 0827 00       		.byte	0
 3179 0828 00       		.byte	0
 3180 0829 15       		.uleb128 0x15
 3181 082a 29010000 		.4byte	.LASF73
 3182 082e 01       		.byte	0x1
 3183 082f 2E       		.byte	0x2e
 3184 0830 34080000 		.4byte	0x834
 3185 0834 05       		.uleb128 0x5
 3186 0835 19080000 		.4byte	0x819
 3187 0839 16       		.uleb128 0x16
 3188 083a 11010000 		.4byte	.LASF74
 3189 083e 01       		.byte	0x1
 3190 083f 34       		.byte	0x34
 3191 0840 E3070000 		.4byte	0x7e3
 3192 0844 05       		.uleb128 0x5
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 107


 3193 0845 03       		.byte	0x3
 3194 0846 00000000 		.4byte	Capsense_sensorBaseline
 3195 084a 16       		.uleb128 0x16
 3196 084b E5020000 		.4byte	.LASF75
 3197 084f 01       		.byte	0x1
 3198 0850 35       		.byte	0x35
 3199 0851 FE070000 		.4byte	0x7fe
 3200 0855 05       		.uleb128 0x5
 3201 0856 03       		.byte	0x3
 3202 0857 00000000 		.4byte	Capsense_sensorBaselineLow
 3203 085b 16       		.uleb128 0x16
 3204 085c 50070000 		.4byte	.LASF76
 3205 0860 01       		.byte	0x1
 3206 0861 36       		.byte	0x36
 3207 0862 FE070000 		.4byte	0x7fe
 3208 0866 05       		.uleb128 0x5
 3209 0867 03       		.byte	0x3
 3210 0868 00000000 		.4byte	Capsense_sensorSignal
 3211 086c 16       		.uleb128 0x16
 3212 086d 79000000 		.4byte	.LASF77
 3213 0871 01       		.byte	0x1
 3214 0872 37       		.byte	0x37
 3215 0873 FE070000 		.4byte	0x7fe
 3216 0877 05       		.uleb128 0x5
 3217 0878 03       		.byte	0x3
 3218 0879 00000000 		.4byte	Capsense_sensorOnMask
 3219 087d 16       		.uleb128 0x16
 3220 087e 8D060000 		.4byte	.LASF78
 3221 0882 01       		.byte	0x1
 3222 0883 39       		.byte	0x39
 3223 0884 FE070000 		.4byte	0x7fe
 3224 0888 05       		.uleb128 0x5
 3225 0889 03       		.byte	0x3
 3226 088a 00000000 		.4byte	Capsense_lowBaselineResetCnt
 3227 088e 16       		.uleb128 0x16
 3228 088f 32000000 		.4byte	.LASF79
 3229 0893 01       		.byte	0x1
 3230 0894 3A       		.byte	0x3a
 3231 0895 FE070000 		.4byte	0x7fe
 3232 0899 05       		.uleb128 0x5
 3233 089a 03       		.byte	0x3
 3234 089b 00000000 		.4byte	Capsense_lowBaselineReset
 3235 089f 16       		.uleb128 0x16
 3236 08a0 91010000 		.4byte	.LASF80
 3237 08a4 01       		.byte	0x1
 3238 08a5 49       		.byte	0x49
 3239 08a6 FE070000 		.4byte	0x7fe
 3240 08aa 05       		.uleb128 0x5
 3241 08ab 03       		.byte	0x3
 3242 08ac 00000000 		.4byte	Capsense_fingerThreshold
 3243 08b0 16       		.uleb128 0x16
 3244 08b1 5B020000 		.4byte	.LASF81
 3245 08b5 01       		.byte	0x1
 3246 08b6 4D       		.byte	0x4d
 3247 08b7 FE070000 		.4byte	0x7fe
 3248 08bb 05       		.uleb128 0x5
 3249 08bc 03       		.byte	0x3
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 108


 3250 08bd 00000000 		.4byte	Capsense_noiseThreshold
 3251 08c1 16       		.uleb128 0x16
 3252 08c2 81020000 		.4byte	.LASF82
 3253 08c6 01       		.byte	0x1
 3254 08c7 51       		.byte	0x51
 3255 08c8 FE070000 		.4byte	0x7fe
 3256 08cc 05       		.uleb128 0x5
 3257 08cd 03       		.byte	0x3
 3258 08ce 00000000 		.4byte	Capsense_negativeNoiseThreshold
 3259 08d2 16       		.uleb128 0x16
 3260 08d3 C4040000 		.4byte	.LASF83
 3261 08d7 01       		.byte	0x1
 3262 08d8 55       		.byte	0x55
 3263 08d9 FE070000 		.4byte	0x7fe
 3264 08dd 05       		.uleb128 0x5
 3265 08de 03       		.byte	0x3
 3266 08df 00000000 		.4byte	Capsense_hysteresis
 3267 08e3 16       		.uleb128 0x16
 3268 08e4 D8040000 		.4byte	.LASF84
 3269 08e8 01       		.byte	0x1
 3270 08e9 59       		.byte	0x59
 3271 08ea FE070000 		.4byte	0x7fe
 3272 08ee 05       		.uleb128 0x5
 3273 08ef 03       		.byte	0x3
 3274 08f0 00000000 		.4byte	Capsense_debounce
 3275 08f4 16       		.uleb128 0x16
 3276 08f5 00020000 		.4byte	.LASF85
 3277 08f9 01       		.byte	0x1
 3278 08fa 61       		.byte	0x61
 3279 08fb 05090000 		.4byte	0x905
 3280 08ff 05       		.uleb128 0x5
 3281 0900 03       		.byte	0x3
 3282 0901 00000000 		.4byte	Capsense_rawDataIndex
 3283 0905 05       		.uleb128 0x5
 3284 0906 19080000 		.4byte	0x819
 3285 090a 16       		.uleb128 0x16
 3286 090b 65050000 		.4byte	.LASF86
 3287 090f 01       		.byte	0x1
 3288 0910 65       		.byte	0x65
 3289 0911 1B090000 		.4byte	0x91b
 3290 0915 05       		.uleb128 0x5
 3291 0916 03       		.byte	0x3
 3292 0917 00000000 		.4byte	Capsense_numberOfSensors
 3293 091b 05       		.uleb128 0x5
 3294 091c 19080000 		.4byte	0x819
 3295 0920 16       		.uleb128 0x16
 3296 0921 E8010000 		.4byte	.LASF87
 3297 0925 01       		.byte	0x1
 3298 0926 27       		.byte	0x27
 3299 0927 E3070000 		.4byte	0x7e3
 3300 092b 05       		.uleb128 0x5
 3301 092c 03       		.byte	0x3
 3302 092d 00000000 		.4byte	Capsense_rawFilterData1
 3303 0931 16       		.uleb128 0x16
 3304 0932 3B020000 		.4byte	.LASF88
 3305 0936 01       		.byte	0x1
 3306 0937 45       		.byte	0x45
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 109


 3307 0938 6B000000 		.4byte	0x6b
 3308 093c 05       		.uleb128 0x5
 3309 093d 03       		.byte	0x3
 3310 093e 00000000 		.4byte	Capsense_enableRawFilters
 3311 0942 00       		.byte	0
 3312              		.section	.debug_abbrev,"",%progbits
 3313              	.Ldebug_abbrev0:
 3314 0000 01       		.uleb128 0x1
 3315 0001 11       		.uleb128 0x11
 3316 0002 01       		.byte	0x1
 3317 0003 25       		.uleb128 0x25
 3318 0004 0E       		.uleb128 0xe
 3319 0005 13       		.uleb128 0x13
 3320 0006 0B       		.uleb128 0xb
 3321 0007 03       		.uleb128 0x3
 3322 0008 0E       		.uleb128 0xe
 3323 0009 1B       		.uleb128 0x1b
 3324 000a 0E       		.uleb128 0xe
 3325 000b 55       		.uleb128 0x55
 3326 000c 17       		.uleb128 0x17
 3327 000d 11       		.uleb128 0x11
 3328 000e 01       		.uleb128 0x1
 3329 000f 10       		.uleb128 0x10
 3330 0010 17       		.uleb128 0x17
 3331 0011 00       		.byte	0
 3332 0012 00       		.byte	0
 3333 0013 02       		.uleb128 0x2
 3334 0014 24       		.uleb128 0x24
 3335 0015 00       		.byte	0
 3336 0016 0B       		.uleb128 0xb
 3337 0017 0B       		.uleb128 0xb
 3338 0018 3E       		.uleb128 0x3e
 3339 0019 0B       		.uleb128 0xb
 3340 001a 03       		.uleb128 0x3
 3341 001b 0E       		.uleb128 0xe
 3342 001c 00       		.byte	0
 3343 001d 00       		.byte	0
 3344 001e 03       		.uleb128 0x3
 3345 001f 24       		.uleb128 0x24
 3346 0020 00       		.byte	0
 3347 0021 0B       		.uleb128 0xb
 3348 0022 0B       		.uleb128 0xb
 3349 0023 3E       		.uleb128 0x3e
 3350 0024 0B       		.uleb128 0xb
 3351 0025 03       		.uleb128 0x3
 3352 0026 08       		.uleb128 0x8
 3353 0027 00       		.byte	0
 3354 0028 00       		.byte	0
 3355 0029 04       		.uleb128 0x4
 3356 002a 16       		.uleb128 0x16
 3357 002b 00       		.byte	0
 3358 002c 03       		.uleb128 0x3
 3359 002d 0E       		.uleb128 0xe
 3360 002e 3A       		.uleb128 0x3a
 3361 002f 0B       		.uleb128 0xb
 3362 0030 3B       		.uleb128 0x3b
 3363 0031 05       		.uleb128 0x5
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 110


 3364 0032 49       		.uleb128 0x49
 3365 0033 13       		.uleb128 0x13
 3366 0034 00       		.byte	0
 3367 0035 00       		.byte	0
 3368 0036 05       		.uleb128 0x5
 3369 0037 26       		.uleb128 0x26
 3370 0038 00       		.byte	0
 3371 0039 49       		.uleb128 0x49
 3372 003a 13       		.uleb128 0x13
 3373 003b 00       		.byte	0
 3374 003c 00       		.byte	0
 3375 003d 06       		.uleb128 0x6
 3376 003e 2E       		.uleb128 0x2e
 3377 003f 01       		.byte	0x1
 3378 0040 3F       		.uleb128 0x3f
 3379 0041 19       		.uleb128 0x19
 3380 0042 03       		.uleb128 0x3
 3381 0043 0E       		.uleb128 0xe
 3382 0044 3A       		.uleb128 0x3a
 3383 0045 0B       		.uleb128 0xb
 3384 0046 3B       		.uleb128 0x3b
 3385 0047 0B       		.uleb128 0xb
 3386 0048 27       		.uleb128 0x27
 3387 0049 19       		.uleb128 0x19
 3388 004a 11       		.uleb128 0x11
 3389 004b 01       		.uleb128 0x1
 3390 004c 12       		.uleb128 0x12
 3391 004d 06       		.uleb128 0x6
 3392 004e 40       		.uleb128 0x40
 3393 004f 18       		.uleb128 0x18
 3394 0050 9742     		.uleb128 0x2117
 3395 0052 19       		.uleb128 0x19
 3396 0053 01       		.uleb128 0x1
 3397 0054 13       		.uleb128 0x13
 3398 0055 00       		.byte	0
 3399 0056 00       		.byte	0
 3400 0057 07       		.uleb128 0x7
 3401 0058 05       		.uleb128 0x5
 3402 0059 00       		.byte	0
 3403 005a 03       		.uleb128 0x3
 3404 005b 0E       		.uleb128 0xe
 3405 005c 3A       		.uleb128 0x3a
 3406 005d 0B       		.uleb128 0xb
 3407 005e 3B       		.uleb128 0x3b
 3408 005f 0B       		.uleb128 0xb
 3409 0060 49       		.uleb128 0x49
 3410 0061 13       		.uleb128 0x13
 3411 0062 02       		.uleb128 0x2
 3412 0063 18       		.uleb128 0x18
 3413 0064 00       		.byte	0
 3414 0065 00       		.byte	0
 3415 0066 08       		.uleb128 0x8
 3416 0067 34       		.uleb128 0x34
 3417 0068 00       		.byte	0
 3418 0069 03       		.uleb128 0x3
 3419 006a 0E       		.uleb128 0xe
 3420 006b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 111


 3421 006c 0B       		.uleb128 0xb
 3422 006d 3B       		.uleb128 0x3b
 3423 006e 0B       		.uleb128 0xb
 3424 006f 49       		.uleb128 0x49
 3425 0070 13       		.uleb128 0x13
 3426 0071 02       		.uleb128 0x2
 3427 0072 18       		.uleb128 0x18
 3428 0073 00       		.byte	0
 3429 0074 00       		.byte	0
 3430 0075 09       		.uleb128 0x9
 3431 0076 2E       		.uleb128 0x2e
 3432 0077 01       		.byte	0x1
 3433 0078 3F       		.uleb128 0x3f
 3434 0079 19       		.uleb128 0x19
 3435 007a 03       		.uleb128 0x3
 3436 007b 0E       		.uleb128 0xe
 3437 007c 3A       		.uleb128 0x3a
 3438 007d 0B       		.uleb128 0xb
 3439 007e 3B       		.uleb128 0x3b
 3440 007f 0B       		.uleb128 0xb
 3441 0080 27       		.uleb128 0x27
 3442 0081 19       		.uleb128 0x19
 3443 0082 11       		.uleb128 0x11
 3444 0083 01       		.uleb128 0x1
 3445 0084 12       		.uleb128 0x12
 3446 0085 06       		.uleb128 0x6
 3447 0086 40       		.uleb128 0x40
 3448 0087 18       		.uleb128 0x18
 3449 0088 9642     		.uleb128 0x2116
 3450 008a 19       		.uleb128 0x19
 3451 008b 01       		.uleb128 0x1
 3452 008c 13       		.uleb128 0x13
 3453 008d 00       		.byte	0
 3454 008e 00       		.byte	0
 3455 008f 0A       		.uleb128 0xa
 3456 0090 34       		.uleb128 0x34
 3457 0091 00       		.byte	0
 3458 0092 03       		.uleb128 0x3
 3459 0093 08       		.uleb128 0x8
 3460 0094 3A       		.uleb128 0x3a
 3461 0095 0B       		.uleb128 0xb
 3462 0096 3B       		.uleb128 0x3b
 3463 0097 05       		.uleb128 0x5
 3464 0098 49       		.uleb128 0x49
 3465 0099 13       		.uleb128 0x13
 3466 009a 02       		.uleb128 0x2
 3467 009b 18       		.uleb128 0x18
 3468 009c 00       		.byte	0
 3469 009d 00       		.byte	0
 3470 009e 0B       		.uleb128 0xb
 3471 009f 2E       		.uleb128 0x2e
 3472 00a0 01       		.byte	0x1
 3473 00a1 3F       		.uleb128 0x3f
 3474 00a2 19       		.uleb128 0x19
 3475 00a3 03       		.uleb128 0x3
 3476 00a4 0E       		.uleb128 0xe
 3477 00a5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 112


 3478 00a6 0B       		.uleb128 0xb
 3479 00a7 3B       		.uleb128 0x3b
 3480 00a8 05       		.uleb128 0x5
 3481 00a9 27       		.uleb128 0x27
 3482 00aa 19       		.uleb128 0x19
 3483 00ab 11       		.uleb128 0x11
 3484 00ac 01       		.uleb128 0x1
 3485 00ad 12       		.uleb128 0x12
 3486 00ae 06       		.uleb128 0x6
 3487 00af 40       		.uleb128 0x40
 3488 00b0 18       		.uleb128 0x18
 3489 00b1 9642     		.uleb128 0x2116
 3490 00b3 19       		.uleb128 0x19
 3491 00b4 01       		.uleb128 0x1
 3492 00b5 13       		.uleb128 0x13
 3493 00b6 00       		.byte	0
 3494 00b7 00       		.byte	0
 3495 00b8 0C       		.uleb128 0xc
 3496 00b9 34       		.uleb128 0x34
 3497 00ba 00       		.byte	0
 3498 00bb 03       		.uleb128 0x3
 3499 00bc 0E       		.uleb128 0xe
 3500 00bd 3A       		.uleb128 0x3a
 3501 00be 0B       		.uleb128 0xb
 3502 00bf 3B       		.uleb128 0x3b
 3503 00c0 05       		.uleb128 0x5
 3504 00c1 49       		.uleb128 0x49
 3505 00c2 13       		.uleb128 0x13
 3506 00c3 02       		.uleb128 0x2
 3507 00c4 18       		.uleb128 0x18
 3508 00c5 00       		.byte	0
 3509 00c6 00       		.byte	0
 3510 00c7 0D       		.uleb128 0xd
 3511 00c8 05       		.uleb128 0x5
 3512 00c9 00       		.byte	0
 3513 00ca 03       		.uleb128 0x3
 3514 00cb 0E       		.uleb128 0xe
 3515 00cc 3A       		.uleb128 0x3a
 3516 00cd 0B       		.uleb128 0xb
 3517 00ce 3B       		.uleb128 0x3b
 3518 00cf 05       		.uleb128 0x5
 3519 00d0 49       		.uleb128 0x49
 3520 00d1 13       		.uleb128 0x13
 3521 00d2 02       		.uleb128 0x2
 3522 00d3 18       		.uleb128 0x18
 3523 00d4 00       		.byte	0
 3524 00d5 00       		.byte	0
 3525 00d6 0E       		.uleb128 0xe
 3526 00d7 2E       		.uleb128 0x2e
 3527 00d8 01       		.byte	0x1
 3528 00d9 3F       		.uleb128 0x3f
 3529 00da 19       		.uleb128 0x19
 3530 00db 03       		.uleb128 0x3
 3531 00dc 0E       		.uleb128 0xe
 3532 00dd 3A       		.uleb128 0x3a
 3533 00de 0B       		.uleb128 0xb
 3534 00df 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 113


 3535 00e0 05       		.uleb128 0x5
 3536 00e1 27       		.uleb128 0x27
 3537 00e2 19       		.uleb128 0x19
 3538 00e3 49       		.uleb128 0x49
 3539 00e4 13       		.uleb128 0x13
 3540 00e5 11       		.uleb128 0x11
 3541 00e6 01       		.uleb128 0x1
 3542 00e7 12       		.uleb128 0x12
 3543 00e8 06       		.uleb128 0x6
 3544 00e9 40       		.uleb128 0x40
 3545 00ea 18       		.uleb128 0x18
 3546 00eb 9742     		.uleb128 0x2117
 3547 00ed 19       		.uleb128 0x19
 3548 00ee 01       		.uleb128 0x1
 3549 00ef 13       		.uleb128 0x13
 3550 00f0 00       		.byte	0
 3551 00f1 00       		.byte	0
 3552 00f2 0F       		.uleb128 0xf
 3553 00f3 2E       		.uleb128 0x2e
 3554 00f4 01       		.byte	0x1
 3555 00f5 3F       		.uleb128 0x3f
 3556 00f6 19       		.uleb128 0x19
 3557 00f7 03       		.uleb128 0x3
 3558 00f8 0E       		.uleb128 0xe
 3559 00f9 3A       		.uleb128 0x3a
 3560 00fa 0B       		.uleb128 0xb
 3561 00fb 3B       		.uleb128 0x3b
 3562 00fc 05       		.uleb128 0x5
 3563 00fd 27       		.uleb128 0x27
 3564 00fe 19       		.uleb128 0x19
 3565 00ff 11       		.uleb128 0x11
 3566 0100 01       		.uleb128 0x1
 3567 0101 12       		.uleb128 0x12
 3568 0102 06       		.uleb128 0x6
 3569 0103 40       		.uleb128 0x40
 3570 0104 18       		.uleb128 0x18
 3571 0105 9742     		.uleb128 0x2117
 3572 0107 19       		.uleb128 0x19
 3573 0108 01       		.uleb128 0x1
 3574 0109 13       		.uleb128 0x13
 3575 010a 00       		.byte	0
 3576 010b 00       		.byte	0
 3577 010c 10       		.uleb128 0x10
 3578 010d 2E       		.uleb128 0x2e
 3579 010e 01       		.byte	0x1
 3580 010f 3F       		.uleb128 0x3f
 3581 0110 19       		.uleb128 0x19
 3582 0111 03       		.uleb128 0x3
 3583 0112 0E       		.uleb128 0xe
 3584 0113 3A       		.uleb128 0x3a
 3585 0114 0B       		.uleb128 0xb
 3586 0115 3B       		.uleb128 0x3b
 3587 0116 05       		.uleb128 0x5
 3588 0117 27       		.uleb128 0x27
 3589 0118 19       		.uleb128 0x19
 3590 0119 49       		.uleb128 0x49
 3591 011a 13       		.uleb128 0x13
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 114


 3592 011b 11       		.uleb128 0x11
 3593 011c 01       		.uleb128 0x1
 3594 011d 12       		.uleb128 0x12
 3595 011e 06       		.uleb128 0x6
 3596 011f 40       		.uleb128 0x40
 3597 0120 18       		.uleb128 0x18
 3598 0121 9642     		.uleb128 0x2116
 3599 0123 19       		.uleb128 0x19
 3600 0124 01       		.uleb128 0x1
 3601 0125 13       		.uleb128 0x13
 3602 0126 00       		.byte	0
 3603 0127 00       		.byte	0
 3604 0128 11       		.uleb128 0x11
 3605 0129 05       		.uleb128 0x5
 3606 012a 00       		.byte	0
 3607 012b 03       		.uleb128 0x3
 3608 012c 08       		.uleb128 0x8
 3609 012d 3A       		.uleb128 0x3a
 3610 012e 0B       		.uleb128 0xb
 3611 012f 3B       		.uleb128 0x3b
 3612 0130 05       		.uleb128 0x5
 3613 0131 49       		.uleb128 0x49
 3614 0132 13       		.uleb128 0x13
 3615 0133 02       		.uleb128 0x2
 3616 0134 18       		.uleb128 0x18
 3617 0135 00       		.byte	0
 3618 0136 00       		.byte	0
 3619 0137 12       		.uleb128 0x12
 3620 0138 2E       		.uleb128 0x2e
 3621 0139 00       		.byte	0
 3622 013a 3F       		.uleb128 0x3f
 3623 013b 19       		.uleb128 0x19
 3624 013c 03       		.uleb128 0x3
 3625 013d 0E       		.uleb128 0xe
 3626 013e 3A       		.uleb128 0x3a
 3627 013f 0B       		.uleb128 0xb
 3628 0140 3B       		.uleb128 0x3b
 3629 0141 05       		.uleb128 0x5
 3630 0142 27       		.uleb128 0x27
 3631 0143 19       		.uleb128 0x19
 3632 0144 11       		.uleb128 0x11
 3633 0145 01       		.uleb128 0x1
 3634 0146 12       		.uleb128 0x12
 3635 0147 06       		.uleb128 0x6
 3636 0148 40       		.uleb128 0x40
 3637 0149 18       		.uleb128 0x18
 3638 014a 9742     		.uleb128 0x2117
 3639 014c 19       		.uleb128 0x19
 3640 014d 00       		.byte	0
 3641 014e 00       		.byte	0
 3642 014f 13       		.uleb128 0x13
 3643 0150 01       		.uleb128 0x1
 3644 0151 01       		.byte	0x1
 3645 0152 49       		.uleb128 0x49
 3646 0153 13       		.uleb128 0x13
 3647 0154 01       		.uleb128 0x1
 3648 0155 13       		.uleb128 0x13
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 115


 3649 0156 00       		.byte	0
 3650 0157 00       		.byte	0
 3651 0158 14       		.uleb128 0x14
 3652 0159 21       		.uleb128 0x21
 3653 015a 00       		.byte	0
 3654 015b 49       		.uleb128 0x49
 3655 015c 13       		.uleb128 0x13
 3656 015d 2F       		.uleb128 0x2f
 3657 015e 0B       		.uleb128 0xb
 3658 015f 00       		.byte	0
 3659 0160 00       		.byte	0
 3660 0161 15       		.uleb128 0x15
 3661 0162 34       		.uleb128 0x34
 3662 0163 00       		.byte	0
 3663 0164 03       		.uleb128 0x3
 3664 0165 0E       		.uleb128 0xe
 3665 0166 3A       		.uleb128 0x3a
 3666 0167 0B       		.uleb128 0xb
 3667 0168 3B       		.uleb128 0x3b
 3668 0169 0B       		.uleb128 0xb
 3669 016a 49       		.uleb128 0x49
 3670 016b 13       		.uleb128 0x13
 3671 016c 3F       		.uleb128 0x3f
 3672 016d 19       		.uleb128 0x19
 3673 016e 3C       		.uleb128 0x3c
 3674 016f 19       		.uleb128 0x19
 3675 0170 00       		.byte	0
 3676 0171 00       		.byte	0
 3677 0172 16       		.uleb128 0x16
 3678 0173 34       		.uleb128 0x34
 3679 0174 00       		.byte	0
 3680 0175 03       		.uleb128 0x3
 3681 0176 0E       		.uleb128 0xe
 3682 0177 3A       		.uleb128 0x3a
 3683 0178 0B       		.uleb128 0xb
 3684 0179 3B       		.uleb128 0x3b
 3685 017a 0B       		.uleb128 0xb
 3686 017b 49       		.uleb128 0x49
 3687 017c 13       		.uleb128 0x13
 3688 017d 3F       		.uleb128 0x3f
 3689 017e 19       		.uleb128 0x19
 3690 017f 02       		.uleb128 0x2
 3691 0180 18       		.uleb128 0x18
 3692 0181 00       		.byte	0
 3693 0182 00       		.byte	0
 3694 0183 00       		.byte	0
 3695              		.section	.debug_aranges,"",%progbits
 3696 0000 1C010000 		.4byte	0x11c
 3697 0004 0200     		.2byte	0x2
 3698 0006 00000000 		.4byte	.Ldebug_info0
 3699 000a 04       		.byte	0x4
 3700 000b 00       		.byte	0
 3701 000c 0000     		.2byte	0
 3702 000e 0000     		.2byte	0
 3703 0010 00000000 		.4byte	.LFB36
 3704 0014 88000000 		.4byte	.LFE36-.LFB36
 3705 0018 00000000 		.4byte	.LFB37
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 116


 3706 001c 2A000000 		.4byte	.LFE37-.LFB37
 3707 0020 00000000 		.4byte	.LFB38
 3708 0024 28000000 		.4byte	.LFE38-.LFB38
 3709 0028 00000000 		.4byte	.LFB39
 3710 002c 50000000 		.4byte	.LFE39-.LFB39
 3711 0030 00000000 		.4byte	.LFB40
 3712 0034 24020000 		.4byte	.LFE40-.LFB40
 3713 0038 00000000 		.4byte	.LFB41
 3714 003c 18000000 		.4byte	.LFE41-.LFB41
 3715 0040 00000000 		.4byte	.LFB42
 3716 0044 44000000 		.4byte	.LFE42-.LFB42
 3717 0048 00000000 		.4byte	.LFB43
 3718 004c 58000000 		.4byte	.LFE43-.LFB43
 3719 0050 00000000 		.4byte	.LFB44
 3720 0054 1C000000 		.4byte	.LFE44-.LFB44
 3721 0058 00000000 		.4byte	.LFB45
 3722 005c 28000000 		.4byte	.LFE45-.LFB45
 3723 0060 00000000 		.4byte	.LFB46
 3724 0064 1C000000 		.4byte	.LFE46-.LFB46
 3725 0068 00000000 		.4byte	.LFB47
 3726 006c 28000000 		.4byte	.LFE47-.LFB47
 3727 0070 00000000 		.4byte	.LFB48
 3728 0074 1C000000 		.4byte	.LFE48-.LFB48
 3729 0078 00000000 		.4byte	.LFB49
 3730 007c 1C000000 		.4byte	.LFE49-.LFB49
 3731 0080 00000000 		.4byte	.LFB50
 3732 0084 1C000000 		.4byte	.LFE50-.LFB50
 3733 0088 00000000 		.4byte	.LFB51
 3734 008c 1C000000 		.4byte	.LFE51-.LFB51
 3735 0090 00000000 		.4byte	.LFB52
 3736 0094 28000000 		.4byte	.LFE52-.LFB52
 3737 0098 00000000 		.4byte	.LFB53
 3738 009c 28000000 		.4byte	.LFE53-.LFB53
 3739 00a0 00000000 		.4byte	.LFB54
 3740 00a4 28000000 		.4byte	.LFE54-.LFB54
 3741 00a8 00000000 		.4byte	.LFB55
 3742 00ac 28000000 		.4byte	.LFE55-.LFB55
 3743 00b0 00000000 		.4byte	.LFB56
 3744 00b4 28000000 		.4byte	.LFE56-.LFB56
 3745 00b8 00000000 		.4byte	.LFB57
 3746 00bc 28000000 		.4byte	.LFE57-.LFB57
 3747 00c0 00000000 		.4byte	.LFB58
 3748 00c4 30010000 		.4byte	.LFE58-.LFB58
 3749 00c8 00000000 		.4byte	.LFB59
 3750 00cc 42000000 		.4byte	.LFE59-.LFB59
 3751 00d0 00000000 		.4byte	.LFB60
 3752 00d4 36000000 		.4byte	.LFE60-.LFB60
 3753 00d8 00000000 		.4byte	.LFB61
 3754 00dc 5C000000 		.4byte	.LFE61-.LFB61
 3755 00e0 00000000 		.4byte	.LFB62
 3756 00e4 5C000000 		.4byte	.LFE62-.LFB62
 3757 00e8 00000000 		.4byte	.LFB63
 3758 00ec 3C000000 		.4byte	.LFE63-.LFB63
 3759 00f0 00000000 		.4byte	.LFB64
 3760 00f4 1C000000 		.4byte	.LFE64-.LFB64
 3761 00f8 00000000 		.4byte	.LFB65
 3762 00fc 1C000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 117


 3763 0100 00000000 		.4byte	.LFB66
 3764 0104 1C000000 		.4byte	.LFE66-.LFB66
 3765 0108 00000000 		.4byte	.LFB67
 3766 010c 14000000 		.4byte	.LFE67-.LFB67
 3767 0110 00000000 		.4byte	.LFB68
 3768 0114 14000000 		.4byte	.LFE68-.LFB68
 3769 0118 00000000 		.4byte	0
 3770 011c 00000000 		.4byte	0
 3771              		.section	.debug_ranges,"",%progbits
 3772              	.Ldebug_ranges0:
 3773 0000 00000000 		.4byte	.LFB36
 3774 0004 88000000 		.4byte	.LFE36
 3775 0008 00000000 		.4byte	.LFB37
 3776 000c 2A000000 		.4byte	.LFE37
 3777 0010 00000000 		.4byte	.LFB38
 3778 0014 28000000 		.4byte	.LFE38
 3779 0018 00000000 		.4byte	.LFB39
 3780 001c 50000000 		.4byte	.LFE39
 3781 0020 00000000 		.4byte	.LFB40
 3782 0024 24020000 		.4byte	.LFE40
 3783 0028 00000000 		.4byte	.LFB41
 3784 002c 18000000 		.4byte	.LFE41
 3785 0030 00000000 		.4byte	.LFB42
 3786 0034 44000000 		.4byte	.LFE42
 3787 0038 00000000 		.4byte	.LFB43
 3788 003c 58000000 		.4byte	.LFE43
 3789 0040 00000000 		.4byte	.LFB44
 3790 0044 1C000000 		.4byte	.LFE44
 3791 0048 00000000 		.4byte	.LFB45
 3792 004c 28000000 		.4byte	.LFE45
 3793 0050 00000000 		.4byte	.LFB46
 3794 0054 1C000000 		.4byte	.LFE46
 3795 0058 00000000 		.4byte	.LFB47
 3796 005c 28000000 		.4byte	.LFE47
 3797 0060 00000000 		.4byte	.LFB48
 3798 0064 1C000000 		.4byte	.LFE48
 3799 0068 00000000 		.4byte	.LFB49
 3800 006c 1C000000 		.4byte	.LFE49
 3801 0070 00000000 		.4byte	.LFB50
 3802 0074 1C000000 		.4byte	.LFE50
 3803 0078 00000000 		.4byte	.LFB51
 3804 007c 1C000000 		.4byte	.LFE51
 3805 0080 00000000 		.4byte	.LFB52
 3806 0084 28000000 		.4byte	.LFE52
 3807 0088 00000000 		.4byte	.LFB53
 3808 008c 28000000 		.4byte	.LFE53
 3809 0090 00000000 		.4byte	.LFB54
 3810 0094 28000000 		.4byte	.LFE54
 3811 0098 00000000 		.4byte	.LFB55
 3812 009c 28000000 		.4byte	.LFE55
 3813 00a0 00000000 		.4byte	.LFB56
 3814 00a4 28000000 		.4byte	.LFE56
 3815 00a8 00000000 		.4byte	.LFB57
 3816 00ac 28000000 		.4byte	.LFE57
 3817 00b0 00000000 		.4byte	.LFB58
 3818 00b4 30010000 		.4byte	.LFE58
 3819 00b8 00000000 		.4byte	.LFB59
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 118


 3820 00bc 42000000 		.4byte	.LFE59
 3821 00c0 00000000 		.4byte	.LFB60
 3822 00c4 36000000 		.4byte	.LFE60
 3823 00c8 00000000 		.4byte	.LFB61
 3824 00cc 5C000000 		.4byte	.LFE61
 3825 00d0 00000000 		.4byte	.LFB62
 3826 00d4 5C000000 		.4byte	.LFE62
 3827 00d8 00000000 		.4byte	.LFB63
 3828 00dc 3C000000 		.4byte	.LFE63
 3829 00e0 00000000 		.4byte	.LFB64
 3830 00e4 1C000000 		.4byte	.LFE64
 3831 00e8 00000000 		.4byte	.LFB65
 3832 00ec 1C000000 		.4byte	.LFE65
 3833 00f0 00000000 		.4byte	.LFB66
 3834 00f4 1C000000 		.4byte	.LFE66
 3835 00f8 00000000 		.4byte	.LFB67
 3836 00fc 14000000 		.4byte	.LFE67
 3837 0100 00000000 		.4byte	.LFB68
 3838 0104 14000000 		.4byte	.LFE68
 3839 0108 00000000 		.4byte	0
 3840 010c 00000000 		.4byte	0
 3841              		.section	.debug_line,"",%progbits
 3842              	.Ldebug_line0:
 3843 0000 B4030000 		.section	.debug_str,"MS",%progbits,1
 3843      02004A00 
 3843      00000201 
 3843      FB0E0D00 
 3843      01010101 
 3844              	.LASF65:
 3845 0000 43617073 		.ascii	"Capsense_GetWidgetNumber\000"
 3845      656E7365 
 3845      5F476574 
 3845      57696467 
 3845      65744E75 
 3846              	.LASF70:
 3847 0019 43617073 		.ascii	"Capsense_debounceCounter\000"
 3847      656E7365 
 3847      5F646562 
 3847      6F756E63 
 3847      65436F75 
 3848              	.LASF79:
 3849 0032 43617073 		.ascii	"Capsense_lowBaselineReset\000"
 3849      656E7365 
 3849      5F6C6F77 
 3849      42617365 
 3849      6C696E65 
 3850              	.LASF17:
 3851 004c 43617073 		.ascii	"Capsense_BaseInit\000"
 3851      656E7365 
 3851      5F426173 
 3851      65496E69 
 3851      7400
 3852              	.LASF47:
 3853 005e 43617073 		.ascii	"Capsense_SetNoiseThreshold\000"
 3853      656E7365 
 3853      5F536574 
 3853      4E6F6973 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 119


 3853      65546872 
 3854              	.LASF77:
 3855 0079 43617073 		.ascii	"Capsense_sensorOnMask\000"
 3855      656E7365 
 3855      5F73656E 
 3855      736F724F 
 3855      6E4D6173 
 3856              	.LASF51:
 3857 008f 43617073 		.ascii	"Capsense_SetLowBaselineReset\000"
 3857      656E7365 
 3857      5F536574 
 3857      4C6F7742 
 3857      6173656C 
 3858              	.LASF67:
 3859 00ac 43617073 		.ascii	"Capsense_GetDebounce\000"
 3859      656E7365 
 3859      5F476574 
 3859      4465626F 
 3859      756E6365 
 3860              	.LASF2:
 3861 00c1 73686F72 		.ascii	"short int\000"
 3861      7420696E 
 3861      7400
 3862              	.LASF28:
 3863 00cb 66696C74 		.ascii	"filteredRawData\000"
 3863      65726564 
 3863      52617744 
 3863      61746100 
 3864              	.LASF36:
 3865 00db 43617073 		.ascii	"Capsense_SetBaselineData\000"
 3865      656E7365 
 3865      5F536574 
 3865      42617365 
 3865      6C696E65 
 3866              	.LASF63:
 3867 00f4 43617073 		.ascii	"Capsense_DisableWidget\000"
 3867      656E7365 
 3867      5F446973 
 3867      61626C65 
 3867      57696467 
 3868              	.LASF60:
 3869 010b 73746174 		.ascii	"state\000"
 3869      6500
 3870              	.LASF74:
 3871 0111 43617073 		.ascii	"Capsense_sensorBaseline\000"
 3871      656E7365 
 3871      5F73656E 
 3871      736F7242 
 3871      6173656C 
 3872              	.LASF73:
 3873 0129 43617073 		.ascii	"Capsense_widgetNumber\000"
 3873      656E7365 
 3873      5F776964 
 3873      6765744E 
 3873      756D6265 
 3874              	.LASF59:
 3875 013f 6E756D4F 		.ascii	"numOfSensors\000"
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 120


 3875      6653656E 
 3875      736F7273 
 3875      00
 3876              	.LASF69:
 3877 014c 43617073 		.ascii	"Capsense_DisableRawDataFilters\000"
 3877      656E7365 
 3877      5F446973 
 3877      61626C65 
 3877      52617744 
 3878              	.LASF61:
 3879 016b 43617073 		.ascii	"Capsense_CheckIsAnyWidgetActive\000"
 3879      656E7365 
 3879      5F436865 
 3879      636B4973 
 3879      416E7957 
 3880              	.LASF41:
 3881 018b 76616C75 		.ascii	"value\000"
 3881      6500
 3882              	.LASF80:
 3883 0191 43617073 		.ascii	"Capsense_fingerThreshold\000"
 3883      656E7365 
 3883      5F66696E 
 3883      67657254 
 3883      68726573 
 3884              	.LASF10:
 3885 01aa 75696E74 		.ascii	"uint16\000"
 3885      313600
 3886              	.LASF19:
 3887 01b1 73656E73 		.ascii	"sensor\000"
 3887      6F7200
 3888              	.LASF49:
 3889 01b8 43617073 		.ascii	"Capsense_SetNegativeNoiseThreshold\000"
 3889      656E7365 
 3889      5F536574 
 3889      4E656761 
 3889      74697665 
 3890              	.LASF21:
 3891 01db 77696467 		.ascii	"widget\000"
 3891      657400
 3892              	.LASF9:
 3893 01e2 75696E74 		.ascii	"uint8\000"
 3893      3800
 3894              	.LASF87:
 3895 01e8 43617073 		.ascii	"Capsense_rawFilterData1\000"
 3895      656E7365 
 3895      5F726177 
 3895      46696C74 
 3895      65724461 
 3896              	.LASF85:
 3897 0200 43617073 		.ascii	"Capsense_rawDataIndex\000"
 3897      656E7365 
 3897      5F726177 
 3897      44617461 
 3897      496E6465 
 3898              	.LASF48:
 3899 0216 43617073 		.ascii	"Capsense_SetFingerHysteresis\000"
 3899      656E7365 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 121


 3899      5F536574 
 3899      46696E67 
 3899      65724879 
 3900              	.LASF27:
 3901 0233 74656D70 		.ascii	"tempRaw\000"
 3901      52617700 
 3902              	.LASF88:
 3903 023b 43617073 		.ascii	"Capsense_enableRawFilters\000"
 3903      656E7365 
 3903      5F656E61 
 3903      626C6552 
 3903      61774669 
 3904              	.LASF12:
 3905 0255 666C6F61 		.ascii	"float\000"
 3905      7400
 3906              	.LASF81:
 3907 025b 43617073 		.ascii	"Capsense_noiseThreshold\000"
 3907      656E7365 
 3907      5F6E6F69 
 3907      73655468 
 3907      72657368 
 3908              	.LASF6:
 3909 0273 6C6F6E67 		.ascii	"long long int\000"
 3909      206C6F6E 
 3909      6720696E 
 3909      7400
 3910              	.LASF82:
 3911 0281 43617073 		.ascii	"Capsense_negativeNoiseThreshold\000"
 3911      656E7365 
 3911      5F6E6567 
 3911      61746976 
 3911      654E6F69 
 3912              	.LASF4:
 3913 02a1 6C6F6E67 		.ascii	"long int\000"
 3913      20696E74 
 3913      00
 3914              	.LASF53:
 3915 02aa 6465626F 		.ascii	"debounce\000"
 3915      756E6365 
 3915      00
 3916              	.LASF24:
 3917 02b3 43617073 		.ascii	"Capsense_UpdateBaselineNoThreshold\000"
 3917      656E7365 
 3917      5F557064 
 3917      61746542 
 3917      6173656C 
 3918              	.LASF29:
 3919 02d6 6E6F6973 		.ascii	"noiseThreshold\000"
 3919      65546872 
 3919      6573686F 
 3919      6C6400
 3920              	.LASF75:
 3921 02e5 43617073 		.ascii	"Capsense_sensorBaselineLow\000"
 3921      656E7365 
 3921      5F73656E 
 3921      736F7242 
 3921      6173656C 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 122


 3922              	.LASF89:
 3923 0300 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3923      43313120 
 3923      352E342E 
 3923      31203230 
 3923      31363036 
 3924 0333 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3924      20726576 
 3924      6973696F 
 3924      6E203233 
 3924      37373135 
 3925 0366 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3925      66756E63 
 3925      74696F6E 
 3925      2D736563 
 3925      74696F6E 
 3926              	.LASF22:
 3927 038e 43617073 		.ascii	"Capsense_InitializeEnabledBaselines\000"
 3927      656E7365 
 3927      5F496E69 
 3927      7469616C 
 3927      697A6545 
 3928              	.LASF56:
 3929 03b2 68797374 		.ascii	"hysteresis\000"
 3929      65726573 
 3929      697300
 3930              	.LASF40:
 3931 03bd 43617073 		.ascii	"Capsense_SetDiffCountData\000"
 3931      656E7365 
 3931      5F536574 
 3931      44696666 
 3931      436F756E 
 3932              	.LASF16:
 3933 03d7 6C6F6E67 		.ascii	"long double\000"
 3933      20646F75 
 3933      626C6500 
 3934              	.LASF1:
 3935 03e3 756E7369 		.ascii	"unsigned char\000"
 3935      676E6564 
 3935      20636861 
 3935      7200
 3936              	.LASF38:
 3937 03f1 43617073 		.ascii	"Capsense_GetBaselineData\000"
 3937      656E7365 
 3937      5F476574 
 3937      42617365 
 3937      6C696E65 
 3938              	.LASF43:
 3939 040a 43617073 		.ascii	"Capsense_GetNoiseThreshold\000"
 3939      656E7365 
 3939      5F476574 
 3939      4E6F6973 
 3939      65546872 
 3940              	.LASF30:
 3941 0425 43617073 		.ascii	"Capsense_UpdateSensorBaseline\000"
 3941      656E7365 
 3941      5F557064 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 123


 3941      61746553 
 3941      656E736F 
 3942              	.LASF57:
 3943 0443 43617073 		.ascii	"Capsense_CheckIsWidgetActive\000"
 3943      656E7365 
 3943      5F436865 
 3943      636B4973 
 3943      57696467 
 3944              	.LASF0:
 3945 0460 7369676E 		.ascii	"signed char\000"
 3945      65642063 
 3945      68617200 
 3946              	.LASF68:
 3947 046c 43617073 		.ascii	"Capsense_EnableRawDataFilters\000"
 3947      656E7365 
 3947      5F456E61 
 3947      626C6552 
 3947      61774461 
 3948              	.LASF7:
 3949 048a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3949      206C6F6E 
 3949      6720756E 
 3949      7369676E 
 3949      65642069 
 3950              	.LASF45:
 3951 04a1 43617073 		.ascii	"Capsense_GetNegativeNoiseThreshold\000"
 3951      656E7365 
 3951      5F476574 
 3951      4E656761 
 3951      74697665 
 3952              	.LASF83:
 3953 04c4 43617073 		.ascii	"Capsense_hysteresis\000"
 3953      656E7365 
 3953      5F687973 
 3953      74657265 
 3953      73697300 
 3954              	.LASF84:
 3955 04d8 43617073 		.ascii	"Capsense_debounce\000"
 3955      656E7365 
 3955      5F646562 
 3955      6F756E63 
 3955      6500
 3956              	.LASF8:
 3957 04ea 756E7369 		.ascii	"unsigned int\000"
 3957      676E6564 
 3957      20696E74 
 3957      00
 3958              	.LASF31:
 3959 04f7 43617073 		.ascii	"Capsense_UpdateEnabledBaselines\000"
 3959      656E7365 
 3959      5F557064 
 3959      61746545 
 3959      6E61626C 
 3960              	.LASF52:
 3961 0517 43617073 		.ascii	"Capsense_CheckIsSensorActive\000"
 3961      656E7365 
 3961      5F436865 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 124


 3961      636B4973 
 3961      53656E73 
 3962              	.LASF46:
 3963 0534 43617073 		.ascii	"Capsense_SetFingerThreshold\000"
 3963      656E7365 
 3963      5F536574 
 3963      46696E67 
 3963      65725468 
 3964              	.LASF23:
 3965 0550 69735365 		.ascii	"isSensorEnabled\000"
 3965      6E736F72 
 3965      456E6162 
 3965      6C656400 
 3966              	.LASF14:
 3967 0560 63686172 		.ascii	"char\000"
 3967      00
 3968              	.LASF86:
 3969 0565 43617073 		.ascii	"Capsense_numberOfSensors\000"
 3969      656E7365 
 3969      5F6E756D 
 3969      6265724F 
 3969      6653656E 
 3970              	.LASF58:
 3971 057e 72617749 		.ascii	"rawIndex\000"
 3971      6E646578 
 3971      00
 3972              	.LASF34:
 3973 0587 66697273 		.ascii	"firstSensor\000"
 3973      7453656E 
 3973      736F7200 
 3974              	.LASF3:
 3975 0593 73686F72 		.ascii	"short unsigned int\000"
 3975      7420756E 
 3975      7369676E 
 3975      65642069 
 3975      6E7400
 3976              	.LASF71:
 3977 05a6 43617073 		.ascii	"Capsense_sensorRaw\000"
 3977      656E7365 
 3977      5F73656E 
 3977      736F7252 
 3977      617700
 3978              	.LASF35:
 3979 05b9 6C617374 		.ascii	"lastSensor\000"
 3979      53656E73 
 3979      6F7200
 3980              	.LASF42:
 3981 05c4 43617073 		.ascii	"Capsense_GetFingerThreshold\000"
 3981      656E7365 
 3981      5F476574 
 3981      46696E67 
 3981      65725468 
 3982              	.LASF37:
 3983 05e0 64617461 		.ascii	"data\000"
 3983      00
 3984              	.LASF62:
 3985 05e5 43617073 		.ascii	"Capsense_EnableWidget\000"
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 125


 3985      656E7365 
 3985      5F456E61 
 3985      626C6557 
 3985      69646765 
 3986              	.LASF39:
 3987 05fb 43617073 		.ascii	"Capsense_GetDiffCountData\000"
 3987      656E7365 
 3987      5F476574 
 3987      44696666 
 3987      436F756E 
 3988              	.LASF25:
 3989 0615 63616C63 		.ascii	"calc\000"
 3989      00
 3990              	.LASF5:
 3991 061a 6C6F6E67 		.ascii	"long unsigned int\000"
 3991      20756E73 
 3991      69676E65 
 3991      6420696E 
 3991      7400
 3992              	.LASF26:
 3993 062c 7369676E 		.ascii	"sign\000"
 3993      00
 3994              	.LASF91:
 3995 0631 433A5C55 		.ascii	"C:\\Users\\ROUSSMA\\Documents\\PSoC Creator\\RGB_OL"
 3995      73657273 
 3995      5C524F55 
 3995      53534D41 
 3995      5C446F63 
 3996 065f 45445C52 		.ascii	"ED\\RGB_OLED.cydsn\000"
 3996      47425F4F 
 3996      4C45442E 
 3996      63796473 
 3996      6E00
 3997              	.LASF11:
 3998 0671 75696E74 		.ascii	"uint32\000"
 3998      333200
 3999              	.LASF50:
 4000 0678 43617073 		.ascii	"Capsense_SetDebounce\000"
 4000      656E7365 
 4000      5F536574 
 4000      4465626F 
 4000      756E6365 
 4001              	.LASF78:
 4002 068d 43617073 		.ascii	"Capsense_lowBaselineResetCnt\000"
 4002      656E7365 
 4002      5F6C6F77 
 4002      42617365 
 4002      6C696E65 
 4003              	.LASF18:
 4004 06aa 43617073 		.ascii	"Capsense_InitializeSensorBaseline\000"
 4004      656E7365 
 4004      5F496E69 
 4004      7469616C 
 4004      697A6553 
 4005              	.LASF66:
 4006 06cc 43617073 		.ascii	"Capsense_GetLowBaselineReset\000"
 4006      656E7365 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 126


 4006      5F476574 
 4006      4C6F7742 
 4006      6173656C 
 4007              	.LASF15:
 4008 06e9 73697A65 		.ascii	"sizetype\000"
 4008      74797065 
 4008      00
 4009              	.LASF32:
 4010 06f2 43617073 		.ascii	"Capsense_UpdateWidgetBaseline\000"
 4010      656E7365 
 4010      5F557064 
 4010      61746557 
 4010      69646765 
 4011              	.LASF54:
 4012 0710 6465626F 		.ascii	"debounceIndex\000"
 4012      756E6365 
 4012      496E6465 
 4012      7800
 4013              	.LASF13:
 4014 071e 646F7562 		.ascii	"double\000"
 4014      6C6500
 4015              	.LASF33:
 4016 0725 73656E73 		.ascii	"sensorsPerWidget\000"
 4016      6F727350 
 4016      65725769 
 4016      64676574 
 4016      00
 4017              	.LASF72:
 4018 0736 43617073 		.ascii	"Capsense_sensorEnableMask\000"
 4018      656E7365 
 4018      5F73656E 
 4018      736F7245 
 4018      6E61626C 
 4019              	.LASF76:
 4020 0750 43617073 		.ascii	"Capsense_sensorSignal\000"
 4020      656E7365 
 4020      5F73656E 
 4020      736F7253 
 4020      69676E61 
 4021              	.LASF44:
 4022 0766 43617073 		.ascii	"Capsense_GetFingerHysteresis\000"
 4022      656E7365 
 4022      5F476574 
 4022      46696E67 
 4022      65724879 
 4023              	.LASF90:
 4024 0783 47656E65 		.ascii	"Generated_Source\\PSoC4\\Capsense_CSHL.c\000"
 4024      72617465 
 4024      645F536F 
 4024      75726365 
 4024      5C50536F 
 4025              	.LASF20:
 4026 07aa 43617073 		.ascii	"Capsense_InitializeAllBaselines\000"
 4026      656E7365 
 4026      5F496E69 
 4026      7469616C 
 4026      697A6541 
ARM GAS  C:\Users\ROUSSMA\AppData\Local\Temp\ccw7ZO0v.s 			page 127


 4027              	.LASF55:
 4028 07ca 66696E67 		.ascii	"fingerThreshold\000"
 4028      65725468 
 4028      72657368 
 4028      6F6C6400 
 4029              	.LASF64:
 4030 07da 43617073 		.ascii	"Capsense_IIR4Filter\000"
 4030      656E7365 
 4030      5F494952 
 4030      3446696C 
 4030      74657200 
 4031              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
